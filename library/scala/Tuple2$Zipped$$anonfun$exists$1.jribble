public final class Lscala/Tuple2$Zipped$$anonfun$exists$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final V; apply(Ljava/lang/Object; el1) {
    if ((!(this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)acc$1.(Lscala/runtime/BooleanRef;)elem) && this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)elems2$5.(Lscala/collection/Iterator;::hasNext()Z;)()))
      {
        this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)acc$1.(Lscala/runtime/BooleanRef;)elem = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)f$4.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(el1, this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)elems2$5.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()));
      }
    else
      {
        
      }
  }
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;::apply(Ljava/lang/Object;)V;)(v1);
    return Lscala/runtime/BoxedUnit;.UNIT;
  }
  
  private Lscala/Function2; f$4;
  
  private Lscala/runtime/BooleanRef; acc$1;
  
  private Lscala/collection/Iterator; elems2$5;
  
  public this(Lscala/Tuple2$Zipped; $outer, Lscala/Function2; f$4, Lscala/runtime/BooleanRef; acc$1, Lscala/collection/Iterator; elems2$5) {
    this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)f$4 = f$4;
    this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)acc$1 = acc$1;
    this.(Lscala/Tuple2$Zipped$$anonfun$exists$1;)elems2$5 = elems2$5;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
