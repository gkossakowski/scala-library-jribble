public class Lscala/reflect/generic/Trees$Traverser; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  private Lscala/reflect/generic/Symbols$AbsSymbol; currentOwner$u0020;
  
  public Lscala/reflect/generic/Symbols$AbsSymbol; currentOwner() {
    return this.(Lscala/reflect/generic/Trees$Traverser;)currentOwner$u0020;
  }
  
  protected V; currentOwner_$eq(Lscala/reflect/generic/Symbols$AbsSymbol; x$1) {
    this.(Lscala/reflect/generic/Trees$Traverser;)currentOwner$u0020 = x$1;
  }
  
  public V; traverse(Lscala/reflect/generic/Trees$Tree; tree) {
    Lscala/reflect/generic/Trees$Tree; temp84 = tree;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp84, this.(Lscala/reflect/generic/Trees$Traverser;::scala$reflect$generic$Trees$Traverser$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::EmptyTree()Lscala/reflect/generic/Trees$EmptyTree$;)()))
      {
        
      }
    else
      {
        failCont$percent2: while(true) {
          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$PackageDef;))
            {
              Lscala/reflect/generic/Trees$PackageDef; temp85 = temp84.<cast>(Lscala/reflect/generic/Trees$PackageDef;);
              Lscala/collection/immutable/List; temp87 = temp85.(Lscala/reflect/generic/Trees$PackageDef;::stats()Lscala/collection/immutable/List;)();
              Lscala/collection/immutable/List; stats$1 = temp87;
              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp85.(Lscala/reflect/generic/Trees$PackageDef;::pid()Lscala/reflect/generic/Trees$RefTree;)().<cast>(Lscala/reflect/generic/Trees$Tree;));
              this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)().(Lscala/reflect/generic/Symbols$AbsSymbol;::moduleClass()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$1;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;)V;)(this, stats$1)));
            }
          else
            {
              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ClassDef;))
                {
                  Lscala/reflect/generic/Trees$ClassDef; temp88 = temp84.<cast>(Lscala/reflect/generic/Trees$ClassDef;);
                  Lscala/reflect/generic/Trees$Modifiers; temp89 = temp88.(Lscala/reflect/generic/Trees$ClassDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)();
                  Lscala/collection/immutable/List; temp91 = temp88.(Lscala/reflect/generic/Trees$ClassDef;::tparams()Lscala/collection/immutable/List;)();
                  Lscala/reflect/generic/Trees$Template; temp92 = temp88.(Lscala/reflect/generic/Trees$ClassDef;::impl()Lscala/reflect/generic/Trees$Template;)();
                  Lscala/reflect/generic/Trees$Modifiers; mods$1 = temp89;
                  Lscala/collection/immutable/List; tparams$1 = temp91;
                  Lscala/reflect/generic/Trees$Template; impl$1 = temp92;
                  this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$2;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V;)(this, mods$1, tparams$1, impl$1)));
                }
              else
                {
                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ModuleDef;))
                    {
                      Lscala/reflect/generic/Trees$ModuleDef; temp93 = temp84.<cast>(Lscala/reflect/generic/Trees$ModuleDef;);
                      Lscala/reflect/generic/Trees$Modifiers; temp94 = temp93.(Lscala/reflect/generic/Trees$ModuleDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)();
                      Lscala/reflect/generic/Trees$Template; temp96 = temp93.(Lscala/reflect/generic/Trees$ModuleDef;::impl()Lscala/reflect/generic/Trees$Template;)();
                      Lscala/reflect/generic/Trees$Modifiers; mods$2 = temp94;
                      Lscala/reflect/generic/Trees$Template; impl$2 = temp96;
                      this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)().(Lscala/reflect/generic/Symbols$AbsSymbol;::moduleClass()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$3;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Template;)V;)(this, mods$2, impl$2)));
                    }
                  else
                    {
                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ValDef;))
                        {
                          Lscala/reflect/generic/Trees$ValDef; temp97 = temp84.<cast>(Lscala/reflect/generic/Trees$ValDef;);
                          Lscala/reflect/generic/Trees$Modifiers; temp98 = temp97.(Lscala/reflect/generic/Trees$ValDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)();
                          Lscala/reflect/generic/Trees$Tree; temp100 = temp97.(Lscala/reflect/generic/Trees$ValDef;::tpt()Lscala/reflect/generic/Trees$Tree;)();
                          Lscala/reflect/generic/Trees$Tree; temp101 = temp97.(Lscala/reflect/generic/Trees$ValDef;::rhs()Lscala/reflect/generic/Trees$Tree;)();
                          Lscala/reflect/generic/Trees$Modifiers; mods$3 = temp98;
                          Lscala/reflect/generic/Trees$Tree; tpt$1 = temp100;
                          Lscala/reflect/generic/Trees$Tree; rhs$1 = temp101;
                          this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$4;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this, mods$3, tpt$1, rhs$1)));
                        }
                      else
                        {
                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$DefDef;))
                            {
                              Lscala/reflect/generic/Trees$DefDef; temp102 = temp84.<cast>(Lscala/reflect/generic/Trees$DefDef;);
                              Lscala/reflect/generic/Trees$Modifiers; temp103 = temp102.(Lscala/reflect/generic/Trees$DefDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)();
                              Lscala/collection/immutable/List; temp105 = temp102.(Lscala/reflect/generic/Trees$DefDef;::tparams()Lscala/collection/immutable/List;)();
                              Lscala/collection/immutable/List; temp106 = temp102.(Lscala/reflect/generic/Trees$DefDef;::vparamss()Lscala/collection/immutable/List;)();
                              Lscala/reflect/generic/Trees$Tree; temp107 = temp102.(Lscala/reflect/generic/Trees$DefDef;::tpt()Lscala/reflect/generic/Trees$Tree;)();
                              Lscala/reflect/generic/Trees$Tree; temp108 = temp102.(Lscala/reflect/generic/Trees$DefDef;::rhs()Lscala/reflect/generic/Trees$Tree;)();
                              Lscala/reflect/generic/Trees$Modifiers; mods$4 = temp103;
                              Lscala/collection/immutable/List; tparams$2 = temp105;
                              Lscala/collection/immutable/List; vparamss$1 = temp106;
                              Lscala/reflect/generic/Trees$Tree; tpt$2 = temp107;
                              Lscala/reflect/generic/Trees$Tree; rhs$2 = temp108;
                              this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$5;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this, mods$4, tparams$2, vparamss$1, tpt$2, rhs$2)));
                            }
                          else
                            {
                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$TypeDef;))
                                {
                                  Lscala/reflect/generic/Trees$TypeDef; temp109 = temp84.<cast>(Lscala/reflect/generic/Trees$TypeDef;);
                                  Lscala/reflect/generic/Trees$Modifiers; temp110 = temp109.(Lscala/reflect/generic/Trees$TypeDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)();
                                  Lscala/collection/immutable/List; temp112 = temp109.(Lscala/reflect/generic/Trees$TypeDef;::tparams()Lscala/collection/immutable/List;)();
                                  Lscala/reflect/generic/Trees$Tree; temp113 = temp109.(Lscala/reflect/generic/Trees$TypeDef;::rhs()Lscala/reflect/generic/Trees$Tree;)();
                                  Lscala/reflect/generic/Trees$Modifiers; mods$5 = temp110;
                                  Lscala/collection/immutable/List; tparams$3 = temp112;
                                  Lscala/reflect/generic/Trees$Tree; rhs$3 = temp113;
                                  this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$6;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this, mods$5, tparams$3, rhs$3)));
                                }
                              else
                                {
                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$LabelDef;))
                                    {
                                      Lscala/reflect/generic/Trees$LabelDef; temp114 = temp84.<cast>(Lscala/reflect/generic/Trees$LabelDef;);
                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp114.(Lscala/reflect/generic/Trees$LabelDef;::params()Lscala/collection/immutable/List;)());
                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp114.(Lscala/reflect/generic/Trees$LabelDef;::rhs()Lscala/reflect/generic/Trees$Tree;)());
                                    }
                                  else
                                    {
                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Import;))
                                        {
                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Import;).(Lscala/reflect/generic/Trees$Import;::expr()Lscala/reflect/generic/Trees$Tree;)());
                                        }
                                      else
                                        {
                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Annotated;))
                                            {
                                              Lscala/reflect/generic/Trees$Annotated; temp121 = temp84.<cast>(Lscala/reflect/generic/Trees$Annotated;);
                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp121.(Lscala/reflect/generic/Trees$Annotated;::annot()Lscala/reflect/generic/Trees$Tree;)());
                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp121.(Lscala/reflect/generic/Trees$Annotated;::arg()Lscala/reflect/generic/Trees$Tree;)());
                                            }
                                          else
                                            {
                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Template;))
                                                {
                                                  Lscala/reflect/generic/Trees$Template; temp124 = temp84.<cast>(Lscala/reflect/generic/Trees$Template;);
                                                  Lscala/reflect/generic/Trees$ValDef; temp126 = temp124.(Lscala/reflect/generic/Trees$Template;::self()Lscala/reflect/generic/Trees$ValDef;)();
                                                  Lscala/reflect/generic/Trees$ValDef; self = temp126;
                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp124.(Lscala/reflect/generic/Trees$Template;::parents()Lscala/collection/immutable/List;)());
                                                  if (!(self.(Lscala/reflect/generic/Trees$Tree;::isEmpty()Z;)()))
                                                    {
                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(self);
                                                    }
                                                  else
                                                    {
                                                      
                                                    }
                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverseStats(Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(temp124.(Lscala/reflect/generic/Trees$Template;::body()Lscala/collection/immutable/List;)(), tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)());
                                                }
                                              else
                                                {
                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Block;))
                                                    {
                                                      Lscala/reflect/generic/Trees$Block; temp128 = temp84.<cast>(Lscala/reflect/generic/Trees$Block;);
                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp128.(Lscala/reflect/generic/Trees$Block;::stats()Lscala/collection/immutable/List;)());
                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp128.(Lscala/reflect/generic/Trees$Block;::expr()Lscala/reflect/generic/Trees$Tree;)());
                                                    }
                                                  else
                                                    {
                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$CaseDef;))
                                                        {
                                                          Lscala/reflect/generic/Trees$CaseDef; temp131 = temp84.<cast>(Lscala/reflect/generic/Trees$CaseDef;);
                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp131.(Lscala/reflect/generic/Trees$CaseDef;::pat()Lscala/reflect/generic/Trees$Tree;)());
                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp131.(Lscala/reflect/generic/Trees$CaseDef;::guard()Lscala/reflect/generic/Trees$Tree;)());
                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp131.(Lscala/reflect/generic/Trees$CaseDef;::body()Lscala/reflect/generic/Trees$Tree;)());
                                                        }
                                                      else
                                                        {
                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Alternative;))
                                                            {
                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Alternative;).(Lscala/reflect/generic/Trees$Alternative;::trees()Lscala/collection/immutable/List;)());
                                                            }
                                                          else
                                                            {
                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Star;))
                                                                {
                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Star;).(Lscala/reflect/generic/Trees$Star;::elem()Lscala/reflect/generic/Trees$Tree;)());
                                                                }
                                                              else
                                                                {
                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Bind;))
                                                                    {
                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Bind;).(Lscala/reflect/generic/Trees$Bind;::body()Lscala/reflect/generic/Trees$Tree;)());
                                                                    }
                                                                  else
                                                                    {
                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$UnApply;))
                                                                        {
                                                                          Lscala/reflect/generic/Trees$UnApply; temp142 = temp84.<cast>(Lscala/reflect/generic/Trees$UnApply;);
                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp142.(Lscala/reflect/generic/Trees$UnApply;::fun()Lscala/reflect/generic/Trees$Tree;)());
                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp142.(Lscala/reflect/generic/Trees$UnApply;::args()Lscala/collection/immutable/List;)());
                                                                        }
                                                                      else
                                                                        {
                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ArrayValue;))
                                                                            {
                                                                              Lscala/reflect/generic/Trees$ArrayValue; temp145 = temp84.<cast>(Lscala/reflect/generic/Trees$ArrayValue;);
                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp145.(Lscala/reflect/generic/Trees$ArrayValue;::elemtpt()Lscala/reflect/generic/Trees$Tree;)());
                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp145.(Lscala/reflect/generic/Trees$ArrayValue;::elems()Lscala/collection/immutable/List;)());
                                                                            }
                                                                          else
                                                                            {
                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Function;))
                                                                                {
                                                                                  Lscala/reflect/generic/Trees$Function; temp148 = temp84.<cast>(Lscala/reflect/generic/Trees$Function;);
                                                                                  Lscala/collection/immutable/List; temp149 = temp148.(Lscala/reflect/generic/Trees$Function;::vparams()Lscala/collection/immutable/List;)();
                                                                                  Lscala/reflect/generic/Trees$Tree; temp150 = temp148.(Lscala/reflect/generic/Trees$Function;::body()Lscala/reflect/generic/Trees$Tree;)();
                                                                                  Lscala/collection/immutable/List; vparams$1 = temp149;
                                                                                  Lscala/reflect/generic/Trees$Tree; body$1 = temp150;
                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)(), (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverse$7;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this, vparams$1, body$1)));
                                                                                }
                                                                              else
                                                                                {
                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Assign;))
                                                                                    {
                                                                                      Lscala/reflect/generic/Trees$Assign; temp151 = temp84.<cast>(Lscala/reflect/generic/Trees$Assign;);
                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp151.(Lscala/reflect/generic/Trees$Assign;::lhs()Lscala/reflect/generic/Trees$Tree;)());
                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp151.(Lscala/reflect/generic/Trees$Assign;::rhs()Lscala/reflect/generic/Trees$Tree;)());
                                                                                    }
                                                                                  else
                                                                                    {
                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$If;))
                                                                                        {
                                                                                          Lscala/reflect/generic/Trees$If; temp154 = temp84.<cast>(Lscala/reflect/generic/Trees$If;);
                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp154.(Lscala/reflect/generic/Trees$If;::cond()Lscala/reflect/generic/Trees$Tree;)());
                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp154.(Lscala/reflect/generic/Trees$If;::thenp()Lscala/reflect/generic/Trees$Tree;)());
                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp154.(Lscala/reflect/generic/Trees$If;::elsep()Lscala/reflect/generic/Trees$Tree;)());
                                                                                        }
                                                                                      else
                                                                                        {
                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Match;))
                                                                                            {
                                                                                              Lscala/reflect/generic/Trees$Match; temp158 = temp84.<cast>(Lscala/reflect/generic/Trees$Match;);
                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp158.(Lscala/reflect/generic/Trees$Match;::selector()Lscala/reflect/generic/Trees$Tree;)());
                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp158.(Lscala/reflect/generic/Trees$Match;::cases()Lscala/collection/immutable/List;)());
                                                                                            }
                                                                                          else
                                                                                            {
                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Return;))
                                                                                                {
                                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Return;).(Lscala/reflect/generic/Trees$Return;::expr()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                }
                                                                                              else
                                                                                                {
                                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Try;))
                                                                                                    {
                                                                                                      Lscala/reflect/generic/Trees$Try; temp163 = temp84.<cast>(Lscala/reflect/generic/Trees$Try;);
                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp163.(Lscala/reflect/generic/Trees$Try;::block()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp163.(Lscala/reflect/generic/Trees$Try;::catches()Lscala/collection/immutable/List;)());
                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp163.(Lscala/reflect/generic/Trees$Try;::finalizer()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                    }
                                                                                                  else
                                                                                                    {
                                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Throw;))
                                                                                                        {
                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Throw;).(Lscala/reflect/generic/Trees$Throw;::expr()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                        }
                                                                                                      else
                                                                                                        {
                                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$New;))
                                                                                                            {
                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$New;).(Lscala/reflect/generic/Trees$New;::tpt()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                            }
                                                                                                          else
                                                                                                            {
                                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Typed;))
                                                                                                                {
                                                                                                                  Lscala/reflect/generic/Trees$Typed; temp171 = temp84.<cast>(Lscala/reflect/generic/Trees$Typed;);
                                                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp171.(Lscala/reflect/generic/Trees$Typed;::expr()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp171.(Lscala/reflect/generic/Trees$Typed;::tpt()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                }
                                                                                                              else
                                                                                                                {
                                                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$TypeApply;))
                                                                                                                    {
                                                                                                                      Lscala/reflect/generic/Trees$TypeApply; temp174 = temp84.<cast>(Lscala/reflect/generic/Trees$TypeApply;);
                                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp174.(Lscala/reflect/generic/Trees$TypeApply;::fun()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp174.(Lscala/reflect/generic/Trees$TypeApply;::args()Lscala/collection/immutable/List;)());
                                                                                                                    }
                                                                                                                  else
                                                                                                                    {
                                                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Apply;))
                                                                                                                        {
                                                                                                                          Lscala/reflect/generic/Trees$Apply; temp177 = temp84.<cast>(Lscala/reflect/generic/Trees$Apply;);
                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp177.(Lscala/reflect/generic/Trees$Apply;::fun()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp177.(Lscala/reflect/generic/Trees$Apply;::args()Lscala/collection/immutable/List;)());
                                                                                                                        }
                                                                                                                      else
                                                                                                                        {
                                                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ApplyDynamic;))
                                                                                                                            {
                                                                                                                              Lscala/reflect/generic/Trees$ApplyDynamic; temp180 = temp84.<cast>(Lscala/reflect/generic/Trees$ApplyDynamic;);
                                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp180.(Lscala/reflect/generic/Trees$ApplyDynamic;::qual()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp180.(Lscala/reflect/generic/Trees$ApplyDynamic;::args()Lscala/collection/immutable/List;)());
                                                                                                                            }
                                                                                                                          else
                                                                                                                            {
                                                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Super;))
                                                                                                                                {
                                                                                                                                  
                                                                                                                                }
                                                                                                                              else
                                                                                                                                {
                                                                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$This;))
                                                                                                                                    {
                                                                                                                                      
                                                                                                                                    }
                                                                                                                                  else
                                                                                                                                    {
                                                                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Select;))
                                                                                                                                        {
                                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$Select;).(Lscala/reflect/generic/Trees$Select;::qualifier()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                        }
                                                                                                                                      else
                                                                                                                                        {
                                                                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Ident;))
                                                                                                                                            {
                                                                                                                                              
                                                                                                                                            }
                                                                                                                                          else
                                                                                                                                            {
                                                                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$Literal;))
                                                                                                                                                {
                                                                                                                                                  
                                                                                                                                                }
                                                                                                                                              else
                                                                                                                                                {
                                                                                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$AbsTypeTree;))
                                                                                                                                                    {
                                                                                                                                                      if (this.(Lscala/reflect/generic/Trees$Traverser;::scala$reflect$generic$Trees$Traverser$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::TypeTree()Lscala/reflect/generic/Trees$TypeTreeExtractor;)().(Lscala/reflect/generic/Trees$TypeTreeExtractor;::unapply(Lscala/reflect/generic/Trees$AbsTypeTree;)Z;)(temp84.<cast>(Lscala/reflect/generic/Trees$AbsTypeTree;)))
                                                                                                                                                        {
                                                                                                                                                          
                                                                                                                                                        }
                                                                                                                                                      else
                                                                                                                                                        {
                                                                                                                                                          throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp84));
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                  else
                                                                                                                                                    {
                                                                                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$SingletonTypeTree;))
                                                                                                                                                        {
                                                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$SingletonTypeTree;).(Lscala/reflect/generic/Trees$SingletonTypeTree;::ref()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                        }
                                                                                                                                                      else
                                                                                                                                                        {
                                                                                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$SelectFromTypeTree;))
                                                                                                                                                            {
                                                                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$SelectFromTypeTree;).(Lscala/reflect/generic/Trees$SelectFromTypeTree;::qualifier()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                            }
                                                                                                                                                          else
                                                                                                                                                            {
                                                                                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$CompoundTypeTree;))
                                                                                                                                                                {
                                                                                                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$CompoundTypeTree;).(Lscala/reflect/generic/Trees$CompoundTypeTree;::templ()Lscala/reflect/generic/Trees$Template;)());
                                                                                                                                                                }
                                                                                                                                                              else
                                                                                                                                                                {
                                                                                                                                                                  if (temp84.<instanceof>(Lscala/reflect/generic/Trees$AppliedTypeTree;))
                                                                                                                                                                    {
                                                                                                                                                                      Lscala/reflect/generic/Trees$AppliedTypeTree; temp204 = temp84.<cast>(Lscala/reflect/generic/Trees$AppliedTypeTree;);
                                                                                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp204.(Lscala/reflect/generic/Trees$AppliedTypeTree;::tpt()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                                      this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp204.(Lscala/reflect/generic/Trees$AppliedTypeTree;::args()Lscala/collection/immutable/List;)());
                                                                                                                                                                    }
                                                                                                                                                                  else
                                                                                                                                                                    {
                                                                                                                                                                      if (temp84.<instanceof>(Lscala/reflect/generic/Trees$TypeBoundsTree;))
                                                                                                                                                                        {
                                                                                                                                                                          Lscala/reflect/generic/Trees$TypeBoundsTree; temp207 = temp84.<cast>(Lscala/reflect/generic/Trees$TypeBoundsTree;);
                                                                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp207.(Lscala/reflect/generic/Trees$TypeBoundsTree;::lo()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                                          this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp207.(Lscala/reflect/generic/Trees$TypeBoundsTree;::hi()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                                        }
                                                                                                                                                                      else
                                                                                                                                                                        {
                                                                                                                                                                          if (temp84.<instanceof>(Lscala/reflect/generic/Trees$ExistentialTypeTree;))
                                                                                                                                                                            {
                                                                                                                                                                              Lscala/reflect/generic/Trees$ExistentialTypeTree; temp210 = temp84.<cast>(Lscala/reflect/generic/Trees$ExistentialTypeTree;);
                                                                                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp210.(Lscala/reflect/generic/Trees$ExistentialTypeTree;::tpt()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                                              this.(Lscala/reflect/generic/Trees$Traverser;::traverseTrees(Lscala/collection/immutable/List;)V;)(temp210.(Lscala/reflect/generic/Trees$ExistentialTypeTree;::whereClauses()Lscala/collection/immutable/List;)());
                                                                                                                                                                            }
                                                                                                                                                                          else
                                                                                                                                                                            {
                                                                                                                                                                              if (temp84.<instanceof>(Lscala/reflect/generic/Trees$SelectFromArray;))
                                                                                                                                                                                {
                                                                                                                                                                                  this.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(temp84.<cast>(Lscala/reflect/generic/Trees$SelectFromArray;).(Lscala/reflect/generic/Trees$SelectFromArray;::qualifier()Lscala/reflect/generic/Trees$Tree;)());
                                                                                                                                                                                }
                                                                                                                                                                              else
                                                                                                                                                                                {
                                                                                                                                                                                  throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp84));
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
          break;
        }
      }
  }
  
  public V; traverseTrees(Lscala/collection/immutable/List; trees) {
    trees.(Lscala/collection/LinearSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1;::this(Lscala/reflect/generic/Trees$Traverser;)V;)(this)));
  }
  
  public V; traverseTreess(Lscala/collection/immutable/List; treess) {
    treess.(Lscala/collection/LinearSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1;::this(Lscala/reflect/generic/Trees$Traverser;)V;)(this)));
  }
  
  public V; traverseStats(Lscala/collection/immutable/List; stats, Lscala/reflect/generic/Symbols$AbsSymbol; exprOwner$1) {
    stats.(Lscala/collection/LinearSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1;::this(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(this, exprOwner$1)));
  }
  
  public V; atOwner(Lscala/reflect/generic/Symbols$AbsSymbol; owner, Lscala/Function0; traverse) {
    Lscala/reflect/generic/Symbols$AbsSymbol; prevOwner = this.(Lscala/reflect/generic/Trees$Traverser;::currentOwner()Lscala/reflect/generic/Symbols$AbsSymbol;)();
    this.(Lscala/reflect/generic/Trees$Traverser;::currentOwner_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(owner);
    traverse.(Lscala/Function0;::apply()Ljava/lang/Object;)();
    this.(Lscala/reflect/generic/Trees$Traverser;::currentOwner_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(prevOwner);
  }
  
  protected Lscala/reflect/generic/Universe; $outer$u0020;
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$Traverser$$$outer() {
    return this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
    this.(Lscala/reflect/generic/Trees$Traverser;)currentOwner$u0020 = $outer.(Lscala/reflect/generic/StandardDefinitions;::definitions()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;)().(Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;::RootClass()Lscala/reflect/generic/Symbols$AbsSymbol;)();
  }
}
