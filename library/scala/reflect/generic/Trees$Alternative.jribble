public class Lscala/reflect/generic/Trees$Alternative; extends Lscala/reflect/generic/Trees$Tree; implements Lscala/reflect/generic/Trees$TermTree;, Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/collection/immutable/List; copy$default$1() {
    return this.(Lscala/reflect/generic/Trees$Alternative;::trees()Lscala/collection/immutable/List;)();
  }
  
  private Lscala/collection/immutable/List; trees$u0020;
  
  public Lscala/collection/immutable/List; trees() {
    return this.(Lscala/reflect/generic/Trees$Alternative;)trees$u0020;
  }
  
  public Lscala/reflect/generic/Trees$Alternative; copy(Lscala/collection/immutable/List; trees) {
    return (new (Lscala/reflect/generic/Trees$Alternative;::this(Lscala/reflect/generic/Universe;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/Trees$Alternative;::scala$reflect$generic$Trees$Alternative$$$outer()Lscala/reflect/generic/Universe;)(), trees));
  }
  
  public Ljava/lang/String; productPrefix() {
    return "Alternative";
  }
  
  public I; productArity() {
    return 1;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp62 = x$1;
    Ljava/lang/Object; $48$;
    if ((temp62 == 0))
      {
        $48$ = this.(Lscala/reflect/generic/Trees$Alternative;::trees()Lscala/collection/immutable/List;)();
      }
    else
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    return $48$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/generic/Trees$Alternative;);
  }
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$Alternative$$$outer() {
    return this.(Lscala/reflect/generic/Trees$Alternative;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer, Lscala/collection/immutable/List; trees) {
    this.(Lscala/reflect/generic/Trees$Alternative;)trees$u0020 = trees;
    (Lscala/reflect/generic/Trees$Tree;::super(Lscala/reflect/generic/Universe;)V;)($outer);
  }
}
