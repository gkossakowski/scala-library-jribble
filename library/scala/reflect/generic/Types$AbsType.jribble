public abstract class Lscala/reflect/generic/Types$AbsType; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  public abstract Lscala/reflect/generic/Symbols$AbsSymbol; typeSymbol();
  
  public abstract Lscala/reflect/generic/Symbols$AbsSymbol; decl(Ljava/lang/Object; name);
  
  public Z; isComplete() {
    return true;
  }
  
  public V; complete(Lscala/reflect/generic/Symbols$AbsSymbol; sym) {
    
  }
  
  public Ljava/lang/String; toString() {
    Ljava/lang/String; $1$;
    if ((this.(Lscala/reflect/generic/Types$AbsType;::scala$reflect$generic$Types$AbsType$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::scala$reflect$generic$Types$$tostringRecursions()I;)() >= 50))
      {
        $1$ = "...";
      }
    else
      {
        Ljava/lang/String; exceptionResult1;
        try {
          this.(Lscala/reflect/generic/Types$AbsType;::scala$reflect$generic$Types$AbsType$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::scala$reflect$generic$Types$$tostringRecursions_$eq(I;)V;)((this.(Lscala/reflect/generic/Types$AbsType;::scala$reflect$generic$Types$AbsType$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::scala$reflect$generic$Types$$tostringRecursions()I;)() + 1));
          exceptionResult1 = this.(Lscala/reflect/generic/Types$AbsType;::safeToString()Ljava/lang/String;)();
        } finally {
          this.(Lscala/reflect/generic/Types$AbsType;::scala$reflect$generic$Types$AbsType$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::scala$reflect$generic$Types$$tostringRecursions_$eq(I;)V;)((this.(Lscala/reflect/generic/Types$AbsType;::scala$reflect$generic$Types$AbsType$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::scala$reflect$generic$Types$$tostringRecursions()I;)() - 1));
        }
        $1$ = exceptionResult1;
      }
    return $1$;
  }
  
  public Ljava/lang/String; safeToString() {
    return super.(Ljava/lang/Object;::toString()Ljava/lang/String;)();
  }
  
  protected Lscala/reflect/generic/Universe; $outer$u0020;
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Types$AbsType$$$outer() {
    return this.(Lscala/reflect/generic/Universe;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/Universe;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
  }
}
