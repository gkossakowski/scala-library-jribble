public class Lscala/reflect/generic/Flags; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  public final I; IMPLICIT() {
    return 512;
  }
  
  public final I; FINAL() {
    return 32;
  }
  
  public final I; PRIVATE() {
    return 4;
  }
  
  public final I; PROTECTED() {
    return 1;
  }
  
  public final I; SEALED() {
    return 1024;
  }
  
  public final I; OVERRIDE() {
    return 2;
  }
  
  public final I; CASE() {
    return 2048;
  }
  
  public final I; ABSTRACT() {
    return 8;
  }
  
  public final I; DEFERRED() {
    return 16;
  }
  
  public final I; METHOD() {
    return 64;
  }
  
  public final I; MODULE() {
    return 256;
  }
  
  public final I; INTERFACE() {
    return 128;
  }
  
  public final I; MUTABLE() {
    return 4096;
  }
  
  public final I; PARAM() {
    return 8192;
  }
  
  public final I; PACKAGE() {
    return 16384;
  }
  
  public final I; COVARIANT() {
    return 65536;
  }
  
  public final I; CAPTURED() {
    return 65536;
  }
  
  public final I; BYNAMEPARAM() {
    return 65536;
  }
  
  public final I; CONTRAVARIANT() {
    return 131072;
  }
  
  public final I; LABEL() {
    return 131072;
  }
  
  public final I; INCONSTRUCTOR() {
    return 131072;
  }
  
  public final I; ABSOVERRIDE() {
    return 262144;
  }
  
  public final I; LOCAL() {
    return 524288;
  }
  
  public final I; JAVA() {
    return 1048576;
  }
  
  public final I; SYNTHETIC() {
    return 2097152;
  }
  
  public final I; STABLE() {
    return 4194304;
  }
  
  public final I; STATIC() {
    return 8388608;
  }
  
  public final I; CASEACCESSOR() {
    return 16777216;
  }
  
  public final I; TRAIT() {
    return 33554432;
  }
  
  public final I; DEFAULTPARAM() {
    return 33554432;
  }
  
  public final I; BRIDGE() {
    return 67108864;
  }
  
  public final I; ACCESSOR() {
    return 134217728;
  }
  
  public final I; SUPERACCESSOR() {
    return 268435456;
  }
  
  public final I; PARAMACCESSOR() {
    return 536870912;
  }
  
  public final I; MODULEVAR() {
    return 1073741824;
  }
  
  public final I; SYNTHETICMETH() {
    return 1073741824;
  }
  
  public final I; MONOMORPHIC() {
    return 1073741824;
  }
  
  public final J; LAZY() {
    return 2147483648L;
  }
  
  public final J; IS_ERROR() {
    return 4294967296L;
  }
  
  public final J; OVERLOADED() {
    return 8589934592L;
  }
  
  public final J; LIFTED() {
    return 17179869184L;
  }
  
  public final J; MIXEDIN() {
    return 34359738368L;
  }
  
  public final J; EXISTENTIAL() {
    return 34359738368L;
  }
  
  public final J; EXPANDEDNAME() {
    return 68719476736L;
  }
  
  public final J; IMPLCLASS() {
    return 137438953472L;
  }
  
  public final J; PRESUPER() {
    return 137438953472L;
  }
  
  public final J; TRANS_FLAG() {
    return 274877906944L;
  }
  
  public final J; LOCKED() {
    return 549755813888L;
  }
  
  public final J; SPECIALIZED() {
    return 1099511627776L;
  }
  
  public final J; DEFAULTINIT() {
    return 2199023255552L;
  }
  
  public final J; VBRIDGE() {
    return 4398046511104L;
  }
  
  private final I; IMPLICIT_PKL() {
    return 1;
  }
  
  private final I; FINAL_PKL() {
    return 2;
  }
  
  private final I; PRIVATE_PKL() {
    return 4;
  }
  
  private final I; PROTECTED_PKL() {
    return 8;
  }
  
  private final I; SEALED_PKL() {
    return 16;
  }
  
  private final I; OVERRIDE_PKL() {
    return 32;
  }
  
  private final I; CASE_PKL() {
    return 64;
  }
  
  private final I; ABSTRACT_PKL() {
    return 128;
  }
  
  private final I; DEFERRED_PKL() {
    return 256;
  }
  
  private final I; METHOD_PKL() {
    return 512;
  }
  
  private final I; MODULE_PKL() {
    return 1024;
  }
  
  private final I; INTERFACE_PKL() {
    return 2048;
  }
  
  private final I; PKL_MASK() {
    return 4095;
  }
  
  private final J; PickledFlags$u0020;
  
  public final J; PickledFlags() {
    return this.(Lscala/reflect/generic/Flags;)PickledFlags$u0020;
  }
  
  private I;[ r2p$u0020;
  
  private I;[ r2p() {
    return this.(Lscala/reflect/generic/Flags;)r2p$u0020;
  }
  
  private I;[ p2r$u0020;
  
  private I;[ p2r() {
    return this.(Lscala/reflect/generic/Flags;)p2r$u0020;
  }
  
  public J; rawFlagsToPickled(J; flags) {
    return ((flags & ~(4095)) | this.(Lscala/reflect/generic/Flags;::r2p()I;[)()[(flags.<cast>(I;) & 4095)]);
  }
  
  public J; pickledToRawFlags(J; pflags) {
    return ((pflags & ~(4095)) | this.(Lscala/reflect/generic/Flags;::p2r()I;[)()[(pflags.<cast>(I;) & 4095)]);
  }
  
  private Lscala/collection/immutable/List; pickledListOrder$u0020;
  
  protected Lscala/collection/immutable/List; pickledListOrder() {
    return this.(Lscala/reflect/generic/Flags;)pickledListOrder$u0020;
  }
  
  private final I; rawFlagsToPickledAux$1(I; flags) {
    I; pflags = 0;
    if (((flags & 512) != 0))
      {
        pflags = (pflags | 1);
      }
    else
      {
        
      }
    if (((flags & 32) != 0))
      {
        pflags = (pflags | 2);
      }
    else
      {
        
      }
    if (((flags & 4) != 0))
      {
        pflags = (pflags | 4);
      }
    else
      {
        
      }
    if (((flags & 1) != 0))
      {
        pflags = (pflags | 8);
      }
    else
      {
        
      }
    if (((flags & 1024) != 0))
      {
        pflags = (pflags | 16);
      }
    else
      {
        
      }
    if (((flags & 2) != 0))
      {
        pflags = (pflags | 32);
      }
    else
      {
        
      }
    if (((flags & 2048) != 0))
      {
        pflags = (pflags | 64);
      }
    else
      {
        
      }
    if (((flags & 8) != 0))
      {
        pflags = (pflags | 128);
      }
    else
      {
        
      }
    if (((flags & 16) != 0))
      {
        pflags = (pflags | 256);
      }
    else
      {
        
      }
    if (((flags & 64) != 0))
      {
        pflags = (pflags | 512);
      }
    else
      {
        
      }
    if (((flags & 256) != 0))
      {
        pflags = (pflags | 1024);
      }
    else
      {
        
      }
    if (((flags & 128) != 0))
      {
        pflags = (pflags | 2048);
      }
    else
      {
        
      }
    return pflags;
  }
  
  private final I; pickledToRawFlagsAux$1(I; pflags) {
    I; flags = 0;
    if (((pflags & 1) != 0))
      {
        flags = (flags | 512);
      }
    else
      {
        
      }
    if (((pflags & 2) != 0))
      {
        flags = (flags | 32);
      }
    else
      {
        
      }
    if (((pflags & 4) != 0))
      {
        flags = (flags | 4);
      }
    else
      {
        
      }
    if (((pflags & 8) != 0))
      {
        flags = (flags | 1);
      }
    else
      {
        
      }
    if (((pflags & 16) != 0))
      {
        flags = (flags | 1024);
      }
    else
      {
        
      }
    if (((pflags & 32) != 0))
      {
        flags = (flags | 2);
      }
    else
      {
        
      }
    if (((pflags & 64) != 0))
      {
        flags = (flags | 2048);
      }
    else
      {
        
      }
    if (((pflags & 128) != 0))
      {
        flags = (flags | 8);
      }
    else
      {
        
      }
    if (((pflags & 256) != 0))
      {
        flags = (flags | 16);
      }
    else
      {
        
      }
    if (((pflags & 512) != 0))
      {
        flags = (flags | 64);
      }
    else
      {
        
      }
    if (((pflags & 1024) != 0))
      {
        flags = (flags | 256);
      }
    else
      {
        
      }
    if (((pflags & 2048) != 0))
      {
        flags = (flags | 128);
      }
    else
      {
        
      }
    return flags;
  }
  
  private final I; findBit$1(J; m) {
    J; mask = m;
    I; i = 0;
    while$3: while(true) {
      if ((i <= 62))
        {
          {
            if (((mask & 1) == 1L))
              {
                return i;
              }
            else
              {
                
              }
            mask = (mask >>> 1);
            i = (i + 1);
          }
          continue while$3;
        }
      else
        {
          
        }
      break;
    }
    throw (new (Ljava/lang/AssertionError;::this()V;)());
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    this.(Lscala/reflect/generic/Flags;)PickledFlags$u0020 = 4294967295L;
    I;[ v = new I;[4096];
    I; i = 0;
    while$1: while(true) {
      if ((i <= 4095))
        {
          {
            v[i] = this.(Lscala/reflect/generic/Flags;::rawFlagsToPickledAux$1(I;)I;)(i);
            i = (i + 1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    this.(Lscala/reflect/generic/Flags;)r2p$u0020 = v;
    I;[ v = new I;[4096];
    I; i = 0;
    while$2: while(true) {
      if ((i <= 4095))
        {
          {
            v[i] = this.(Lscala/reflect/generic/Flags;::pickledToRawFlagsAux$1(I;)I;)(i);
            i = (i + 1);
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    this.(Lscala/reflect/generic/Flags;)p2r$u0020 = v;
    J;[ v = new J;[63];
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(1L)] = 512L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(2L)] = 32L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(4L)] = 4L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(8L)] = 1L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(16L)] = 1024L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(32L)] = 2L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(64L)] = 2048L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(128L)] = 8L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(256L)] = 16L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(512L)] = 64L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(1024L)] = 256L;
    v[this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(2048L)] = 128L;
    I; i = this.(Lscala/reflect/generic/Flags;::findBit$1(J;)I;)(4096L);
    while$4: while(true) {
      if ((i <= 62))
        {
          {
            v[i] = (1L << i);
            i = (i + 1);
          }
          continue while$4;
        }
      else
        {
          
        }
      break;
    }
    this.(Lscala/reflect/generic/Flags;)pickledListOrder$u0020 = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::longArrayOps(J;[)Lscala/collection/mutable/ArrayOps;)(v).(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)();
  }
}
