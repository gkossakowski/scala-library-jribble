public final class Lscala/reflect/generic/Trees$ValDef$; extends Lscala/runtime/AbstractFunction4; implements Lscala/ScalaObject; {
  
  public final Ljava/lang/String; toString() {
    return "ValDef";
  }
  
  public Lscala/Option; unapply(Lscala/reflect/generic/Trees$ValDef; x$0) {
    Lscala/Option; $137$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$0, null))
      {
        $137$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $137$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)((new (Lscala/Tuple4;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(x$0.(Lscala/reflect/generic/Trees$ValDef;::mods()Lscala/reflect/generic/Trees$Modifiers;)(), x$0.(Lscala/reflect/generic/Trees$ValDef;::name()Ljava/lang/Object;)(), x$0.(Lscala/reflect/generic/Trees$ValDef;::tpt()Lscala/reflect/generic/Trees$Tree;)(), x$0.(Lscala/reflect/generic/Trees$ValDef;::rhs()Lscala/reflect/generic/Trees$Tree;)()))));
      }
    return $137$;
  }
  
  public Lscala/reflect/generic/Trees$ValDef; apply(Lscala/reflect/generic/Trees$Modifiers; mods, Ljava/lang/Object; name, Lscala/reflect/generic/Trees$Tree; tpt, Lscala/reflect/generic/Trees$Tree; rhs) {
    return (new (Lscala/reflect/generic/Trees$ValDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/Trees$ValDef$;)$outer$u0020, mods, name, tpt, rhs));
  }
  
  private Lscala/reflect/generic/Universe; $outer$u0020;
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2, Ljava/lang/Object; v3, Ljava/lang/Object; v4) {
    return this.(Lscala/reflect/generic/Trees$ValDef$;::apply(Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$ValDef;)(v1.<cast>(Lscala/reflect/generic/Trees$Modifiers;), v2, v3.<cast>(Lscala/reflect/generic/Trees$Tree;), v4.<cast>(Lscala/reflect/generic/Trees$Tree;));
  }
  
  public this(Lscala/reflect/generic/Universe; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/Trees$ValDef$;)$outer$u0020 = $outer;
      }
    (Lscala/runtime/AbstractFunction4;::super()V;)();
  }
}
