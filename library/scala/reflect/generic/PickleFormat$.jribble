public final class Lscala/reflect/generic/PickleFormat$; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  public static Lscala/reflect/generic/PickleFormat$; MODULE$ = new (Lscala/reflect/generic/PickleFormat$;::this()V;)();
  
  private I; MajorVersion$u0020;
  
  public I; MajorVersion() {
    return this.(Lscala/reflect/generic/PickleFormat$;)MajorVersion$u0020;
  }
  
  private I; MinorVersion$u0020;
  
  public I; MinorVersion() {
    return this.(Lscala/reflect/generic/PickleFormat$;)MinorVersion$u0020;
  }
  
  public final I; TERMname() {
    return 1;
  }
  
  public final I; TYPEname() {
    return 2;
  }
  
  public final I; NONEsym() {
    return 3;
  }
  
  public final I; TYPEsym() {
    return 4;
  }
  
  public final I; ALIASsym() {
    return 5;
  }
  
  public final I; CLASSsym() {
    return 6;
  }
  
  public final I; MODULEsym() {
    return 7;
  }
  
  public final I; VALsym() {
    return 8;
  }
  
  public final I; EXTref() {
    return 9;
  }
  
  public final I; EXTMODCLASSref() {
    return 10;
  }
  
  public final I; NOtpe() {
    return 11;
  }
  
  public final I; NOPREFIXtpe() {
    return 12;
  }
  
  public final I; THIStpe() {
    return 13;
  }
  
  public final I; SINGLEtpe() {
    return 14;
  }
  
  public final I; CONSTANTtpe() {
    return 15;
  }
  
  public final I; TYPEREFtpe() {
    return 16;
  }
  
  public final I; TYPEBOUNDStpe() {
    return 17;
  }
  
  public final I; REFINEDtpe() {
    return 18;
  }
  
  public final I; CLASSINFOtpe() {
    return 19;
  }
  
  public final I; METHODtpe() {
    return 20;
  }
  
  public final I; POLYtpe() {
    return 21;
  }
  
  public final I; IMPLICITMETHODtpe() {
    return 22;
  }
  
  public final I; LITERAL() {
    return 23;
  }
  
  public final I; LITERALunit() {
    return 24;
  }
  
  public final I; LITERALboolean() {
    return 25;
  }
  
  public final I; LITERALbyte() {
    return 26;
  }
  
  public final I; LITERALshort() {
    return 27;
  }
  
  public final I; LITERALchar() {
    return 28;
  }
  
  public final I; LITERALint() {
    return 29;
  }
  
  public final I; LITERALlong() {
    return 30;
  }
  
  public final I; LITERALfloat() {
    return 31;
  }
  
  public final I; LITERALdouble() {
    return 32;
  }
  
  public final I; LITERALstring() {
    return 33;
  }
  
  public final I; LITERALnull() {
    return 34;
  }
  
  public final I; LITERALclass() {
    return 35;
  }
  
  public final I; LITERALenum() {
    return 36;
  }
  
  public final I; SYMANNOT() {
    return 40;
  }
  
  public final I; CHILDREN() {
    return 41;
  }
  
  public final I; ANNOTATEDtpe() {
    return 42;
  }
  
  public final I; ANNOTINFO() {
    return 43;
  }
  
  public final I; ANNOTARGARRAY() {
    return 44;
  }
  
  public final I; SUPERtpe() {
    return 46;
  }
  
  public final I; DEBRUIJNINDEXtpe() {
    return 47;
  }
  
  public final I; EXISTENTIALtpe() {
    return 48;
  }
  
  public final I; TREE() {
    return 49;
  }
  
  public final I; EMPTYtree() {
    return 1;
  }
  
  public final I; PACKAGEtree() {
    return 2;
  }
  
  public final I; CLASStree() {
    return 3;
  }
  
  public final I; MODULEtree() {
    return 4;
  }
  
  public final I; VALDEFtree() {
    return 5;
  }
  
  public final I; DEFDEFtree() {
    return 6;
  }
  
  public final I; TYPEDEFtree() {
    return 7;
  }
  
  public final I; LABELtree() {
    return 8;
  }
  
  public final I; IMPORTtree() {
    return 9;
  }
  
  public final I; DOCDEFtree() {
    return 11;
  }
  
  public final I; TEMPLATEtree() {
    return 12;
  }
  
  public final I; BLOCKtree() {
    return 13;
  }
  
  public final I; CASEtree() {
    return 14;
  }
  
  public final I; ALTERNATIVEtree() {
    return 16;
  }
  
  public final I; STARtree() {
    return 17;
  }
  
  public final I; BINDtree() {
    return 18;
  }
  
  public final I; UNAPPLYtree() {
    return 19;
  }
  
  public final I; ARRAYVALUEtree() {
    return 20;
  }
  
  public final I; FUNCTIONtree() {
    return 21;
  }
  
  public final I; ASSIGNtree() {
    return 22;
  }
  
  public final I; IFtree() {
    return 23;
  }
  
  public final I; MATCHtree() {
    return 24;
  }
  
  public final I; RETURNtree() {
    return 25;
  }
  
  public final I; TREtree() {
    return 26;
  }
  
  public final I; THROWtree() {
    return 27;
  }
  
  public final I; NEWtree() {
    return 28;
  }
  
  public final I; TYPEDtree() {
    return 29;
  }
  
  public final I; TYPEAPPLYtree() {
    return 30;
  }
  
  public final I; APPLYtree() {
    return 31;
  }
  
  public final I; APPLYDYNAMICtree() {
    return 32;
  }
  
  public final I; SUPERtree() {
    return 33;
  }
  
  public final I; THIStree() {
    return 34;
  }
  
  public final I; SELECTtree() {
    return 35;
  }
  
  public final I; IDENTtree() {
    return 36;
  }
  
  public final I; LITERALtree() {
    return 37;
  }
  
  public final I; TYPEtree() {
    return 38;
  }
  
  public final I; ANNOTATEDtree() {
    return 39;
  }
  
  public final I; SINGLETONTYPEtree() {
    return 40;
  }
  
  public final I; SELECTFROMTYPEtree() {
    return 41;
  }
  
  public final I; COMPOUNDTYPEtree() {
    return 42;
  }
  
  public final I; APPLIEDTYPEtree() {
    return 43;
  }
  
  public final I; TYPEBOUNDStree() {
    return 44;
  }
  
  public final I; EXISTENTIALTYPEtree() {
    return 45;
  }
  
  public final I; MODIFIERS() {
    return 50;
  }
  
  public final I; firstSymTag() {
    return 3;
  }
  
  public final I; lastSymTag() {
    return 8;
  }
  
  public final I; lastExtSymTag() {
    return 10;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    this.(Lscala/reflect/generic/PickleFormat$;)MajorVersion$u0020 = 5;
    this.(Lscala/reflect/generic/PickleFormat$;)MinorVersion$u0020 = 0;
  }
}
