public final class Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final V; apply(Lscala/reflect/generic/Trees$Tree; stat$1) {
    if ((this.(Lscala/reflect/generic/Symbols$AbsSymbol;)exprOwner$1 != this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020.(Lscala/reflect/generic/Trees$Traverser;::currentOwner()Lscala/reflect/generic/Symbols$AbsSymbol;)()))
      {
        this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020.(Lscala/reflect/generic/Trees$Traverser;::atOwner(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;)(this.(Lscala/reflect/generic/Symbols$AbsSymbol;)exprOwner$1, (new (Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1$$anonfun$apply$1;::this(Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1;Lscala/reflect/generic/Trees$Tree;)V;)(this, stat$1)));
      }
    else
      {
        this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020.(Lscala/reflect/generic/Trees$Traverser;::traverse(Lscala/reflect/generic/Trees$Tree;)V;)(stat$1);
      }
  }
  
  private Lscala/reflect/generic/Trees$Traverser; $outer$u0020;
  
  public Lscala/reflect/generic/Trees$Traverser; scala$reflect$generic$Trees$Traverser$$anonfun$$$outer() {
    return this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020;
  }
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    this.(Lscala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1;::apply(Lscala/reflect/generic/Trees$Tree;)V;)(v1.<cast>(Lscala/reflect/generic/Trees$Tree;));
    return Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
  }
  
  private Lscala/reflect/generic/Symbols$AbsSymbol; exprOwner$1;
  
  public this(Lscala/reflect/generic/Trees$Traverser; $outer, Lscala/reflect/generic/Symbols$AbsSymbol; exprOwner$1) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/Trees$Traverser;)$outer$u0020 = $outer;
      }
    this.(Lscala/reflect/generic/Symbols$AbsSymbol;)exprOwner$1 = exprOwner$1;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
