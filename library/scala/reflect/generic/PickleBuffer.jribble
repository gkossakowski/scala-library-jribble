public class Lscala/reflect/generic/PickleBuffer; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  public B;[ scala$reflect$generic$PickleBuffer$$data;
  
  private B;[ bytes$u0020;
  
  public B;[ bytes() {
    return this.(B;[)bytes$u0020;
  }
  
  public V; bytes_$eq(B;[ x$1) {
    this.(B;[)bytes$u0020 = x$1;
  }
  
  private I; readIndex$u0020;
  
  public I; readIndex() {
    return this.(I;)readIndex$u0020;
  }
  
  public V; readIndex_$eq(I; x$1) {
    this.(I;)readIndex$u0020 = x$1;
  }
  
  private I; writeIndex$u0020;
  
  public I; writeIndex() {
    return this.(I;)writeIndex$u0020;
  }
  
  public V; writeIndex_$eq(I; x$1) {
    this.(I;)writeIndex$u0020 = x$1;
  }
  
  private V; dble() {
    B;[ bytes1 = new B;[(this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)().<length> * 2)];
    Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)(), 0, bytes1, 0, this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)());
    this.(Lscala/reflect/generic/PickleBuffer;::bytes_$eq(B;[)V;)(bytes1);
  }
  
  public V; ensureCapacity(I; capacity) {
    while$1: while(true) {
      if ((this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)().<length> < (this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)() + capacity)))
        {
          this.(Lscala/reflect/generic/PickleBuffer;::dble()V;)();
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public V; writeByte(I; b) {
    if ((this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)() == this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)().<length>))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::dble()V;)();
      }
    else
      {
        
      }
    this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)()[this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)()] = b.<cast>(B;);
    this.(Lscala/reflect/generic/PickleBuffer;::writeIndex_$eq(I;)V;)((this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)() + 1));
  }
  
  public V; writeNat(I; x) {
    this.(Lscala/reflect/generic/PickleBuffer;::writeLongNat(J;)V;)((x.<cast>(J;) & 4294967295L));
  }
  
  public V; writeLongNat(J; x) {
    J; y = (x >> 7);
    if ((y != 0L))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::writeNatPrefix$1(J;)V;)(y);
      }
    else
      {
        
      }
    this.(Lscala/reflect/generic/PickleBuffer;::writeByte(I;)V;)((x & 127).<cast>(I;));
  }
  
  public V; patchNat(I; pos$1, I; x) {
    this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)()[pos$1] = (x & 127).<cast>(B;);
    I; y = (x >> 7);
    if ((y != 0))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::patchNatPrefix$1(I;I;)V;)(y, pos$1);
      }
    else
      {
        
      }
  }
  
  public V; writeLong(J; x) {
    J; y = (x >>> 8);
    J; z = (x & 255);
    if ((-(y) != (z >>> 7)))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::writeLong(J;)V;)(y);
      }
    else
      {
        
      }
    this.(Lscala/reflect/generic/PickleBuffer;::writeByte(I;)V;)(z.<cast>(I;));
  }
  
  public I; peekByte() {
    return this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)()[this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)()].<cast>(I;);
  }
  
  public I; readByte() {
    B; x = this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)()[this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)()];
    this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() + 1));
    return x.<cast>(I;);
  }
  
  public I; readNat() {
    return this.(Lscala/reflect/generic/PickleBuffer;::readLongNat()J;)().<cast>(I;);
  }
  
  public J; readLongNat() {
    J; b = 0L;
    J; x = 0L;
    doWhile$1: while(true) {
      {
        b = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)().<cast>(J;);
        x = ((x << 7) + (b & 127));
      }
      if (((b & 128) != 0L))
        {
          continue doWhile$1;
        }
      else
        {
          
        }
      break;
    }
    return x;
  }
  
  public J; readLong(I; len) {
    J; x = 0L;
    I; i = 0;
    while$2: while(true) {
      if ((i < len))
        {
          {
            x = ((x << 8) + (this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)() & 255));
            i = (i + 1);
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    I; leading = (64 - (len << 3));
    return ((x << leading) >>> leading);
  }
  
  public Lscala/collection/IndexedSeq; toIndexedSeq() {
    I; saved = this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)();
    this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(0);
    this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    Lscala/Tuple2;[ result$1 = new Lscala/Tuple2;[this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)()];
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(result$1.<cast>(Ljava/lang/Object;[)).(Lscala/collection/SeqLike;::indices()Lscala/collection/immutable/Range;)().(Lscala/collection/immutable/Range;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/PickleBuffer$$anonfun$toIndexedSeq$1;::this(Lscala/reflect/generic/PickleBuffer;Lscala/Tuple2;[)V;)(this, result$1)));
    this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(saved);
    return Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(result$1.<cast>(Ljava/lang/Object;[)).(Lscala/collection/TraversableOnce;::toIndexedSeq()Lscala/collection/immutable/IndexedSeq;)();
  }
  
  public Lscala/collection/immutable/List; until(I; end, Lscala/Function0; op) {
    Lscala/collection/immutable/List; $1$;
    if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() == end))
      {
        $1$ = Lscala/collection/immutable/Nil$;.MODULE$;
      }
    else
      {
        Ljava/lang/Object; x$1 = op.(Lscala/Function0;::apply()Ljava/lang/Object;)();
        $1$ = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, op).(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$1);
      }
    return $1$;
  }
  
  public Lscala/collection/immutable/List; times(I; n, Lscala/Function0; op) {
    Lscala/collection/immutable/List; $2$;
    if ((n == 0))
      {
        $2$ = Lscala/collection/immutable/Nil$;.MODULE$;
      }
    else
      {
        Ljava/lang/Object; x$2 = op.(Lscala/Function0;::apply()Ljava/lang/Object;)();
        $2$ = this.(Lscala/reflect/generic/PickleBuffer;::times(I;Lscala/Function0;)Lscala/collection/immutable/List;)((n - 1), op).(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$2);
      }
    return $2$;
  }
  
  public I;[ createIndex() {
    I;[ index$1 = new I;[this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)()];
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)(0).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range$ByOne;)(index$1.<length>).(Lscala/collection/immutable/Range$ByOne;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/PickleBuffer$$anonfun$createIndex$1;::this(Lscala/reflect/generic/PickleBuffer;I;[)V;)(this, index$1)));
    return index$1;
  }
  
  private final V; writeNatPrefix$1(J; x) {
    J; y = (x >> 7);
    if ((y != 0L))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::writeNatPrefix$1(J;)V;)(y);
      }
    else
      {
        
      }
    this.(Lscala/reflect/generic/PickleBuffer;::writeByte(I;)V;)(((x & 127) | 128).<cast>(I;));
  }
  
  private final V; patchNatPrefix$1(I; x, I; pos$1) {
    this.(Lscala/reflect/generic/PickleBuffer;::writeByte(I;)V;)(0);
    Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)(), pos$1, this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)(), (pos$1 + 1), (this.(Lscala/reflect/generic/PickleBuffer;::writeIndex()I;)() - (pos$1 + 1)));
    this.(Lscala/reflect/generic/PickleBuffer;::bytes()B;[)()[pos$1] = ((x & 127) | 128).<cast>(B;);
    I; y = (x >> 7);
    if ((y != 0))
      {
        this.(Lscala/reflect/generic/PickleBuffer;::patchNatPrefix$1(I;I;)V;)(y, pos$1);
      }
    else
      {
        
      }
  }
  
  public this(B;[ data, I; from, I; to) {
    this.(B;[)scala$reflect$generic$PickleBuffer$$data = data;
    (Ljava/lang/Object;::super()V;)();
    this.(B;[)bytes$u0020 = data;
    this.(I;)readIndex$u0020 = from;
    this.(I;)writeIndex$u0020 = to;
  }
}
