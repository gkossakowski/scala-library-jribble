public class Lscala/reflect/generic/Trees$If; extends Lscala/reflect/generic/Trees$Tree; implements Lscala/reflect/generic/Trees$TermTree;, Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/reflect/generic/Trees$Tree; copy$default$3() {
    return this.(Lscala/reflect/generic/Trees$If;::elsep()Lscala/reflect/generic/Trees$Tree;)();
  }
  
  public Lscala/reflect/generic/Trees$Tree; copy$default$2() {
    return this.(Lscala/reflect/generic/Trees$If;::thenp()Lscala/reflect/generic/Trees$Tree;)();
  }
  
  public Lscala/reflect/generic/Trees$Tree; copy$default$1() {
    return this.(Lscala/reflect/generic/Trees$If;::cond()Lscala/reflect/generic/Trees$Tree;)();
  }
  
  private Lscala/reflect/generic/Trees$Tree; cond$u0020;
  
  public Lscala/reflect/generic/Trees$Tree; cond() {
    return this.(Lscala/reflect/generic/Trees$Tree;)cond$u0020;
  }
  
  private Lscala/reflect/generic/Trees$Tree; thenp$u0020;
  
  public Lscala/reflect/generic/Trees$Tree; thenp() {
    return this.(Lscala/reflect/generic/Trees$Tree;)thenp$u0020;
  }
  
  private Lscala/reflect/generic/Trees$Tree; elsep$u0020;
  
  public Lscala/reflect/generic/Trees$Tree; elsep() {
    return this.(Lscala/reflect/generic/Trees$Tree;)elsep$u0020;
  }
  
  public Lscala/reflect/generic/Trees$If; copy(Lscala/reflect/generic/Trees$Tree; cond, Lscala/reflect/generic/Trees$Tree; thenp, Lscala/reflect/generic/Trees$Tree; elsep) {
    return (new (Lscala/reflect/generic/Trees$If;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/Trees$If;::scala$reflect$generic$Trees$If$$$outer()Lscala/reflect/generic/Universe;)(), cond, thenp, elsep));
  }
  
  public Ljava/lang/String; productPrefix() {
    return "If";
  }
  
  public I; productArity() {
    return 3;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp69 = x$1;
    I; $60$ = temp69;
    Ljava/lang/Object; $61$;
    switch ($60$) {
      0: {
        $61$ = this.(Lscala/reflect/generic/Trees$If;::cond()Lscala/reflect/generic/Trees$Tree;)();
        break;
      }
      
      1: {
        $61$ = this.(Lscala/reflect/generic/Trees$If;::thenp()Lscala/reflect/generic/Trees$Tree;)();
        break;
      }
      
      2: {
        $61$ = this.(Lscala/reflect/generic/Trees$If;::elsep()Lscala/reflect/generic/Trees$Tree;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $61$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/generic/Trees$If;);
  }
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$If$$$outer() {
    return this.(Lscala/reflect/generic/Universe;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer, Lscala/reflect/generic/Trees$Tree; cond, Lscala/reflect/generic/Trees$Tree; thenp, Lscala/reflect/generic/Trees$Tree; elsep) {
    this.(Lscala/reflect/generic/Trees$Tree;)cond$u0020 = cond;
    this.(Lscala/reflect/generic/Trees$Tree;)thenp$u0020 = thenp;
    this.(Lscala/reflect/generic/Trees$Tree;)elsep$u0020 = elsep;
    (Lscala/reflect/generic/Trees$Tree;::super(Lscala/reflect/generic/Universe;)V;)($outer);
  }
}
