public abstract class Lscala/reflect/generic/UnPickler$Scan; extends Lscala/reflect/generic/PickleBuffer; implements Lscala/ScalaObject; {
  
  private B;[ bytes;
  
  private Lscala/reflect/generic/Symbols$AbsSymbol; classRoot;
  
  private Lscala/reflect/generic/Symbols$AbsSymbol; moduleRoot;
  
  private Ljava/lang/String; filename;
  
  protected Z; debug() {
    return false;
  }
  
  private I;[ index$u0020;
  
  private I;[ index() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;)index$u0020;
  }
  
  private Ljava/lang/Object;[ scala$reflect$generic$UnPickler$Scan$$entries$u0020;
  
  public final Ljava/lang/Object;[ scala$reflect$generic$UnPickler$Scan$$entries() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;)scala$reflect$generic$UnPickler$Scan$$entries$u0020;
  }
  
  private Lscala/collection/mutable/HashMap; symScopes$u0020;
  
  private Lscala/collection/mutable/HashMap; symScopes() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;)symScopes$u0020;
  }
  
  public V; run() {
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)(0).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range$ByOne;)(this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)().<length>).(Lscala/collection/immutable/Range$ByOne;::foreach(Lscala/Function1;)V;)((new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$run$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
  }
  
  private V; checkVersion() {
    I; major = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    I; minor = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    if (((major != Lscala/reflect/generic/PickleFormat$;.MODULE$.(Lscala/reflect/generic/PickleFormat$;::MajorVersion()I;)()) || (minor > Lscala/reflect/generic/PickleFormat$;.MODULE$.(Lscala/reflect/generic/PickleFormat$;::MinorVersion()I;)())))
      {
        throw (new (Ljava/io/IOException;::this(Ljava/lang/String;)V;)(((((((((((("Scala signature " + this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::decodedName()Ljava/lang/String;)()) + " has wrong version\012 expected: ") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(Lscala/reflect/generic/PickleFormat$;.MODULE$.(Lscala/reflect/generic/PickleFormat$;::MajorVersion()I;)())) + ".") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(Lscala/reflect/generic/PickleFormat$;.MODULE$.(Lscala/reflect/generic/PickleFormat$;::MinorVersion()I;)())) + "\012 found: ") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(major)) + ".") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(minor)) + " in ") + this.(Lscala/reflect/generic/UnPickler$Scan;)filename)));
      }
    else
      {
        
      }
  }
  
  protected Lscala/reflect/generic/Scopes$AbsScope; symScope(Lscala/reflect/generic/Symbols$AbsSymbol; sym) {
    Lscala/Option; temp1 = this.(Lscala/reflect/generic/UnPickler$Scan;::symScopes()Lscala/collection/mutable/HashMap;)().(Lscala/collection/mutable/HashMap;::get(Ljava/lang/Object;)Lscala/Option;)(sym);
    Lscala/reflect/generic/Scopes$AbsScope; $4$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/None$;.MODULE$, temp1))
      {
        Lscala/reflect/generic/Scopes$AbsScope; s = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Scopes;::newScope()Lscala/reflect/generic/Scopes$AbsScope;)();
        this.(Lscala/reflect/generic/UnPickler$Scan;::symScopes()Lscala/collection/mutable/HashMap;)().(Lscala/collection/mutable/HashMap;::update(Ljava/lang/Object;Ljava/lang/Object;)V;)(sym, s);
        $4$ = s;
      }
    else
      {
        Lscala/reflect/generic/Scopes$AbsScope; $5$;
        if (temp1.<instanceof>(Lscala/Some;))
          {
            $5$ = temp1.<cast>(Lscala/Some;).(Lscala/Some;::x()Ljava/lang/Object;)().<cast>(Lscala/reflect/generic/Scopes$AbsScope;);
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp1));
          }
        $4$ = $5$;
      }
    return $4$;
  }
  
  public Z; isSymbolEntry(I; i) {
    I; tag = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]].<cast>(I;);
    return (((3 <= tag) && (tag <= 8)) && ((tag != 6) || !(this.(Lscala/reflect/generic/UnPickler$Scan;::isRefinementSymbolEntry(I;)Z;)(i))));
  }
  
  protected Z; isSymbolRef(I; i) {
    B; tag = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]];
    return ((3 <= tag) && (tag <= 10));
  }
  
  protected Z; isNameEntry(I; i) {
    I; tag = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]].<cast>(I;);
    return ((tag == 1) || (tag == 2));
  }
  
  public Z; isSymbolAnnotationEntry(I; i) {
    I; tag = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]].<cast>(I;);
    return (tag == 40);
  }
  
  public Z; isChildrenEntry(I; i) {
    I; tag = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]].<cast>(I;);
    return (tag == 41);
  }
  
  protected Z; isRefinementSymbolEntry(I; i) {
    I; savedIndex = this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)();
    this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]);
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)().<cast>(I;);
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)((tag == 6));
    this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    Z; result = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Names;::mkTypeName(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StdNames;::nme()Lscala/reflect/generic/StdNames$StandardNames;)().(Lscala/reflect/generic/StdNames$StandardNames;::REFINE_CLASS_NAME()Ljava/lang/Object;)()));
    this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(savedIndex);
    return result;
  }
  
  public Ljava/lang/Object; at(I; i$1, Lscala/Function0; op) {
    Ljava/lang/Object; r = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$entries()Ljava/lang/Object;[)()[i$1];
    if ((r == null))
      {
        I; savedIndex = this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)();
        this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i$1]);
        r = op.(Lscala/Function0;::apply()Ljava/lang/Object;)();
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;Lscala/Function0;)V;)((this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$entries()Ljava/lang/Object;[)()[i$1] == null), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$at$1;::this(Lscala/reflect/generic/UnPickler$Scan;I;)V;)(this, i$1)));
        this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$entries()Ljava/lang/Object;[)()[i$1] = r;
        this.(Lscala/reflect/generic/PickleBuffer;::readIndex_$eq(I;)V;)(savedIndex);
      }
    else
      {
        
      }
    return r;
  }
  
  public Ljava/lang/Object; readName() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    I; len = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    I; temp5 = tag;
    I; $6$ = temp5;
    Ljava/lang/Object; $7$;
    switch ($6$) {
      1: {
        $7$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Names;::newTermName(B;[I;I;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/UnPickler$Scan;)bytes, this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)(), len);
        break;
      }
      
      2: {
        $7$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Names;::newTypeName(B;[I;I;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/UnPickler$Scan;)bytes, this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)(), len);
        break;
      }
      
      default: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)(("bad name tag: " + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)));
        break;
      }
      
    }
    return $7$;
  }
  
  public Lscala/reflect/generic/Symbols$AbsSymbol; readSymbol() {
    I; tag$1 = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    Lscala/runtime/ObjectRef; sym$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)()));
    {
      I; temp7 = tag$1;
      I; $8$ = temp7;
      Ljava/lang/Object; $9$;
      switch ($8$) {
        3: {
          {
            sym$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          }
          $9$ = Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
          break;
        }
        
        9: {
          $9$ = this.(Lscala/reflect/generic/UnPickler$Scan;::body$percent0$percent1()Ljava/lang/Object;)();
          break;
        }
        
        10: {
          $9$ = this.(Lscala/reflect/generic/UnPickler$Scan;::body$percent0$percent1()Ljava/lang/Object;)();
          break;
        }
        
        default: {
          Lscala/reflect/generic/Symbols$AbsSymbol; defaultGetter = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          I; nameref = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
          if (((tag$1 == 8) && this.(Lscala/reflect/generic/UnPickler$Scan;::isSymbolRef(I;)Z;)(nameref)))
            {
              defaultGetter = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(nameref, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readSymbol$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;);
              nameref = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
            }
          else
            {
              
            }
          Ljava/lang/Object; name = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(nameref, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
          Lscala/reflect/generic/Symbols$AbsSymbol; owner = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          J; flags = Lscala/reflect/generic/Flags$;.MODULE$.(Lscala/reflect/generic/Flags;::pickledToRawFlags(J;)J;)(this.(Lscala/reflect/generic/PickleBuffer;::readLongNat()J;)());
          Lscala/reflect/generic/Symbols$AbsSymbol; privateWithin = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          I; inforef = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
          if (this.(Lscala/reflect/generic/UnPickler$Scan;::isSymbolRef(I;)Z;)(inforef))
            {
              privateWithin = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(inforef, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readSymbol$2;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;);
              inforef = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
            }
          else
            {
              
            }
          {
            I; temp6 = tag$1;
            I; $10$ = temp6;
            switch ($10$) {
              4: {
                sym$1.(Lscala/runtime/ObjectRef;)elem = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newAbstractType(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newAbstractType$default$2()Ljava/lang/Object;)());
                break;
              }
              
              5: {
                sym$1.(Lscala/runtime/ObjectRef;)elem = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newAliasType(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newAliasType$default$2()Ljava/lang/Object;)());
                break;
              }
              
              6: {
                Lscala/reflect/generic/Symbols$AbsSymbol; $11$;
                if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(name, this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::name()Ljava/lang/Object;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(owner, this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::owner()Lscala/reflect/generic/Symbols$AbsSymbol;)())))
                  {
                    Lscala/reflect/generic/Symbols$AbsSymbol; $12$;
                    if (((flags & 256) != 0L))
                      {
                        $12$ = this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::moduleClass()Lscala/reflect/generic/Symbols$AbsSymbol;)();
                      }
                    else
                      {
                        $12$ = this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot;
                      }
                    $11$ = $12$;
                  }
                else
                  {
                    Lscala/reflect/generic/Symbols$AbsSymbol; $13$;
                    if (((flags & 256) != 0L))
                      {
                        $13$ = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newModuleClass(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newModuleClass$default$2()Ljava/lang/Object;)());
                      }
                    else
                      {
                        $13$ = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newClass(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newClass$default$2()Ljava/lang/Object;)());
                      }
                    $11$ = $13$;
                  }
                sym$1.(Lscala/runtime/ObjectRef;)elem = $11$;
                if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end))
                  {
                    sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::typeOfThis_$eq(Lscala/reflect/generic/Types$AbsType;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::newLazyTypeRef(I;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)()));
                  }
                else
                  {
                    
                  }
                break;
              }
              
              7: {
                Lscala/reflect/generic/Symbols$AbsSymbol; clazz = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(inforef, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$2;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Types$AbsType;).(Lscala/reflect/generic/Types$AbsType;::typeSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
                Lscala/reflect/generic/Symbols$AbsSymbol; $14$;
                if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(name, this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::name()Ljava/lang/Object;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(owner, this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::owner()Lscala/reflect/generic/Symbols$AbsSymbol;)())))
                  {
                    $14$ = this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot;
                  }
                else
                  {
                    Lscala/reflect/generic/Symbols$AbsSymbol; m = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newModule(Ljava/lang/Object;Lscala/reflect/generic/Symbols$AbsSymbol;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, clazz, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newModule$default$3()Ljava/lang/Object;)());
                    clazz.(Lscala/reflect/generic/Symbols$AbsSymbol;::sourceModule_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(m);
                    $14$ = m;
                  }
                sym$1.(Lscala/runtime/ObjectRef;)elem = $14$;
                break;
              }
              
              8: {
                Lscala/reflect/generic/Symbols$AbsSymbol; $15$;
                if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(name, this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::name()Ljava/lang/Object;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(owner, this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::owner()Lscala/reflect/generic/Symbols$AbsSymbol;)())))
                  {
                    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)(false);
                    $15$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
                  }
                else
                  {
                    Lscala/reflect/generic/Symbols$AbsSymbol; $16$;
                    if (((flags & 64) != 0))
                      {
                        $16$ = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newMethod(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newMethod$default$2()Ljava/lang/Object;)());
                      }
                    else
                      {
                        $16$ = owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newValue(Ljava/lang/Object;Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::newValue$default$2()Ljava/lang/Object;)());
                      }
                    $15$ = $16$;
                  }
                sym$1.(Lscala/runtime/ObjectRef;)elem = $15$;
                break;
              }
              
              default: {
                this.(Lscala/reflect/generic/UnPickler$Scan;::noSuchSymbolTag(I;I;Ljava/lang/Object;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/runtime/Nothing$;)(tag$1, end, name, owner);
                break;
              }
              
            }
          }
          sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::flags_$eq(J;)V;)((flags & Lscala/reflect/generic/Flags$;.MODULE$.(Lscala/reflect/generic/Flags;::PickledFlags()J;)()));
          sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::privateWithin_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(privateWithin);
          if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end))
            {
              Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;Lscala/Function0;)V;)(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::hasFlag(J;)Z;)(805306368L), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readSymbol$3;::this(Lscala/reflect/generic/UnPickler$Scan;Lscala/runtime/ObjectRef;)V;)(this, sym$1)));
            }
          else
            {
              
            }
          if (sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::hasFlag(J;)Z;)(268435456L))
            {
              Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end));
            }
          else
            {
              
            }
          Lscala/reflect/generic/Types$AbsType; $17$;
          if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end))
            {
              $17$ = this.(Lscala/reflect/generic/UnPickler$Scan;::newLazyTypeRefAndAlias(I;I;)Lscala/reflect/generic/Types$AbsType;)(inforef, this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)());
            }
          else
            {
              $17$ = this.(Lscala/reflect/generic/UnPickler$Scan;::newLazyTypeRef(I;)Lscala/reflect/generic/Types$AbsType;)(inforef);
            }
          sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::info_$eq(Lscala/reflect/generic/Types$AbsType;)V;)($17$);
          Ljava/lang/Object; $18$;
          if (((((((sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::owner()Lscala/reflect/generic/Symbols$AbsSymbol;)().(Lscala/reflect/generic/Symbols$AbsSymbol;::isClass()Z;)() && (sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;) != this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot)) && (sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;) != this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot)) && !(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::isModuleClass()Z;)())) && !(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::isRefinementClass()Z;)())) && !(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::isTypeParameter()Z;)())) && !(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::isExistentiallyBound()Z;)())))
            {
              $18$ = this.(Lscala/reflect/generic/UnPickler$Scan;::symScope(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Scopes$AbsScope;)(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;).(Lscala/reflect/generic/Symbols$AbsSymbol;::owner()Lscala/reflect/generic/Symbols$AbsSymbol;)()).(Lscala/reflect/generic/Scopes$AbsScope;::enter(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Symbols$AbsSymbol;)(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;));
            }
          else
            {
              $18$ = Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
            }
          $9$ = $18$;
          break;
        }
        
      }
    }
    return sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;);
  }
  
  public Lscala/runtime/Nothing$; noSuchSymbolTag(I; tag, I; end, Ljava/lang/Object; name, Lscala/reflect/generic/Symbols$AbsSymbol; owner) {
    this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)(("bad symbol tag: " + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)));
  }
  
  public Lscala/reflect/generic/Types$AbsType; readType() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    I; temp8 = tag;
    I; $19$ = temp8;
    Lscala/reflect/generic/Types$AbsType; $20$;
    switch ($19$) {
      11: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::NoType()Lscala/reflect/generic/Types$AbsType;)();
        break;
      }
      
      12: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::NoPrefix()Lscala/reflect/generic/Types$AbsType;)();
        break;
      }
      
      13: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::ThisType()Lscala/reflect/generic/Types$ThisTypeExtractor;)().(Lscala/reflect/generic/Types$ThisTypeExtractor;::apply(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)());
        break;
      }
      
      14: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::SingleType()Lscala/reflect/generic/Types$SingleTypeExtractor;)().(Lscala/reflect/generic/Types$SingleTypeExtractor;::apply(Lscala/reflect/generic/Types$AbsType;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)());
        break;
      }
      
      15: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::ConstantType()Lscala/reflect/generic/Types$ConstantTypeExtractor;)().(Lscala/reflect/generic/Types$ConstantTypeExtractor;::apply(Lscala/reflect/generic/Constants$Constant;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readConstantRef()Lscala/reflect/generic/Constants$Constant;)());
        break;
      }
      
      16: {
        Lscala/reflect/generic/Types$AbsType; pre = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
        Lscala/reflect/generic/Symbols$AbsSymbol; sym = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$3;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::TypeRef()Lscala/reflect/generic/Types$TypeRefExtractor;)().(Lscala/reflect/generic/Types$TypeRefExtractor;::apply(Lscala/reflect/generic/Types$AbsType;Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/collection/immutable/List;)Lscala/reflect/generic/Types$AbsType;)(pre, sym, args);
        break;
      }
      
      17: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::TypeBounds()Lscala/reflect/generic/Types$TypeBoundsExtractor;)().(Lscala/reflect/generic/Types$TypeBoundsExtractor;::apply(Lscala/reflect/generic/Types$AbsType;Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)());
        break;
      }
      
      18: {
        Lscala/reflect/generic/Symbols$AbsSymbol; clazz = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::RefinedType()Lscala/reflect/generic/Types$RefinedTypeExtractor;)().(Lscala/reflect/generic/Types$RefinedTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Scopes$AbsScope;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readType$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))), this.(Lscala/reflect/generic/UnPickler$Scan;::symScope(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Scopes$AbsScope;)(clazz), clazz);
        break;
      }
      
      19: {
        Lscala/reflect/generic/Symbols$AbsSymbol; clazz = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::ClassInfoType()Lscala/reflect/generic/Types$ClassInfoTypeExtractor;)().(Lscala/reflect/generic/Types$ClassInfoTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Scopes$AbsScope;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readType$2;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))), this.(Lscala/reflect/generic/UnPickler$Scan;::symScope(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Scopes$AbsScope;)(clazz), clazz);
        break;
      }
      
      20: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::body$percent10$percent1()Lscala/reflect/generic/Types$AbsType;)();
        break;
      }
      
      21: {
        Lscala/reflect/generic/Types$AbsType; restpe = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
        Lscala/collection/immutable/List; typeParams = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$5;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::PolyType()Lscala/reflect/generic/Types$PolyTypeExtractor;)().(Lscala/reflect/generic/Types$PolyTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;)(typeParams, restpe);
        break;
      }
      
      22: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::body$percent10$percent1()Lscala/reflect/generic/Types$AbsType;)();
        break;
      }
      
      42: {
        I; typeRef = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
        Lscala/reflect/generic/Symbols$AbsSymbol; $21$;
        if (this.(Lscala/reflect/generic/UnPickler$Scan;::isSymbolRef(I;)Z;)(typeRef))
          {
            Lscala/reflect/generic/Symbols$AbsSymbol; s = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(typeRef, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$6;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;);
            typeRef = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
            $21$ = s;
          }
        else
          {
            $21$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          }
        Lscala/reflect/generic/Symbols$AbsSymbol; selfsym = $21$;
        Lscala/reflect/generic/Types$AbsType; tp = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(typeRef, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$7;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Types$AbsType;);
        Lscala/collection/immutable/List; annots = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$8;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        Lscala/reflect/generic/Types$AbsType; $22$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(selfsym, this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)()))
          {
            $22$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::AnnotatedType()Lscala/reflect/generic/Types$AnnotatedTypeExtractor;)().(Lscala/reflect/generic/Types$AnnotatedTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Types$AbsType;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Types$AbsType;)(annots, tp, selfsym);
          }
        else
          {
            $22$ = tp;
          }
        $20$ = $22$;
        break;
      }
      
      46: {
        Lscala/reflect/generic/Types$AbsType; thistpe = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
        Lscala/reflect/generic/Types$AbsType; supertpe = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::SuperType()Lscala/reflect/generic/Types$SuperTypeExtractor;)().(Lscala/reflect/generic/Types$SuperTypeExtractor;::apply(Lscala/reflect/generic/Types$AbsType;Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;)(thistpe, supertpe);
        break;
      }
      
      48: {
        Lscala/reflect/generic/Types$AbsType; restpe = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::ExistentialType()Lscala/reflect/generic/Types$ExistentialTypeExtractor;)().(Lscala/reflect/generic/Types$ExistentialTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;)(this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readType$3;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))), restpe);
        break;
      }
      
      default: {
        $20$ = this.(Lscala/reflect/generic/UnPickler$Scan;::noSuchTypeTag(I;I;)Lscala/reflect/generic/Types$AbsType;)(tag, end);
        break;
      }
      
    }
    return $20$;
  }
  
  public Lscala/reflect/generic/Types$AbsType; noSuchTypeTag(I; tag, I; end) {
    this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)(("bad type tag: " + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)));
  }
  
  public Lscala/reflect/generic/Constants$Constant; readConstant() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)().<cast>(I;);
    I; len = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    I; temp9 = tag;
    I; $23$ = temp9;
    Lscala/reflect/generic/Constants$Constant; $24$;
    switch ($23$) {
      24: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT));
        break;
      }
      
      25: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToBoolean(Z;)Ljava/lang/Boolean;)((this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len) != 0L))));
        break;
      }
      
      26: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToByte(B;)Ljava/lang/Byte;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len).<cast>(B;))));
        break;
      }
      
      27: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToShort(S;)Ljava/lang/Short;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len).<cast>(S;))));
        break;
      }
      
      28: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len).<cast>(C;))));
        break;
      }
      
      29: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len).<cast>(I;))));
        break;
      }
      
      30: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToLong(J;)Ljava/lang/Long;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len))));
        break;
      }
      
      31: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToFloat(F;)Ljava/lang/Float;)(Ljava/lang/Float;.(Ljava/lang/Float;::intBitsToFloat(I;)F;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len).<cast>(I;)))));
        break;
      }
      
      32: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToDouble(D;)Ljava/lang/Double;)(Ljava/lang/Double;.(Ljava/lang/Double;::longBitsToDouble(J;)D;)(this.(Lscala/reflect/generic/PickleBuffer;::readLong(I;)J;)(len)))));
        break;
      }
      
      33: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)().(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
      34: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), null));
        break;
      }
      
      35: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)()));
        break;
      }
      
      36: {
        $24$ = (new (Lscala/reflect/generic/Constants$Constant;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)()));
        break;
      }
      
      default: {
        $24$ = this.(Lscala/reflect/generic/UnPickler$Scan;::noSuchConstantTag(I;I;)Lscala/reflect/generic/Constants$Constant;)(tag, len);
        break;
      }
      
    }
    return $24$;
  }
  
  public Lscala/reflect/generic/Constants$Constant; noSuchConstantTag(I; tag, I; len) {
    this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)(("bad constant tag: " + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)));
  }
  
  public V; readChildren() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)((tag == 41));
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    Lscala/reflect/generic/Symbols$AbsSymbol; target = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
    while$1: while(true) {
      if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end))
        {
          target.(Lscala/reflect/generic/Symbols$AbsSymbol;::addChild(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)());
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  protected Lscala/reflect/generic/Trees$Tree; readAnnotArg(I; i) {
    Lscala/reflect/generic/Trees$Tree; $25$;
    if ((this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]] == 49))
      {
        $25$ = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(i, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readAnnotArg$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Trees$Tree;);
      }
    else
      {
        Lscala/reflect/generic/Constants$Constant; const = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(i, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$9;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Constants$Constant;);
        $25$ = (new (Lscala/reflect/generic/Trees$Literal;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), const)).(Lscala/reflect/generic/Trees$Tree;::setType(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;)(const.(Lscala/reflect/generic/Constants$Constant;::tpe()Lscala/reflect/generic/Types$AbsType;)());
      }
    return $25$;
  }
  
  public Ljava/lang/Object; readClassfileAnnotArg(I; i) {
    B; temp10 = this.(Lscala/reflect/generic/UnPickler$Scan;)bytes[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)()[i]];
    Ljava/lang/Object; $26$;
    if ((temp10 == 43))
      {
        $26$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/AnnotationInfos;::NestedAnnotArg()Lscala/reflect/generic/AnnotationInfos$NestedAnnotArgExtractor;)().(Lscala/reflect/generic/AnnotationInfos$NestedAnnotArgExtractor;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(i, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readClassfileAnnotArg$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))));
      }
    else
      {
        Ljava/lang/Object; $27$;
        failCont$percent1: while(true) {
          Ljava/lang/Object; $28$;
          if ((temp10 == 44))
            {
              $28$ = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(i, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readClassfileAnnotArg$2;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
            }
          else
            {
              Ljava/lang/Object; $29$;
              failCont$percent2: while(true) {
                $29$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/AnnotationInfos;::LiteralAnnotArg()Lscala/reflect/generic/AnnotationInfos$LiteralAnnotArgExtractor;)().(Lscala/reflect/generic/AnnotationInfos$LiteralAnnotArgExtractor;::apply(Lscala/reflect/generic/Constants$Constant;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(i, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readClassfileAnnotArg$3;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Constants$Constant;));
                break;
              }
              $28$ = $29$;
            }
          $27$ = $28$;
          break;
        }
        $26$ = $27$;
      }
    return $26$;
  }
  
  protected Ljava/lang/Object; readAnnotationInfo(I; end) {
    Lscala/reflect/generic/Types$AbsType; atp = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
    Lscala/collection/mutable/ListBuffer; args = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/mutable/ListBuffer; assocs = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    while$2: while(true) {
      if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() != end))
        {
          {
            I; argref = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
            Lscala/collection/mutable/ListBuffer; $30$;
            if (this.(Lscala/reflect/generic/UnPickler$Scan;::isNameEntry(I;)Z;)(argref))
              {
                Ljava/lang/Object; name = this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(argref, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$10;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
                Ljava/lang/Object; arg = this.(Lscala/reflect/generic/UnPickler$Scan;::readClassfileAnnotArg(I;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)());
                $30$ = assocs.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(name, arg)));
              }
            else
              {
                $30$ = args.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readAnnotArg(I;)Lscala/reflect/generic/Trees$Tree;)(argref));
              }
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    return this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/AnnotationInfos;::AnnotationInfo()Lscala/reflect/generic/AnnotationInfos$AnnotationInfoExtractor;)().(Lscala/reflect/generic/AnnotationInfos$AnnotationInfoExtractor;::apply(Lscala/reflect/generic/Types$AbsType;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Ljava/lang/Object;)(atp, args.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)(), assocs.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)());
  }
  
  public V; readSymbolAnnotation() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    if ((tag != 40))
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("symbol annotation expected (" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)) + ")"));
      }
    else
      {
        
      }
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    Lscala/reflect/generic/Symbols$AbsSymbol; target = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
    target.(Lscala/reflect/generic/Symbols$AbsSymbol;::addAnnotation(Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::readAnnotationInfo(I;)Ljava/lang/Object;)(end));
  }
  
  public Ljava/lang/Object; readAnnotation() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    if ((tag != 43))
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("annotation expected (" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)) + ")"));
      }
    else
      {
        
      }
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    return this.(Lscala/reflect/generic/UnPickler$Scan;::readAnnotationInfo(I;)Ljava/lang/Object;)(end);
  }
  
  public Lscala/reflect/generic/Trees$Tree; readTree() {
    I; outerTag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    if ((outerTag != 49))
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("tree expected (" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(outerTag)) + ")"));
      }
    else
      {
        
      }
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readByte()I;)();
    Lscala/reflect/generic/Types$AbsType; $31$;
    if ((tag == 1))
      {
        $31$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::NoType()Lscala/reflect/generic/Types$AbsType;)();
      }
    else
      {
        $31$ = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
      }
    Lscala/reflect/generic/Types$AbsType; tpe = $31$;
    Lscala/runtime/ObjectRef; symbol$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(null));
    Lscala/runtime/ObjectRef; mods$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(null));
    Lscala/runtime/ObjectRef; name$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(null));
    I; temp11 = tag;
    I; $32$ = temp11;
    Lscala/reflect/generic/Trees$Tree; $33$;
    switch ($32$) {
      1: {
        $33$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::EmptyTree()Lscala/reflect/generic/Trees$EmptyTree$;)();
        break;
      }
      
      2: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/reflect/generic/Trees$RefTree; pid = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)().<cast>(Lscala/reflect/generic/Trees$RefTree;);
        Lscala/collection/immutable/List; stats = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$11;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$PackageDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$RefTree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), pid, stats));
        break;
      }
      
      3: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymModsName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, mods$1, name$1);
        Lscala/reflect/generic/Trees$Template; impl = this.(Lscala/reflect/generic/UnPickler$Scan;::readTemplateRef()Lscala/reflect/generic/Trees$Template;)();
        Lscala/collection/immutable/List; tparams = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$12;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$ClassDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), mods$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Trees$Modifiers;), name$1.(Lscala/runtime/ObjectRef;)elem, tparams, impl));
        break;
      }
      
      4: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymModsName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, mods$1, name$1);
        $33$ = (new (Lscala/reflect/generic/Trees$ModuleDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/reflect/generic/Trees$Template;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), mods$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Trees$Modifiers;), name$1.(Lscala/runtime/ObjectRef;)elem, this.(Lscala/reflect/generic/UnPickler$Scan;::readTemplateRef()Lscala/reflect/generic/Trees$Template;)()));
        break;
      }
      
      5: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymModsName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, mods$1, name$1);
        Lscala/reflect/generic/Trees$Tree; tpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; rhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$ValDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), mods$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Trees$Modifiers;), name$1.(Lscala/runtime/ObjectRef;)elem, tpt, rhs));
        break;
      }
      
      6: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymModsName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, mods$1, name$1);
        Lscala/collection/immutable/List; tparams = this.(Lscala/reflect/generic/PickleBuffer;::times(I;Lscala/Function0;)Lscala/collection/immutable/List;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$13;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        Lscala/collection/immutable/List; vparamss = this.(Lscala/reflect/generic/PickleBuffer;::times(I;Lscala/Function0;)Lscala/collection/immutable/List;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$14;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        Lscala/reflect/generic/Trees$Tree; tpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; rhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$DefDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), mods$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Trees$Modifiers;), name$1.(Lscala/runtime/ObjectRef;)elem, tparams, vparamss, tpt, rhs));
        break;
      }
      
      7: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymModsName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, mods$1, name$1);
        Lscala/reflect/generic/Trees$Tree; rhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; tparams = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$15;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$TypeDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Modifiers;Ljava/lang/Object;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), mods$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Trees$Modifiers;), name$1.(Lscala/runtime/ObjectRef;)elem, tparams, rhs));
        break;
      }
      
      8: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, name$1);
        Lscala/reflect/generic/Trees$Tree; rhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; params = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$16;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$LabelDef;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), name$1.(Lscala/runtime/ObjectRef;)elem, params, rhs));
        break;
      }
      
      9: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/reflect/generic/Trees$Tree; expr = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; selectors = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$17;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Import;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), expr, selectors));
        break;
      }
      
      12: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/collection/immutable/List; parents = this.(Lscala/reflect/generic/PickleBuffer;::times(I;Lscala/Function0;)Lscala/collection/immutable/List;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$18;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        Lscala/reflect/generic/Trees$ValDef; self = this.(Lscala/reflect/generic/UnPickler$Scan;::readValDefRef()Lscala/reflect/generic/Trees$ValDef;)();
        Lscala/collection/immutable/List; body = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$19;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Template;::this(Lscala/reflect/generic/Universe;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$ValDef;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), parents, self, body));
        break;
      }
      
      13: {
        Lscala/reflect/generic/Trees$Tree; expr = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; stats = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$20;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Block;::this(Lscala/reflect/generic/Universe;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), stats, expr));
        break;
      }
      
      14: {
        Lscala/reflect/generic/Trees$Tree; pat = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; guard = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; body = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$CaseDef;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), pat, guard, body));
        break;
      }
      
      16: {
        $33$ = (new (Lscala/reflect/generic/Trees$Alternative;::this(Lscala/reflect/generic/Universe;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$21;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)))));
        break;
      }
      
      17: {
        $33$ = (new (Lscala/reflect/generic/Trees$Star;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      18: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, name$1);
        $33$ = (new (Lscala/reflect/generic/Trees$Bind;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), name$1.(Lscala/runtime/ObjectRef;)elem, this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      19: {
        Lscala/reflect/generic/Trees$Tree; fun = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$22;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$UnApply;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), fun, args));
        break;
      }
      
      20: {
        Lscala/reflect/generic/Trees$Tree; elemtpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; trees = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$23;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$ArrayValue;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), elemtpt, trees));
        break;
      }
      
      21: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/reflect/generic/Trees$Tree; body = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; vparams = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$24;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Function;::this(Lscala/reflect/generic/Universe;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), vparams, body));
        break;
      }
      
      22: {
        Lscala/reflect/generic/Trees$Tree; lhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; rhs = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$Assign;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), lhs, rhs));
        break;
      }
      
      23: {
        Lscala/reflect/generic/Trees$Tree; cond = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; thenp = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; elsep = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$If;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), cond, thenp, elsep));
        break;
      }
      
      24: {
        Lscala/reflect/generic/Trees$Tree; selector = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; cases = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$25;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Match;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), selector, cases));
        break;
      }
      
      25: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        $33$ = (new (Lscala/reflect/generic/Trees$Return;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      26: {
        Lscala/reflect/generic/Trees$Tree; block = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; finalizer = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; catches = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$26;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$Try;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), block, catches, finalizer));
        break;
      }
      
      27: {
        $33$ = (new (Lscala/reflect/generic/Trees$Throw;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      28: {
        $33$ = (new (Lscala/reflect/generic/Trees$New;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      29: {
        Lscala/reflect/generic/Trees$Tree; expr = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; tpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$Typed;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), expr, tpt));
        break;
      }
      
      30: {
        Lscala/reflect/generic/Trees$Tree; fun = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$27;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$TypeApply;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), fun, args));
        break;
      }
      
      31: {
        Lscala/reflect/generic/Trees$Tree; fun = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$28;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        if (fun.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)().(Lscala/reflect/generic/Symbols$AbsSymbol;::isOverloaded()Z;)())
          {
            fun.(Lscala/reflect/generic/Trees$Tree;::setType(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;)(fun.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)().(Lscala/reflect/generic/Symbols$AbsSymbol;::info()Lscala/reflect/generic/Types$AbsType;)());
            this.(Lscala/reflect/generic/UnPickler$Scan;::inferMethodAlternative(Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;Lscala/reflect/generic/Types$AbsType;)V;)(fun, args.(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$29;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)), Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/List;), tpe);
          }
        else
          {
            
          }
        $33$ = (new (Lscala/reflect/generic/Trees$Apply;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), fun, args));
        break;
      }
      
      32: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/reflect/generic/Trees$Tree; qual = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$30;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$ApplyDynamic;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), qual, args));
        break;
      }
      
      33: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Ljava/lang/Object; qual = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
        Ljava/lang/Object; mix = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
        $33$ = (new (Lscala/reflect/generic/Trees$Super;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), qual, mix));
        break;
      }
      
      34: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        $33$ = (new (Lscala/reflect/generic/Trees$This;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)()));
        break;
      }
      
      35: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSym$1(Lscala/runtime/ObjectRef;)V;)(symbol$1);
        Lscala/reflect/generic/Trees$Tree; qualifier = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Ljava/lang/Object; selector = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
        $33$ = (new (Lscala/reflect/generic/Trees$Select;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), qualifier, selector));
        break;
      }
      
      36: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::setSymName$1(Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;)V;)(symbol$1, name$1);
        $33$ = (new (Lscala/reflect/generic/Trees$Ident;::this(Lscala/reflect/generic/Universe;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), name$1.(Lscala/runtime/ObjectRef;)elem));
        break;
      }
      
      37: {
        $33$ = (new (Lscala/reflect/generic/Trees$Literal;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readConstantRef()Lscala/reflect/generic/Constants$Constant;)()));
        break;
      }
      
      38: {
        $33$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::TypeTree()Lscala/reflect/generic/Trees$TypeTreeExtractor;)().(Lscala/reflect/generic/Trees$TypeTreeExtractor;::apply()Lscala/reflect/generic/Trees$AbsTypeTree;)();
        break;
      }
      
      39: {
        Lscala/reflect/generic/Trees$Tree; annot = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; arg = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$Annotated;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), annot, arg));
        break;
      }
      
      40: {
        $33$ = (new (Lscala/reflect/generic/Trees$SingletonTypeTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)()));
        break;
      }
      
      41: {
        Lscala/reflect/generic/Trees$Tree; qualifier = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Ljava/lang/Object; selector = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
        $33$ = (new (Lscala/reflect/generic/Trees$SelectFromTypeTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), qualifier, selector));
        break;
      }
      
      42: {
        $33$ = (new (Lscala/reflect/generic/Trees$CompoundTypeTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Template;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), this.(Lscala/reflect/generic/UnPickler$Scan;::readTemplateRef()Lscala/reflect/generic/Trees$Template;)()));
        break;
      }
      
      43: {
        Lscala/reflect/generic/Trees$Tree; tpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; args = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$31;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$AppliedTypeTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), tpt, args));
        break;
      }
      
      44: {
        Lscala/reflect/generic/Trees$Tree; lo = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/reflect/generic/Trees$Tree; hi = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        $33$ = (new (Lscala/reflect/generic/Trees$TypeBoundsTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), lo, hi));
        break;
      }
      
      45: {
        Lscala/reflect/generic/Trees$Tree; tpt = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
        Lscala/collection/immutable/List; whereClauses = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$32;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
        $33$ = (new (Lscala/reflect/generic/Trees$ExistentialTypeTree;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/collection/immutable/List;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), tpt, whereClauses));
        break;
      }
      
      default: {
        this.(Lscala/reflect/generic/UnPickler$Scan;::noSuchTreeTag(I;I;)Lscala/runtime/Nothing$;)(tag, end);
        break;
      }
      
    }
    Lscala/reflect/generic/Trees$Tree; t = $33$;
    Lscala/reflect/generic/Trees$Tree; $34$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(symbol$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;), null))
      {
        $34$ = t.(Lscala/reflect/generic/Trees$Tree;::setType(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;)(tpe);
      }
    else
      {
        $34$ = t.(Lscala/reflect/generic/Trees$Tree;::setSymbol(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Trees$Tree;)(symbol$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;)).(Lscala/reflect/generic/Trees$Tree;::setType(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;)(tpe);
      }
    return $34$;
  }
  
  public Lscala/runtime/Nothing$; noSuchTreeTag(I; tag, I; end) {
    this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("unknown tree type (" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)) + ")"));
  }
  
  public Lscala/reflect/generic/Trees$Modifiers; readModifiers() {
    I; tag = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    if ((tag != 50))
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected a modifiers tag (" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(tag)) + ")"));
      }
    else
      {
        
      }
    I; end = (this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)() + this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)());
    I; pflagsHi = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    I; pflagsLo = this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)();
    J; pflags = ((pflagsHi.<cast>(J;) << 32) + pflagsLo);
    J; flags = Lscala/reflect/generic/Flags$;.MODULE$.(Lscala/reflect/generic/Flags;::pickledToRawFlags(J;)J;)(pflags);
    Ljava/lang/Object; privateWithin = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
    return (new (Lscala/reflect/generic/Trees$Modifiers;::this(Lscala/reflect/generic/Universe;J;Ljava/lang/Object;Lscala/collection/immutable/List;Lscala/collection/immutable/Map;)V;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)(), flags, privateWithin, Lscala/collection/immutable/Nil$;.MODULE$, Lscala/Predef$;.MODULE$.(Lscala/Predef$;::Map()Lscala/collection/immutable/Map$;)().(Lscala/collection/immutable/Map$;::empty()Lscala/collection/immutable/Map;)()));
  }
  
  public Ljava/lang/Object; readNameRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readNameRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
  }
  
  public Lscala/reflect/generic/Symbols$AbsSymbol; readSymbolRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readSymbolRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;);
  }
  
  public Lscala/reflect/generic/Types$AbsType; readTypeRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readTypeRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Types$AbsType;);
  }
  
  protected Lscala/reflect/generic/Constants$Constant; readConstantRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readConstantRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Constants$Constant;);
  }
  
  public Ljava/lang/Object; readAnnotationRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readAnnotationRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
  }
  
  protected Lscala/reflect/generic/Trees$Modifiers; readModifiersRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readModifiersRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Trees$Modifiers;);
  }
  
  public Lscala/reflect/generic/Trees$Tree; readTreeRef() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;::at(I;Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/reflect/generic/PickleBuffer;::readNat()I;)(), (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$readTreeRef$1;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this))).<cast>(Lscala/reflect/generic/Trees$Tree;);
  }
  
  protected Lscala/reflect/generic/Trees$Template; readTemplateRef() {
    Lscala/reflect/generic/Trees$Tree; temp12 = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
    Lscala/reflect/generic/Trees$Template; $35$;
    if (temp12.<instanceof>(Lscala/reflect/generic/Trees$Template;))
      {
        $35$ = temp12.<cast>(Lscala/reflect/generic/Trees$Template;);
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected a template (" + temp12) + ")"));
      }
    return $35$;
  }
  
  public Lscala/reflect/generic/Trees$CaseDef; readCaseDefRef() {
    Lscala/reflect/generic/Trees$Tree; temp17 = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
    Lscala/reflect/generic/Trees$CaseDef; $36$;
    if (temp17.<instanceof>(Lscala/reflect/generic/Trees$CaseDef;))
      {
        $36$ = temp17.<cast>(Lscala/reflect/generic/Trees$CaseDef;);
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected a case def (" + temp17) + ")"));
      }
    return $36$;
  }
  
  public Lscala/reflect/generic/Trees$ValDef; readValDefRef() {
    Lscala/reflect/generic/Trees$Tree; temp22 = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
    Lscala/reflect/generic/Trees$ValDef; $37$;
    if (temp22.<instanceof>(Lscala/reflect/generic/Trees$ValDef;))
      {
        $37$ = temp22.<cast>(Lscala/reflect/generic/Trees$ValDef;);
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected a ValDef (" + temp22) + ")"));
      }
    return $37$;
  }
  
  public Lscala/reflect/generic/Trees$Ident; readIdentRef() {
    Lscala/reflect/generic/Trees$Tree; temp28 = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
    Lscala/reflect/generic/Trees$Ident; $38$;
    if (temp28.<instanceof>(Lscala/reflect/generic/Trees$Ident;))
      {
        $38$ = temp28.<cast>(Lscala/reflect/generic/Trees$Ident;);
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected an Ident (" + temp28) + ")"));
      }
    return $38$;
  }
  
  public Lscala/reflect/generic/Trees$TypeDef; readTypeDefRef() {
    Lscala/reflect/generic/Trees$Tree; temp31 = this.(Lscala/reflect/generic/UnPickler$Scan;::readTreeRef()Lscala/reflect/generic/Trees$Tree;)();
    Lscala/reflect/generic/Trees$TypeDef; $39$;
    if (temp31.<instanceof>(Lscala/reflect/generic/Trees$TypeDef;))
      {
        $39$ = temp31.<cast>(Lscala/reflect/generic/Trees$TypeDef;);
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)((("expected an TypeDef (" + temp31) + ")"));
      }
    return $39$;
  }
  
  protected Lscala/runtime/Nothing$; errorBadSignature(Ljava/lang/String; msg) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)(((((("malformed Scala signature of " + this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::name()Ljava/lang/Object;)()) + " at ") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)())) + "; ") + msg)));
  }
  
  protected Lscala/runtime/Nothing$; errorMissingRequirement(Ljava/lang/String; msg) {
    Lscala/runtime/Nothing$; $40$;
    if (this.(Lscala/reflect/generic/UnPickler$Scan;::debug()Z;)())
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorBadSignature(Ljava/lang/String;)Lscala/runtime/Nothing$;)(msg);
      }
    else
      {
        throw (new (Ljava/io/IOException;::this(Ljava/lang/String;)V;)(((("class file needed by " + this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot.(Lscala/reflect/generic/Symbols$AbsSymbol;::name()Ljava/lang/Object;)()) + " is missing.\012") + msg)));
      }
  }
  
  protected Lscala/runtime/Nothing$; errorMissingRequirement(Ljava/lang/Object; name, Lscala/reflect/generic/Symbols$AbsSymbol; owner) {
    this.(Lscala/reflect/generic/UnPickler$Scan;::errorMissingRequirement(Ljava/lang/String;)Lscala/runtime/Nothing$;)((((("reference " + Lscala/reflect/NameTransformer$;.MODULE$.(Lscala/reflect/NameTransformer$;::decode(Ljava/lang/String;)Ljava/lang/String;)(name.(Ljava/lang/Object;::toString()Ljava/lang/String;)())) + " of ") + owner.(Lscala/reflect/generic/Symbols$AbsSymbol;::tpe()Lscala/reflect/generic/Types$AbsType;)()) + " refers to nonexisting symbol."));
  }
  
  public abstract V; inferMethodAlternative(Lscala/reflect/generic/Trees$Tree; fun, Lscala/collection/immutable/List; argtpes, Lscala/reflect/generic/Types$AbsType; restpe);
  
  public abstract Lscala/reflect/generic/Types$AbsType; newLazyTypeRef(I; i);
  
  public abstract Lscala/reflect/generic/Types$AbsType; newLazyTypeRefAndAlias(I; i, I; j);
  
  protected Lscala/reflect/generic/UnPickler; $outer$u0020;
  
  public Lscala/reflect/generic/UnPickler; scala$reflect$generic$UnPickler$Scan$$$outer() {
    return this.(Lscala/reflect/generic/UnPickler$Scan;)$outer$u0020;
  }
  
  private final Lscala/reflect/generic/Symbols$AbsSymbol; fromName$1(Ljava/lang/Object; name, I; tag$1, Lscala/reflect/generic/Symbols$AbsSymbol; owner$1) {
    Lscala/reflect/generic/Symbols$AbsSymbol; $41$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Names;::mkTermName(Ljava/lang/Object;)Ljava/lang/Object;)(name), this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StdNames;::nme()Lscala/reflect/generic/StdNames$StandardNames;)().(Lscala/reflect/generic/StdNames$StandardNames;::ROOT()Ljava/lang/Object;)()))
      {
        $41$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StandardDefinitions;::definitions()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;)().(Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;::RootClass()Lscala/reflect/generic/Symbols$AbsSymbol;)();
      }
    else
      {
        Lscala/reflect/generic/Symbols$AbsSymbol; $42$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(name, this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StdNames;::nme()Lscala/reflect/generic/StdNames$StandardNames;)().(Lscala/reflect/generic/StdNames$StandardNames;::ROOTPKG()Ljava/lang/Object;)()))
          {
            $42$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StandardDefinitions;::definitions()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;)().(Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;::RootPackage()Lscala/reflect/generic/Symbols$AbsSymbol;)();
          }
        else
          {
            Lscala/reflect/generic/Symbols$AbsSymbol; $43$;
            if ((tag$1 == 9))
              {
                $43$ = owner$1.(Lscala/reflect/generic/Symbols$AbsSymbol;::info()Lscala/reflect/generic/Types$AbsType;)().(Lscala/reflect/generic/Types$AbsType;::decl(Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name);
              }
            else
              {
                $43$ = owner$1.(Lscala/reflect/generic/Symbols$AbsSymbol;::info()Lscala/reflect/generic/Types$AbsType;)().(Lscala/reflect/generic/Types$AbsType;::decl(Ljava/lang/Object;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name).(Lscala/reflect/generic/Symbols$AbsSymbol;::moduleClass()Lscala/reflect/generic/Symbols$AbsSymbol;)();
              }
            $42$ = $43$;
          }
        $41$ = $42$;
      }
    return $41$;
  }
  
  private final V; setSymModsName$1(Lscala/runtime/ObjectRef; symbol$1, Lscala/runtime/ObjectRef; mods$1, Lscala/runtime/ObjectRef; name$1) {
    symbol$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
    mods$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readModifiersRef()Lscala/reflect/generic/Trees$Modifiers;)();
    name$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
  }
  
  private final V; setSymName$1(Lscala/runtime/ObjectRef; symbol$1, Lscala/runtime/ObjectRef; name$1) {
    symbol$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
    name$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
  }
  
  private final V; setSym$1(Lscala/runtime/ObjectRef; symbol$1) {
    symbol$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
  }
  
  public this(Lscala/reflect/generic/UnPickler; $outer, B;[ bytes, I; offset, Lscala/reflect/generic/Symbols$AbsSymbol; classRoot, Lscala/reflect/generic/Symbols$AbsSymbol; moduleRoot, Ljava/lang/String; filename) {
    this.(Lscala/reflect/generic/UnPickler$Scan;)bytes = bytes;
    this.(Lscala/reflect/generic/UnPickler$Scan;)classRoot = classRoot;
    this.(Lscala/reflect/generic/UnPickler$Scan;)moduleRoot = moduleRoot;
    this.(Lscala/reflect/generic/UnPickler$Scan;)filename = filename;
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;)$outer$u0020 = $outer;
      }
    (Lscala/reflect/generic/PickleBuffer;::super(B;[I;I;)V;)(bytes, offset, -1);
    this.(Lscala/reflect/generic/UnPickler$Scan;::checkVersion()V;)();
    this.(Lscala/reflect/generic/UnPickler$Scan;)index$u0020 = this.(Lscala/reflect/generic/PickleBuffer;::createIndex()I;[)();
    this.(Lscala/reflect/generic/UnPickler$Scan;)scala$reflect$generic$UnPickler$Scan$$entries$u0020 = new Ljava/lang/Object;[this.(Lscala/reflect/generic/UnPickler$Scan;::index()I;[)().<length>];
    this.(Lscala/reflect/generic/UnPickler$Scan;)symScopes$u0020 = (new (Lscala/collection/mutable/HashMap;::this()V;)());
  }
  
  private final Lscala/reflect/generic/Types$AbsType; body$percent10$percent1() {
    Lscala/reflect/generic/Types$AbsType; restpe = this.(Lscala/reflect/generic/UnPickler$Scan;::readTypeRef()Lscala/reflect/generic/Types$AbsType;)();
    Lscala/collection/immutable/List; params = this.(Lscala/reflect/generic/PickleBuffer;::until(I;Lscala/Function0;)Lscala/collection/immutable/List;)(end, (new (Lscala/reflect/generic/UnPickler$Scan$$anonfun$4;::this(Lscala/reflect/generic/UnPickler$Scan;)V;)(this)));
    Lscala/reflect/generic/Types$AbsType; $44$;
    if ((params.(Lscala/collection/SeqLike;::contains(Ljava/lang/Object;)Z;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)()) || Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(restpe, this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::NoType()Lscala/reflect/generic/Types$AbsType;)())))
      {
        $44$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::NoType()Lscala/reflect/generic/Types$AbsType;)();
      }
    else
      {
        $44$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Types;::MethodType()Lscala/reflect/generic/Types$MethodTypeExtractor;)().(Lscala/reflect/generic/Types$MethodTypeExtractor;::apply(Lscala/collection/immutable/List;Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;)(params, restpe);
      }
    return $44$;
  }
  
  private final Ljava/lang/Object; body$percent0$percent1() {
    Ljava/lang/Object; name = this.(Lscala/reflect/generic/UnPickler$Scan;::readNameRef()Ljava/lang/Object;)();
    Lscala/reflect/generic/Symbols$AbsSymbol; $45$;
    if ((this.(Lscala/reflect/generic/PickleBuffer;::readIndex()I;)() == end))
      {
        $45$ = this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StandardDefinitions;::definitions()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;)().(Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;::RootClass()Lscala/reflect/generic/Symbols$AbsSymbol;)();
      }
    else
      {
        $45$ = this.(Lscala/reflect/generic/UnPickler$Scan;::readSymbolRef()Lscala/reflect/generic/Symbols$AbsSymbol;)();
      }
    Lscala/reflect/generic/Symbols$AbsSymbol; owner$1 = $45$;
    sym$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::fromName$1(Ljava/lang/Object;I;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Symbols$AbsSymbol;)(name, tag$1, owner$1);
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;), this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)()))
      {
        sym$1.(Lscala/runtime/ObjectRef;)elem = this.(Lscala/reflect/generic/UnPickler$Scan;::fromName$1(Ljava/lang/Object;I;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Symbols$AbsSymbol;)(this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StdNames;::nme()Lscala/reflect/generic/StdNames$StandardNames;)().(Lscala/reflect/generic/StdNames$StandardNames;::expandedName(Ljava/lang/Object;Lscala/reflect/generic/Symbols$AbsSymbol;Ljava/lang/String;)Ljava/lang/Object;)(name, owner$1, this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/StdNames;::nme()Lscala/reflect/generic/StdNames$StandardNames;)().(Lscala/reflect/generic/StdNames$StandardNames;::expandedName$default$3()Ljava/lang/String;)()), tag$1, owner$1);
      }
    else
      {
        
      }
    Ljava/lang/Object; $46$;
    if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(sym$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/reflect/generic/Symbols$AbsSymbol;), this.(Lscala/reflect/generic/UnPickler$Scan;::scala$reflect$generic$UnPickler$Scan$$$outer()Lscala/reflect/generic/UnPickler;)().(Lscala/reflect/generic/UnPickler;::global()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Symbols;::NoSymbol()Lscala/reflect/generic/Symbols$AbsSymbol;)()) && !(owner$1.(Lscala/reflect/generic/Symbols$AbsSymbol;::isOverloaded()Z;)())))
      {
        this.(Lscala/reflect/generic/UnPickler$Scan;::errorMissingRequirement(Ljava/lang/Object;Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/runtime/Nothing$;)(name, owner$1);
      }
    else
      {
        $46$ = Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
      }
    return $46$;
  }
}
