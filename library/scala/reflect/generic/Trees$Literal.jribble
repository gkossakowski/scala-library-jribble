public class Lscala/reflect/generic/Trees$Literal; extends Lscala/reflect/generic/Trees$Tree; implements Lscala/reflect/generic/Trees$TermTree;, Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/reflect/generic/Constants$Constant; copy$default$1() {
    return this.(Lscala/reflect/generic/Trees$Literal;::value()Lscala/reflect/generic/Constants$Constant;)();
  }
  
  private Lscala/reflect/generic/Constants$Constant; value$u0020;
  
  public Lscala/reflect/generic/Constants$Constant; value() {
    return this.(Lscala/reflect/generic/Constants$Constant;)value$u0020;
  }
  
  public Lscala/reflect/generic/Trees$Literal; copy(Lscala/reflect/generic/Constants$Constant; value) {
    return (new (Lscala/reflect/generic/Trees$Literal;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V;)(this.(Lscala/reflect/generic/Trees$Literal;::scala$reflect$generic$Trees$Literal$$$outer()Lscala/reflect/generic/Universe;)(), value));
  }
  
  public Ljava/lang/String; productPrefix() {
    return "Literal";
  }
  
  public I; productArity() {
    return 1;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp83 = x$1;
    Ljava/lang/Object; $83$;
    if ((temp83 == 0))
      {
        $83$ = this.(Lscala/reflect/generic/Trees$Literal;::value()Lscala/reflect/generic/Constants$Constant;)();
      }
    else
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    return $83$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/generic/Trees$Literal;);
  }
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$Literal$$$outer() {
    return this.(Lscala/reflect/generic/Universe;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer, Lscala/reflect/generic/Constants$Constant; value) {
    this.(Lscala/reflect/generic/Constants$Constant;)value$u0020 = value;
    (Lscala/reflect/generic/Trees$Tree;::super(Lscala/reflect/generic/Universe;)V;)($outer);
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)((value != null));
  }
}
