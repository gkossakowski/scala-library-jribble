public abstract class Lscala/reflect/generic/Trees$Tree; extends Ljava/lang/Object; implements Lscala/Product;, Lscala/ScalaObject; {
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/String; productPrefix() {
    return Lscala/Product$class;.(Lscala/Product$class;::productPrefix(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  private I; id$u0020;
  
  public I; id() {
    return this.(Lscala/reflect/generic/Trees$Tree;)id$u0020;
  }
  
  private Ljava/lang/Object; rawpos;
  
  public Ljava/lang/Object; pos() {
    return this.(Lscala/reflect/generic/Trees$Tree;)rawpos;
  }
  
  public V; pos_$eq(Ljava/lang/Object; pos) {
    this.(Lscala/reflect/generic/Trees$Tree;)rawpos = pos;
  }
  
  public Lscala/reflect/generic/Trees$Tree; setPos(Ljava/lang/Object; pos) {
    this.(Lscala/reflect/generic/Trees$Tree;)rawpos = pos;
    return this;
  }
  
  private Lscala/reflect/generic/Types$AbsType; rawtpe;
  
  public Lscala/reflect/generic/Types$AbsType; tpe() {
    return this.(Lscala/reflect/generic/Trees$Tree;)rawtpe;
  }
  
  public V; tpe_$eq(Lscala/reflect/generic/Types$AbsType; t) {
    this.(Lscala/reflect/generic/Trees$Tree;)rawtpe = t;
  }
  
  public Lscala/reflect/generic/Trees$Tree; setType(Lscala/reflect/generic/Types$AbsType; tp) {
    this.(Lscala/reflect/generic/Trees$Tree;)rawtpe = tp;
    return this;
  }
  
  public Lscala/reflect/generic/Trees$Tree; defineType(Lscala/reflect/generic/Types$AbsType; tp) {
    return this.(Lscala/reflect/generic/Trees$Tree;::setType(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;)(tp);
  }
  
  public Lscala/reflect/generic/Symbols$AbsSymbol; symbol() {
    return null;
  }
  
  public V; symbol_$eq(Lscala/reflect/generic/Symbols$AbsSymbol; sym) {
    throw (new (Ljava/lang/UnsupportedOperationException;::this(Ljava/lang/String;)V;)(("symbol_= inapplicable for " + this)));
  }
  
  public Lscala/reflect/generic/Trees$Tree; setSymbol(Lscala/reflect/generic/Symbols$AbsSymbol; sym) {
    this.(Lscala/reflect/generic/Trees$Tree;::symbol_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(sym);
    return this;
  }
  
  public Z; hasSymbol() {
    return false;
  }
  
  public Z; isDef() {
    return false;
  }
  
  public Z; isEmpty() {
    return false;
  }
  
  public Lscala/collection/immutable/List; children() {
    return this.(Lscala/Product;::productIterator()Lscala/collection/Iterator;)().(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)().(Lscala/collection/TraversableLike;::flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/reflect/generic/Trees$Tree$$anonfun$children$1;::this(Lscala/reflect/generic/Trees$Tree;)V;)(this)), Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/reflect/generic/Trees$Tree; duplicate() {
    return this.(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::duplicateTree(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;)(this);
  }
  
  public Lscala/reflect/generic/Trees$Tree; copyAttrs(Lscala/reflect/generic/Trees$Tree; tree) {
    this.(Lscala/reflect/generic/Trees$Tree;::pos_$eq(Ljava/lang/Object;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::pos()Ljava/lang/Object;)());
    this.(Lscala/reflect/generic/Trees$Tree;::tpe_$eq(Lscala/reflect/generic/Types$AbsType;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::tpe()Lscala/reflect/generic/Types$AbsType;)());
    if (this.(Lscala/reflect/generic/Trees$Tree;::hasSymbol()Z;)())
      {
        this.(Lscala/reflect/generic/Trees$Tree;::symbol_$eq(Lscala/reflect/generic/Symbols$AbsSymbol;)V;)(tree.(Lscala/reflect/generic/Trees$Tree;::symbol()Lscala/reflect/generic/Symbols$AbsSymbol;)());
      }
    else
      {
        
      }
    return this;
  }
  
  public Ljava/lang/String; toString() {
    Ljava/io/StringWriter; buffer = (new (Ljava/io/StringWriter;::this()V;)());
    Lscala/reflect/generic/Trees$AbsTreePrinter; printer = this.(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::newTreePrinter(Ljava/io/PrintWriter;)Lscala/reflect/generic/Trees$AbsTreePrinter;)((new (Ljava/io/PrintWriter;::this(Ljava/io/Writer;)V;)(buffer)));
    printer.(Lscala/reflect/generic/Trees$AbsTreePrinter;::print(Lscala/reflect/generic/Trees$Tree;)V;)(this);
    printer.(Lscala/reflect/generic/Trees$AbsTreePrinter;::flush()V;)();
    return buffer.(Ljava/io/StringWriter;::toString()Ljava/lang/String;)();
  }
  
  public I; hashCode() {
    return super.(Ljava/lang/Object;::hashCode()I;)();
  }
  
  public Z; equals(Ljava/lang/Object; that) {
    Ljava/lang/Object; temp11 = that;
    Z; $9$;
    if ((temp11.<instanceof>(Lscala/reflect/generic/Trees$Tree;) && (temp11.<cast>(Lscala/reflect/generic/Trees$Tree;).(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)() == this.(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)())))
      {
        $9$ = (this == temp11.<cast>(Lscala/reflect/generic/Trees$Tree;));
      }
    else
      {
        $9$ = false;
      }
    return $9$;
  }
  
  protected Lscala/reflect/generic/Universe; $outer$u0020;
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$Tree$$$outer() {
    return this.(Lscala/reflect/generic/Trees$Tree;)$outer$u0020;
  }
  
  public final Lscala/collection/immutable/List; subtrees$1(Ljava/lang/Object; x) {
    Ljava/lang/Object; temp8 = x;
    Lscala/collection/immutable/List; $10$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp8, this.(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)().(Lscala/reflect/generic/Trees;::EmptyTree()Lscala/reflect/generic/Trees$EmptyTree$;)()))
      {
        $10$ = Lscala/collection/immutable/Nil$;.MODULE$;
      }
    else
      {
        Lscala/collection/immutable/List; $11$;
        failCont$percent1: while(true) {
          Lscala/collection/immutable/List; $12$;
          if ((temp8.<instanceof>(Lscala/reflect/generic/Trees$Tree;) && (temp8.<cast>(Lscala/reflect/generic/Trees$Tree;).(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)() == this.(Lscala/reflect/generic/Trees$Tree;::scala$reflect$generic$Trees$Tree$$$outer()Lscala/reflect/generic/Universe;)())))
            {
              $12$ = Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/reflect/generic/Trees$Tree;>{temp8.<cast>(Lscala/reflect/generic/Trees$Tree;)}.<cast>(Ljava/lang/Object;[)));
            }
          else
            {
              Lscala/collection/immutable/List; $13$;
              if (temp8.<instanceof>(Lscala/collection/immutable/List;))
                {
                  $13$ = temp8.<cast>(Lscala/collection/immutable/List;).(Lscala/collection/TraversableLike;::flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1;::this(Lscala/reflect/generic/Trees$Tree;)V;)(this)), Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/List;);
                }
              else
                {
                  $13$ = Lscala/collection/immutable/Nil$;.MODULE$;
                }
              $12$ = $13$;
            }
          $11$ = $12$;
          break;
        }
        $10$ = $11$;
      }
    return $10$;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/reflect/generic/Trees$Tree;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
    this.(Lscala/reflect/generic/Trees$Tree;)id$u0020 = $outer.(Lscala/reflect/generic/Trees;::nodeCount()I;)();
    $outer.(Lscala/reflect/generic/Trees;::nodeCount_$eq(I;)V;)(($outer.(Lscala/reflect/generic/Trees;::nodeCount()I;)() + 1));
    this.(Lscala/reflect/generic/Trees$Tree;)rawpos = $outer.(Lscala/reflect/generic/Universe;::NoPosition()Ljava/lang/Object;)();
  }
}
