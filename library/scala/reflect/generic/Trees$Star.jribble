public class Lscala/reflect/generic/Trees$Star; extends Lscala/reflect/generic/Trees$Tree; implements Lscala/reflect/generic/Trees$TermTree;, Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/reflect/generic/Trees$Tree; copy$default$1() {
    return this.(Lscala/reflect/generic/Trees$Star;::elem()Lscala/reflect/generic/Trees$Tree;)();
  }
  
  private Lscala/reflect/generic/Trees$Tree; elem$u0020;
  
  public Lscala/reflect/generic/Trees$Tree; elem() {
    return this.(Lscala/reflect/generic/Trees$Tree;)elem$u0020;
  }
  
  public Lscala/reflect/generic/Trees$Star; copy(Lscala/reflect/generic/Trees$Tree; elem) {
    return (new (Lscala/reflect/generic/Trees$Star;::this(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)V;)(this.(Lscala/reflect/generic/Trees$Star;::scala$reflect$generic$Trees$Star$$$outer()Lscala/reflect/generic/Universe;)(), elem));
  }
  
  public Ljava/lang/String; productPrefix() {
    return "Star";
  }
  
  public I; productArity() {
    return 1;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp63 = x$1;
    Ljava/lang/Object; $49$;
    if ((temp63 == 0))
      {
        $49$ = this.(Lscala/reflect/generic/Trees$Star;::elem()Lscala/reflect/generic/Trees$Tree;)();
      }
    else
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    return $49$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/generic/Trees$Star;);
  }
  
  public Lscala/reflect/generic/Universe; scala$reflect$generic$Trees$Star$$$outer() {
    return this.(Lscala/reflect/generic/Universe;)$outer$u0020;
  }
  
  public this(Lscala/reflect/generic/Universe; $outer, Lscala/reflect/generic/Trees$Tree; elem) {
    this.(Lscala/reflect/generic/Trees$Tree;)elem$u0020 = elem;
    (Lscala/reflect/generic/Trees$Tree;::super(Lscala/reflect/generic/Universe;)V;)($outer);
  }
}
