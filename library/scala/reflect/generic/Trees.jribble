public interface Lscala/reflect/generic/Trees; extends Lscala/ScalaObject; {
  
  public Lscala/reflect/generic/Trees$AbsTreePrinter; newTreePrinter(Ljava/io/PrintWriter; out);
  
  public I; nodeCount();
  
  public V; nodeCount_$eq(I; x$1);
  
  public Lscala/reflect/generic/Trees$Modifiers; Modifiers(J; flags, Ljava/lang/Object; privateWithin);
  
  public Lscala/reflect/generic/Trees$Modifiers; Modifiers(J; flags);
  
  public Lscala/reflect/generic/Trees$Modifiers; NoMods();
  
  public Lscala/reflect/generic/Trees$Tree; duplicateTree(Lscala/reflect/generic/Trees$Tree; tree);
  
  public Lscala/reflect/generic/Trees$EmptyTree$; EmptyTree();
  
  public Lscala/reflect/generic/Trees$Literal; Literal(Ljava/lang/Object; value);
  
  public Lscala/reflect/generic/Trees$TypeTreeExtractor; TypeTree();
  
  public Lscala/reflect/generic/Trees$SelectFromArray$; SelectFromArray();
  
  public Lscala/reflect/generic/Trees$ExistentialTypeTree$; ExistentialTypeTree();
  
  public Lscala/reflect/generic/Trees$TypeBoundsTree$; TypeBoundsTree();
  
  public Lscala/reflect/generic/Trees$AppliedTypeTree$; AppliedTypeTree();
  
  public Lscala/reflect/generic/Trees$CompoundTypeTree$; CompoundTypeTree();
  
  public Lscala/reflect/generic/Trees$SelectFromTypeTree$; SelectFromTypeTree();
  
  public Lscala/reflect/generic/Trees$SingletonTypeTree$; SingletonTypeTree();
  
  public Lscala/reflect/generic/Trees$Annotated$; Annotated();
  
  public Lscala/reflect/generic/Trees$Literal$; Literal();
  
  public Lscala/reflect/generic/Trees$Ident$; Ident();
  
  public Lscala/reflect/generic/Trees$Select$; Select();
  
  public Lscala/reflect/generic/Trees$This$; This();
  
  public Lscala/reflect/generic/Trees$Super$; Super();
  
  public Lscala/reflect/generic/Trees$ApplyDynamic$; ApplyDynamic();
  
  public Lscala/reflect/generic/Trees$Apply$; Apply();
  
  public Lscala/reflect/generic/Trees$TypeApply$; TypeApply();
  
  public Lscala/reflect/generic/Trees$Typed$; Typed();
  
  public Lscala/reflect/generic/Trees$New$; New();
  
  public Lscala/reflect/generic/Trees$Throw$; Throw();
  
  public Lscala/reflect/generic/Trees$Try$; Try();
  
  public Lscala/reflect/generic/Trees$Return$; Return();
  
  public Lscala/reflect/generic/Trees$Match$; Match();
  
  public Lscala/reflect/generic/Trees$If$; If();
  
  public Lscala/reflect/generic/Trees$Assign$; Assign();
  
  public Lscala/reflect/generic/Trees$Function$; Function();
  
  public Lscala/reflect/generic/Trees$ArrayValue$; ArrayValue();
  
  public Lscala/reflect/generic/Trees$UnApply$; UnApply();
  
  public Lscala/reflect/generic/Trees$Bind$; Bind();
  
  public Lscala/reflect/generic/Trees$Star$; Star();
  
  public Lscala/reflect/generic/Trees$Alternative$; Alternative();
  
  public Lscala/reflect/generic/Trees$CaseDef$; CaseDef();
  
  public Lscala/reflect/generic/Trees$Block$; Block();
  
  public Lscala/reflect/generic/Trees$Template$; Template();
  
  public Lscala/reflect/generic/Trees$Import$; Import();
  
  public Lscala/reflect/generic/Trees$ImportSelector$; ImportSelector();
  
  public Lscala/reflect/generic/Trees$LabelDef$; LabelDef();
  
  public Lscala/reflect/generic/Trees$TypeDef$; TypeDef();
  
  public Lscala/reflect/generic/Trees$DefDef$; DefDef();
  
  public Lscala/reflect/generic/Trees$ValDef$; ValDef();
  
  public Lscala/reflect/generic/Trees$ModuleDef$; ModuleDef();
  
  public Lscala/reflect/generic/Trees$ClassDef$; ClassDef();
  
  public Lscala/reflect/generic/Trees$PackageDef$; PackageDef();
  
  public Lscala/reflect/generic/Trees$Modifiers$; Modifiers();
}
