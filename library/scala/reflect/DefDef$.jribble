public final class Lscala/reflect/DefDef$; extends Lscala/runtime/AbstractFunction4; implements Lscala/ScalaObject; {
  public static Lscala/reflect/DefDef$; MODULE$ = new (Lscala/reflect/DefDef$;::this()V;)();
  
  public final Ljava/lang/String; toString() {
    return "DefDef";
  }
  
  public Lscala/Option; unapply(Lscala/reflect/DefDef; x$0) {
    Lscala/Option; $80$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$0, null))
      {
        $80$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $80$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)((new (Lscala/Tuple4;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(x$0.(Lscala/reflect/DefDef;::sym()Lscala/reflect/Symbol;)(), x$0.(Lscala/reflect/DefDef;::vparamss()Lscala/collection/immutable/List;)(), x$0.(Lscala/reflect/DefDef;::ret()Lscala/reflect/Type;)(), x$0.(Lscala/reflect/DefDef;::rhs()Lscala/reflect/Tree;)()))));
      }
    return $80$;
  }
  
  public Lscala/reflect/DefDef; apply(Lscala/reflect/Symbol; sym, Lscala/collection/immutable/List; vparamss, Lscala/reflect/Type; ret, Lscala/reflect/Tree; rhs) {
    return (new (Lscala/reflect/DefDef;::this(Lscala/reflect/Symbol;Lscala/collection/immutable/List;Lscala/reflect/Type;Lscala/reflect/Tree;)V;)(sym, vparamss, ret, rhs));
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2, Ljava/lang/Object; v3, Ljava/lang/Object; v4) {
    return this.(Lscala/reflect/DefDef$;::apply(Lscala/reflect/Symbol;Lscala/collection/immutable/List;Lscala/reflect/Type;Lscala/reflect/Tree;)Lscala/reflect/DefDef;)(v1.<cast>(Lscala/reflect/Symbol;), v2.<cast>(Lscala/collection/immutable/List;), v3.<cast>(Lscala/reflect/Type;), v4.<cast>(Lscala/reflect/Tree;));
  }
  
  public this() {
    (Lscala/runtime/AbstractFunction4;::super()V;)();
  }
}
