public abstract class Lscala/reflect/ClassManifest$class; {
  
  private static Z; subtype(Lscala/reflect/ClassManifest; $this, Ljava/lang/Class; sub, Ljava/lang/Class; sup$1) {
    return Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::loop$1(Lscala/reflect/ClassManifest;Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;Ljava/lang/Class;)Z;)($this, Lscala/Predef$;.MODULE$.(Lscala/Predef$;::Set()Lscala/collection/immutable/Set$;)().(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/GenTraversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Class;>{sub}.<cast>(Ljava/lang/Object;[))).<cast>(Lscala/collection/immutable/Set;), Lscala/Predef$;.MODULE$.(Lscala/Predef$;::Set()Lscala/collection/immutable/Set$;)().(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/GenTraversable;)(Lscala/collection/immutable/Nil$;.MODULE$).<cast>(Lscala/collection/immutable/Set;), sup$1);
  }
  
  private static Z; subargs(Lscala/reflect/ClassManifest; $this, Lscala/collection/immutable/List; args1, Lscala/collection/immutable/List; args2) {
    return args1.(Lscala/collection/SeqLike;::corresponds(Lscala/collection/GenSeq;Lscala/Function2;)Z;)(args2, (new (Lscala/reflect/ClassManifest$$anonfun$subargs$1;::this(Lscala/reflect/ClassManifest;)V;)($this)));
  }
  
  public static Z; $less$colon$less(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; that$1) {
    Z; $16$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), that$1.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()))
      {
        $16$ = Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::subargs(Lscala/reflect/ClassManifest;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z;)($this, $this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)(), that$1.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)());
      }
    else
      {
        $16$ = (that$1.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)().(Lscala/collection/IterableLike;::isEmpty()Z;)() && Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::subtype(Lscala/reflect/ClassManifest;Ljava/lang/Class;Ljava/lang/Class;)Z;)($this, $this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), that$1.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()));
      }
    return (!(Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::cannotMatch$1(Lscala/reflect/ClassManifest;Lscala/reflect/ClassManifest;)Z;)($this, that$1)) && $16$);
  }
  
  public static Z; $greater$colon$greater(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; that) {
    return that.(Lscala/reflect/ClassManifest;::$less$colon$less(Lscala/reflect/ClassManifest;)Z;)($this);
  }
  
  public static Z; canEqual(Lscala/reflect/ClassManifest; $this, Ljava/lang/Object; other) {
    Ljava/lang/Object; temp6 = other;
    return temp6.<instanceof>(Lscala/reflect/ClassManifest;);
  }
  
  public static Z; equals(Lscala/reflect/ClassManifest; $this, Ljava/lang/Object; that) {
    Ljava/lang/Object; temp8 = that;
    Z; $17$;
    if (temp8.<instanceof>(Lscala/reflect/ClassManifest;))
      {
        Lscala/reflect/ClassManifest; temp9 = temp8.<cast>(Lscala/reflect/ClassManifest;);
        Lscala/reflect/ClassManifest; m = temp9;
        $17$ = (m.(Lscala/reflect/ClassManifest;::canEqual(Ljava/lang/Object;)Z;)($this) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), m.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()));
      }
    else
      {
        $17$ = false;
      }
    return $17$;
  }
  
  public static I; hashCode(Lscala/reflect/ClassManifest; $this) {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)());
  }
  
  public static Ljava/lang/Class; arrayClass(Lscala/reflect/ClassManifest; $this, Ljava/lang/Class; tp) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)(tp, 0).(Ljava/lang/Object;::getClass()Ljava/lang/Class;)();
  }
  
  public static Lscala/reflect/ClassManifest; arrayManifest(Lscala/reflect/ClassManifest; $this) {
    return Lscala/reflect/ClassManifest$;.MODULE$.(Lscala/reflect/ClassManifest$;::classType(Ljava/lang/Class;)Lscala/reflect/ClassManifest;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()));
  }
  
  public static Ljava/lang/Object; newArray(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), len);
  }
  
  public static Ljava/lang/Object;[ newArray2(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()), len).<cast>(Ljava/lang/Object;[);
  }
  
  public static Ljava/lang/Object;[[ newArray3(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())), len).<cast>(Ljava/lang/Object;[[);
  }
  
  public static Ljava/lang/Object;[[[ newArray4(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()))), len).<cast>(Ljava/lang/Object;[[[);
  }
  
  public static Ljava/lang/Object;[[[[ newArray5(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())))), len).<cast>(Ljava/lang/Object;[[[[);
  }
  
  public static Lscala/collection/mutable/WrappedArray; newWrappedArray(Lscala/reflect/ClassManifest; $this, I; len) {
    return (new (Lscala/collection/mutable/WrappedArray$ofRef;::this(Ljava/lang/Object;[)V;)($this.(Lscala/reflect/ClassManifest;::newArray(I;)Ljava/lang/Object;)(len).<cast>(Ljava/lang/Object;[)));
  }
  
  public static Lscala/collection/mutable/ArrayBuilder; newArrayBuilder(Lscala/reflect/ClassManifest; $this) {
    return (new (Lscala/collection/mutable/ArrayBuilder$ofRef;::this(Lscala/reflect/ClassManifest;)V;)($this));
  }
  
  public static Lscala/collection/immutable/List; typeArguments(Lscala/reflect/ClassManifest; $this) {
    return Lscala/collection/immutable/Nil$;.MODULE$;
  }
  
  public static Ljava/lang/String; argString(Lscala/reflect/ClassManifest; $this) {
    Ljava/lang/String; $18$;
    if ($this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)())
      {
        $18$ = $this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)().(Lscala/collection/TraversableOnce;::mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)("[", ", ", "]");
      }
    else
      {
        Ljava/lang/String; $19$;
        if ($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)().(Ljava/lang/Class;::isArray()Z;)())
          {
            $19$ = (("[" + Lscala/reflect/ClassManifest$;.MODULE$.(Lscala/reflect/ClassManifest$;::fromClass(Ljava/lang/Class;)Lscala/reflect/ClassManifest;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)().(Ljava/lang/Class;::getComponentType()Ljava/lang/Class;)())) + "]");
          }
        else
          {
            $19$ = "";
          }
        $18$ = $19$;
      }
    return $18$;
  }
  
  private static final Z; loop$1(Lscala/reflect/ClassManifest; $this, Lscala/collection/immutable/Set; left, Lscala/collection/immutable/Set; seen, Ljava/lang/Class; sup$1) {
    Ljava/lang/Class; next = left.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Ljava/lang/Class;);
    Lscala/collection/immutable/Set; supers = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(next.(Ljava/lang/Class;::getInterfaces()Ljava/lang/Class;[)().<cast>(Ljava/lang/Object;[)).(Lscala/collection/TraversableOnce;::toSet()Lscala/collection/immutable/Set;)().(Lscala/collection/SetLike;::$plus$plus(Lscala/collection/GenTraversableOnce;)Lscala/collection/Set;)(Lscala/Option$;.MODULE$.(Lscala/Option$;::option2Iterable(Lscala/Option;)Lscala/collection/Iterable;)(Lscala/Option$;.MODULE$.(Lscala/Option$;::apply(Ljava/lang/Object;)Lscala/Option;)(next.(Ljava/lang/Class;::getSuperclass()Ljava/lang/Class;)()))).<cast>(Lscala/collection/immutable/Set;);
    Lscala/collection/immutable/Set; xs = left.(Lscala/collection/SetLike;::$plus$plus(Lscala/collection/GenTraversableOnce;)Lscala/collection/Set;)(supers).(Lscala/collection/TraversableLike;::filterNot(Lscala/Function1;)Ljava/lang/Object;)(seen).<cast>(Lscala/collection/immutable/Set;);
    return (left.(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && (supers.(Lscala/collection/GenSetLike;::apply(Ljava/lang/Object;)Z;)(sup$1) || Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::loop$1(Lscala/reflect/ClassManifest;Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;Ljava/lang/Class;)Z;)($this, xs.(Lscala/collection/SetLike;::$minus(Ljava/lang/Object;)Lscala/collection/Set;)(next).<cast>(Lscala/collection/immutable/Set;), seen.(Lscala/collection/SetLike;::$plus(Ljava/lang/Object;)Lscala/collection/Set;)(next).<cast>(Lscala/collection/immutable/Set;), sup$1)));
  }
  
  private static final Z; cannotMatch$1(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; that$1) {
    return (((that$1.<instanceof>(Lscala/reflect/AnyValManifest;) || (that$1 == Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::AnyVal()Lscala/reflect/Manifest;)())) || (that$1 == Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::Nothing()Lscala/reflect/Manifest;)())) || (that$1 == Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::Null()Lscala/reflect/Manifest;)()));
  }
  
  public static V; $init$(Lscala/reflect/ClassManifest; $this) {
    
  }
}
