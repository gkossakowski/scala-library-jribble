public abstract class Lscala/reflect/ClassManifest$class; {
  
  public static Z; $less$colon$less(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; that) {
    Lscala/reflect/ClassManifest; temp8 = that;
    Z; $14$;
    if (temp8.<instanceof>(Lscala/reflect/AnyValManifest;))
      {
        $14$ = false;
      }
    else
      {
        Z; $15$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp8, Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::AnyVal()Lscala/reflect/Manifest;)()))
          {
            $15$ = false;
          }
        else
          {
            Z; $16$;
            failCont$percent1: while(true) {
              Z; $17$;
              if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp8, Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::Nothing()Lscala/reflect/Manifest;)()))
                {
                  $17$ = false;
                }
              else
                {
                  Z; $18$;
                  failCont$percent2: while(true) {
                    Z; $19$;
                    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp8, Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::Null()Lscala/reflect/Manifest;)()))
                      {
                        $19$ = false;
                      }
                    else
                      {
                        Z; $20$;
                        failCont$percent3: while(true) {
                          $20$ = ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), that.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()) || Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::subtype$1(Lscala/reflect/ClassManifest;Ljava/lang/Class;Ljava/lang/Class;)Z;)($this, $this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), that.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())) && Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::subargs$1(Lscala/reflect/ClassManifest;Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Z;)($this, $this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)(), that.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)()));
                          break;
                        }
                        $19$ = $20$;
                      }
                    $18$ = $19$;
                    break;
                  }
                  $17$ = $18$;
                }
              $16$ = $17$;
              break;
            }
            $15$ = $16$;
          }
        $14$ = $15$;
      }
    return $14$;
  }
  
  public static Z; $greater$colon$greater(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; that) {
    return that.(Lscala/reflect/ClassManifest;::$less$colon$less(Lscala/reflect/ClassManifest;)Z;)($this);
  }
  
  public static Z; canEqual(Lscala/reflect/ClassManifest; $this, Ljava/lang/Object; other) {
    Ljava/lang/Object; temp10 = other;
    return temp10.<instanceof>(Lscala/reflect/ClassManifest;);
  }
  
  public static Z; equals(Lscala/reflect/ClassManifest; $this, Ljava/lang/Object; that) {
    Ljava/lang/Object; temp12 = that;
    Z; $21$;
    if (temp12.<instanceof>(Lscala/reflect/ClassManifest;))
      {
        Lscala/reflect/ClassManifest; temp13 = temp12.<cast>(Lscala/reflect/ClassManifest;);
        Lscala/reflect/ClassManifest; m = temp13;
        Z; $22$;
        if (Lscala/reflect/ClassManifest$class;.(Lscala/reflect/ClassManifest$class;::gd1$1(Lscala/reflect/ClassManifest;Lscala/reflect/ClassManifest;)Z;)($this, m))
          {
            $22$ = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), temp13.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)());
          }
        else
          {
            $22$ = false;
          }
        $21$ = $22$;
      }
    else
      {
        $21$ = false;
      }
    return $21$;
  }
  
  public static I; hashCode(Lscala/reflect/ClassManifest; $this) {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)());
  }
  
  public static Ljava/lang/Class; arrayClass(Lscala/reflect/ClassManifest; $this, Ljava/lang/Class; tp) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)(tp, 0).(Ljava/lang/Object;::getClass()Ljava/lang/Class;)();
  }
  
  public static Lscala/reflect/ClassManifest; arrayManifest(Lscala/reflect/ClassManifest; $this) {
    return Lscala/reflect/ClassManifest$;.MODULE$.(Lscala/reflect/ClassManifest$;::classType(Ljava/lang/Class;)Lscala/reflect/ClassManifest;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()));
  }
  
  public static Ljava/lang/Object; newArray(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), len);
  }
  
  public static Ljava/lang/Object;[ newArray2(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()), len).<cast>(Ljava/lang/Object;[);
  }
  
  public static Ljava/lang/Object;[[ newArray3(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())), len).<cast>(Ljava/lang/Object;[[);
  }
  
  public static Ljava/lang/Object;[[[ newArray4(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()))), len).<cast>(Ljava/lang/Object;[[[);
  }
  
  public static Ljava/lang/Object;[[[[ newArray5(Lscala/reflect/ClassManifest; $this, I; len) {
    return Ljava/lang/reflect/Array;.(Ljava/lang/reflect/Array;::newInstance(Ljava/lang/Class;I;)Ljava/lang/Object;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())))), len).<cast>(Ljava/lang/Object;[[[[);
  }
  
  public static Lscala/collection/mutable/WrappedArray; newWrappedArray(Lscala/reflect/ClassManifest; $this, I; len) {
    return (new (Lscala/collection/mutable/WrappedArray$ofRef;::this(Ljava/lang/Object;[)V;)($this.(Lscala/reflect/ClassManifest;::newArray(I;)Ljava/lang/Object;)(len).<cast>(Ljava/lang/Object;[)));
  }
  
  public static Lscala/collection/mutable/ArrayBuilder; newArrayBuilder(Lscala/reflect/ClassManifest; $this) {
    return (new (Lscala/collection/mutable/ArrayBuilder$ofRef;::this(Lscala/reflect/ClassManifest;)V;)($this));
  }
  
  public static Lscala/collection/immutable/List; typeArguments(Lscala/reflect/ClassManifest; $this) {
    return Lscala/collection/immutable/Nil$;.MODULE$;
  }
  
  public static Ljava/lang/String; argString(Lscala/reflect/ClassManifest; $this) {
    Ljava/lang/String; $23$;
    if ($this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)())
      {
        $23$ = $this.(Lscala/reflect/ClassManifest;::typeArguments()Lscala/collection/immutable/List;)().(Lscala/collection/TraversableOnce;::mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)("[", ", ", "]");
      }
    else
      {
        Ljava/lang/String; $24$;
        if ($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)().(Ljava/lang/Class;::isArray()Z;)())
          {
            $24$ = (("[" + Lscala/reflect/ClassManifest$;.MODULE$.(Lscala/reflect/ClassManifest$;::fromClass(Ljava/lang/Class;)Lscala/reflect/ClassManifest;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)().(Ljava/lang/Class;::getComponentType()Ljava/lang/Class;)())) + "]");
          }
        else
          {
            $24$ = "";
          }
        $23$ = $24$;
      }
    return $23$;
  }
  
  public static final Z; subtype$1(Lscala/reflect/ClassManifest; $this, Ljava/lang/Class; sub, Ljava/lang/Class; sup$1) {
    Ljava/lang/Class; subSuperClass = sub.(Ljava/lang/Class;::getSuperclass()Ljava/lang/Class;)();
    Lscala/collection/immutable/List; subSuperInterfaces = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(sub.(Ljava/lang/Class;::getInterfaces()Ljava/lang/Class;[)().<cast>(Ljava/lang/Object;[)).(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)();
    Lscala/collection/immutable/List; $25$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(subSuperClass, null))
      {
        $25$ = Lscala/collection/immutable/Nil$;.MODULE$;
      }
    else
      {
        $25$ = Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Class;>{subSuperClass}.<cast>(Ljava/lang/Object;[)));
      }
    Lscala/collection/immutable/List; x$1 = $25$;
    Lscala/collection/immutable/List; subSuper = subSuperInterfaces.(Lscala/collection/immutable/List;::$colon$colon$colon(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(x$1);
    return (subSuper.(Lscala/collection/SeqLike;::contains(Ljava/lang/Object;)Z;)(sup$1) || subSuper.(Lscala/collection/LinearSeqOptimized;::exists(Lscala/Function1;)Z;)((new (Lscala/reflect/ClassManifest$$anonfun$subtype$1$1;::this(Lscala/reflect/ClassManifest;Ljava/lang/Class;)V;)($this, sup$1))));
  }
  
  private static final Z; subargs$1(Lscala/reflect/ClassManifest; $this, Lscala/collection/immutable/List; args1, Lscala/collection/immutable/List; args2) {
    return args1.(Lscala/collection/IterableLike;::zip(Lscala/collection/Iterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(args2, Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/LinearSeqOptimized;).(Lscala/collection/LinearSeqOptimized;::forall(Lscala/Function1;)Z;)((new (Lscala/reflect/ClassManifest$$anonfun$subargs$1$1;::this(Lscala/reflect/ClassManifest;)V;)($this)));
  }
  
  private static final Z; gd1$1(Lscala/reflect/ClassManifest; $this, Lscala/reflect/ClassManifest; x$1) {
    return x$1.(Lscala/reflect/ClassManifest;::canEqual(Ljava/lang/Object;)Z;)($this);
  }
  
  public static V; $init$(Lscala/reflect/ClassManifest; $this) {
    
  }
}
