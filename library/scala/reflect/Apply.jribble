public class Lscala/reflect/Apply; extends Lscala/reflect/Tree; implements Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/immutable/List; copy$default$2() {
    return this.(Lscala/reflect/Apply;::args()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/reflect/Tree; copy$default$1() {
    return this.(Lscala/reflect/Apply;::fun()Lscala/reflect/Tree;)();
  }
  
  private Lscala/reflect/Tree; fun$u0020;
  
  public Lscala/reflect/Tree; fun() {
    return this.(Lscala/reflect/Apply;)fun$u0020;
  }
  
  private Lscala/collection/immutable/List; args$u0020;
  
  public Lscala/collection/immutable/List; args() {
    return this.(Lscala/reflect/Apply;)args$u0020;
  }
  
  public Lscala/reflect/Apply; copy(Lscala/reflect/Tree; fun, Lscala/collection/immutable/List; args) {
    return (new (Lscala/reflect/Apply;::this(Lscala/reflect/Tree;Lscala/collection/immutable/List;)V;)(fun, args));
  }
  
  public I; hashCode() {
    return this.(Lscala/runtime/ScalaRunTime$;::_hashCode(Lscala/Product;)I;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return this.(Lscala/runtime/ScalaRunTime$;::_toString(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; x$1) {
    Ljava/lang/Object; temp14 = x$1;
    Z; $11$;
    if (temp14.<instanceof>(Lscala/reflect/Apply;))
      {
        Lscala/reflect/Apply; temp15 = temp14.<cast>(Lscala/reflect/Apply;);
        Lscala/reflect/Tree; temp16 = temp15.(Lscala/reflect/Apply;::fun()Lscala/reflect/Tree;)();
        Lscala/collection/immutable/List; temp17 = temp15.(Lscala/reflect/Apply;::args()Lscala/collection/immutable/List;)();
        Lscala/collection/immutable/List; args$1 = temp17;
        Lscala/reflect/Tree; fun$1 = temp16;
        Z; $12$;
        if (this.(Lscala/reflect/Apply;::gd4$1(Lscala/reflect/Tree;Lscala/collection/immutable/List;)Z;)(fun$1, args$1))
          {
            $12$ = x$1.<cast>(Lscala/reflect/Apply;).(Lscala/Equals;::canEqual(Ljava/lang/Object;)Z;)(this);
          }
        else
          {
            $12$ = false;
          }
        $11$ = $12$;
      }
    else
      {
        $11$ = false;
      }
    return ((this == x$1) || $11$);
  }
  
  public Ljava/lang/String; productPrefix() {
    return "Apply";
  }
  
  public I; productArity() {
    return 2;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp18 = x$1;
    I; $13$ = temp18;
    Ljava/lang/Object; $14$;
    switch ($13$) {
      0: {
        $14$ = this.(Lscala/reflect/Apply;::fun()Lscala/reflect/Tree;)();
        break;
      }
      
      1: {
        $14$ = this.(Lscala/reflect/Apply;::args()Lscala/collection/immutable/List;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $14$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/Apply;);
  }
  
  private final Z; gd4$1(Lscala/reflect/Tree; x$1, Lscala/collection/immutable/List; x$2) {
    return (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$1, this.(Lscala/reflect/Apply;::fun()Lscala/reflect/Tree;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$2, this.(Lscala/reflect/Apply;::args()Lscala/collection/immutable/List;)()));
  }
  
  public this(Lscala/reflect/Tree; fun, Lscala/collection/immutable/List; args) {
    this.(Lscala/reflect/Apply;)fun$u0020 = fun;
    this.(Lscala/reflect/Apply;)args$u0020 = args;
    (Lscala/reflect/Tree;::super()V;)();
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
  }
}
