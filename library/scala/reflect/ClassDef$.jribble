public final class Lscala/reflect/ClassDef$; extends Lscala/runtime/AbstractFunction3; implements Lscala/ScalaObject; {
  public static Lscala/reflect/ClassDef$; MODULE$ = new (Lscala/reflect/ClassDef$;::this()V;)();
  
  public final Ljava/lang/String; toString() {
    return "ClassDef";
  }
  
  public Lscala/Option; unapply(Lscala/reflect/ClassDef; x$0) {
    Lscala/Option; $81$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$0, null))
      {
        $81$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $81$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)((new (Lscala/Tuple3;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(x$0.(Lscala/reflect/ClassDef;::sym()Lscala/reflect/Symbol;)(), x$0.(Lscala/reflect/ClassDef;::tpe()Lscala/reflect/Type;)(), x$0.(Lscala/reflect/ClassDef;::impl()Lscala/reflect/Template;)()))));
      }
    return $81$;
  }
  
  public Lscala/reflect/ClassDef; apply(Lscala/reflect/Symbol; sym, Lscala/reflect/Type; tpe, Lscala/reflect/Template; impl) {
    return (new (Lscala/reflect/ClassDef;::this(Lscala/reflect/Symbol;Lscala/reflect/Type;Lscala/reflect/Template;)V;)(sym, tpe, impl));
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2, Ljava/lang/Object; v3) {
    return this.(Lscala/reflect/ClassDef$;::apply(Lscala/reflect/Symbol;Lscala/reflect/Type;Lscala/reflect/Template;)Lscala/reflect/ClassDef;)(v1.<cast>(Lscala/reflect/Symbol;), v2.<cast>(Lscala/reflect/Type;), v3.<cast>(Lscala/reflect/Template;));
  }
  
  public this() {
    (Lscala/runtime/AbstractFunction3;::super()V;)();
  }
}
