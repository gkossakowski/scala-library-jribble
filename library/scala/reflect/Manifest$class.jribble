public abstract class Lscala/reflect/Manifest$class; {
  
  public static Lscala/collection/immutable/List; typeArguments(Lscala/reflect/Manifest; $this) {
    return Lscala/collection/immutable/Nil$;.MODULE$;
  }
  
  public static Lscala/reflect/Manifest; arrayManifest(Lscala/reflect/Manifest; $this) {
    return Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::classType(Ljava/lang/Class;)Lscala/reflect/Manifest;)($this.(Lscala/reflect/ClassManifest;::arrayClass(Ljava/lang/Class;)Ljava/lang/Class;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)()));
  }
  
  public static Z; canEqual(Lscala/reflect/Manifest; $this, Ljava/lang/Object; that) {
    Ljava/lang/Object; temp1 = that;
    return temp1.<instanceof>(Lscala/reflect/Manifest;);
  }
  
  public static Z; equals(Lscala/reflect/Manifest; $this, Ljava/lang/Object; that) {
    Ljava/lang/Object; temp3 = that;
    Z; $3$;
    if (temp3.<instanceof>(Lscala/reflect/Manifest;))
      {
        Lscala/reflect/Manifest; temp4 = temp3.<cast>(Lscala/reflect/Manifest;);
        Lscala/reflect/Manifest; m = temp4;
        $3$ = (((m.(Lscala/reflect/Manifest;::canEqual(Ljava/lang/Object;)Z;)($this) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)(), m.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)())) && $this.(Lscala/reflect/ClassManifest;::$less$colon$less(Lscala/reflect/ClassManifest;)Z;)(m)) && m.(Lscala/reflect/ClassManifest;::$less$colon$less(Lscala/reflect/ClassManifest;)Z;)($this));
      }
    else
      {
        $3$ = false;
      }
    return $3$;
  }
  
  public static I; hashCode(Lscala/reflect/Manifest; $this) {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)($this.(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)());
  }
  
  public static V; $init$(Lscala/reflect/Manifest; $this) {
    
  }
}
