public class Lscala/reflect/Block; extends Lscala/reflect/Tree; implements Lscala/ScalaObject;, Lscala/Product; {
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/reflect/Tree; copy$default$2() {
    return this.(Lscala/reflect/Block;::expr()Lscala/reflect/Tree;)();
  }
  
  public Lscala/collection/immutable/List; copy$default$1() {
    return this.(Lscala/reflect/Block;::stats()Lscala/collection/immutable/List;)();
  }
  
  private Lscala/collection/immutable/List; stats$u0020;
  
  public Lscala/collection/immutable/List; stats() {
    return this.(Lscala/reflect/Block;)stats$u0020;
  }
  
  private Lscala/reflect/Tree; expr$u0020;
  
  public Lscala/reflect/Tree; expr() {
    return this.(Lscala/reflect/Block;)expr$u0020;
  }
  
  public Lscala/reflect/Block; copy(Lscala/collection/immutable/List; stats, Lscala/reflect/Tree; expr) {
    return (new (Lscala/reflect/Block;::this(Lscala/collection/immutable/List;Lscala/reflect/Tree;)V;)(stats, expr));
  }
  
  public I; hashCode() {
    return this.(Lscala/runtime/ScalaRunTime$;::_hashCode(Lscala/Product;)I;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return this.(Lscala/runtime/ScalaRunTime$;::_toString(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; x$1) {
    Ljava/lang/Object; temp33 = x$1;
    Z; $26$;
    if (temp33.<instanceof>(Lscala/reflect/Block;))
      {
        Lscala/reflect/Block; temp34 = temp33.<cast>(Lscala/reflect/Block;);
        Lscala/collection/immutable/List; temp35 = temp34.(Lscala/reflect/Block;::stats()Lscala/collection/immutable/List;)();
        Lscala/reflect/Tree; temp36 = temp34.(Lscala/reflect/Block;::expr()Lscala/reflect/Tree;)();
        Lscala/reflect/Tree; expr$1 = temp36;
        Lscala/collection/immutable/List; stats$1 = temp35;
        Z; $27$;
        if (this.(Lscala/reflect/Block;::gd8$1(Lscala/collection/immutable/List;Lscala/reflect/Tree;)Z;)(stats$1, expr$1))
          {
            $27$ = x$1.<cast>(Lscala/reflect/Block;).(Lscala/Equals;::canEqual(Ljava/lang/Object;)Z;)(this);
          }
        else
          {
            $27$ = false;
          }
        $26$ = $27$;
      }
    else
      {
        $26$ = false;
      }
    return ((this == x$1) || $26$);
  }
  
  public Ljava/lang/String; productPrefix() {
    return "Block";
  }
  
  public I; productArity() {
    return 2;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp37 = x$1;
    I; $28$ = temp37;
    Ljava/lang/Object; $29$;
    switch ($28$) {
      0: {
        $29$ = this.(Lscala/reflect/Block;::stats()Lscala/collection/immutable/List;)();
        break;
      }
      
      1: {
        $29$ = this.(Lscala/reflect/Block;::expr()Lscala/reflect/Tree;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $29$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/reflect/Block;);
  }
  
  private final Z; gd8$1(Lscala/collection/immutable/List; x$1, Lscala/reflect/Tree; x$2) {
    return (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$1, this.(Lscala/reflect/Block;::stats()Lscala/collection/immutable/List;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$2, this.(Lscala/reflect/Block;::expr()Lscala/reflect/Tree;)()));
  }
  
  public this(Lscala/collection/immutable/List; stats, Lscala/reflect/Tree; expr) {
    this.(Lscala/reflect/Block;)stats$u0020 = stats;
    this.(Lscala/reflect/Block;)expr$u0020 = expr;
    (Lscala/reflect/Tree;::super()V;)();
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
  }
}
