public final class Lscala/reflect/TypeApply$; extends Lscala/runtime/AbstractFunction2; implements Lscala/ScalaObject; {
  public static Lscala/reflect/TypeApply$; MODULE$ = new (Lscala/reflect/TypeApply$;::this()V;)();
  
  public final Ljava/lang/String; toString() {
    return "TypeApply";
  }
  
  public Lscala/Option; unapply(Lscala/reflect/TypeApply; x$0) {
    Lscala/Option; $68$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$0, null))
      {
        $68$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $68$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(x$0.(Lscala/reflect/TypeApply;::fun()Lscala/reflect/Tree;)(), x$0.(Lscala/reflect/TypeApply;::args()Lscala/collection/immutable/List;)()))));
      }
    return $68$;
  }
  
  public Lscala/reflect/TypeApply; apply(Lscala/reflect/Tree; fun, Lscala/collection/immutable/List; args) {
    return (new (Lscala/reflect/TypeApply;::this(Lscala/reflect/Tree;Lscala/collection/immutable/List;)V;)(fun, args));
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2) {
    return this.(Lscala/reflect/TypeApply$;::apply(Lscala/reflect/Tree;Lscala/collection/immutable/List;)Lscala/reflect/TypeApply;)(v1.<cast>(Lscala/reflect/Tree;), v2.<cast>(Lscala/collection/immutable/List;));
  }
  
  public this() {
    (Lscala/runtime/AbstractFunction2;::super()V;)();
  }
}
