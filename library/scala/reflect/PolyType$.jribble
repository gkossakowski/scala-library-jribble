public final class Lscala/reflect/PolyType$; extends Lscala/runtime/AbstractFunction3; implements Lscala/ScalaObject; {
  public static Lscala/reflect/PolyType$; MODULE$ = new (Lscala/reflect/PolyType$;::this()V;)();
  
  public final Ljava/lang/String; toString() {
    return "PolyType";
  }
  
  public Lscala/Option; unapply(Lscala/reflect/PolyType; x$0) {
    Lscala/Option; $35$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$0, null))
      {
        $35$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $35$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)((new (Lscala/Tuple3;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(x$0.(Lscala/reflect/PolyType;::typeParams()Lscala/collection/immutable/List;)(), x$0.(Lscala/reflect/PolyType;::typeBounds()Lscala/collection/immutable/List;)(), x$0.(Lscala/reflect/PolyType;::resultType()Lscala/reflect/Type;)()))));
      }
    return $35$;
  }
  
  public Lscala/reflect/PolyType; apply(Lscala/collection/immutable/List; typeParams, Lscala/collection/immutable/List; typeBounds, Lscala/reflect/Type; resultType) {
    return (new (Lscala/reflect/PolyType;::this(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/Type;)V;)(typeParams, typeBounds, resultType));
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2, Ljava/lang/Object; v3) {
    return this.(Lscala/reflect/PolyType$;::apply(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/Type;)Lscala/reflect/PolyType;)(v1.<cast>(Lscala/collection/immutable/List;), v2.<cast>(Lscala/collection/immutable/List;), v3.<cast>(Lscala/reflect/Type;));
  }
  
  public this() {
    (Lscala/runtime/AbstractFunction3;::super()V;)();
  }
}
