public final class Lscala/Either$; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  public static Lscala/Either$; MODULE$ = new (Lscala/Either$;::this()V;)();
  
  public Lscala/Either$MergeableEither; either2mergeable(Lscala/Either; x) {
    return (new (Lscala/Either$MergeableEither;::this(Lscala/Either;)V;)(x));
  }
  
  public Lscala/Either; joinLeft(Lscala/Either; es) {
    return es.(Lscala/Either;::left()Lscala/Either$LeftProjection;)().(Lscala/Either$LeftProjection;::flatMap(Lscala/Function1;)Lscala/Either;)((new (Lscala/Either$$anonfun$joinLeft$1;::this()V;)()));
  }
  
  public Lscala/Either; joinRight(Lscala/Either; es) {
    return es.(Lscala/Either;::right()Lscala/Either$RightProjection;)().(Lscala/Either$RightProjection;::flatMap(Lscala/Function1;)Lscala/Either;)((new (Lscala/Either$$anonfun$joinRight$1;::this()V;)()));
  }
  
  public Ljava/lang/Object; merge(Lscala/Either; e) {
    Lscala/Either; temp142 = e;
    Ljava/lang/Object; $15$;
    if (temp142.<instanceof>(Lscala/Left;))
      {
        $15$ = temp142.<cast>(Lscala/Left;).(Lscala/Left;::a()Ljava/lang/Object;)();
      }
    else
      {
        Ljava/lang/Object; $16$;
        if (temp142.<instanceof>(Lscala/Right;))
          {
            $16$ = temp142.<cast>(Lscala/Right;).(Lscala/Right;::b()Ljava/lang/Object;)();
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp142));
          }
        $15$ = $16$;
      }
    return $15$;
  }
  
  public Lscala/Either; cond(Z; test, Lscala/Function0; right, Lscala/Function0; left) {
    Lscala/Either; $17$;
    if (test)
      {
        $17$ = (new (Lscala/Right;::this(Ljava/lang/Object;)V;)(right.(Lscala/Function0;::apply()Ljava/lang/Object;)()));
      }
    else
      {
        $17$ = (new (Lscala/Left;::this(Ljava/lang/Object;)V;)(left.(Lscala/Function0;::apply()Ljava/lang/Object;)()));
      }
    return $17$;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
  }
}
