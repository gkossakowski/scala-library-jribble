public abstract class Lscala/Enumeration$Value; extends Ljava/lang/Object; implements Lscala/math/Ordered;, Lscala/ScalaObject; {
  
  public Z; $less(Ljava/lang/Object; that) {
    return Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::$less(Lscala/math/Ordered;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Z; $greater(Ljava/lang/Object; that) {
    return Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::$greater(Lscala/math/Ordered;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Z; $less$eq(Ljava/lang/Object; that) {
    return Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::$less$eq(Lscala/math/Ordered;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Z; $greater$eq(Ljava/lang/Object; that) {
    return Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::$greater$eq(Lscala/math/Ordered;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public I; compareTo(Ljava/lang/Object; that) {
    return Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::compareTo(Lscala/math/Ordered;Ljava/lang/Object;)I;)(this, that);
  }
  
  public abstract I; id();
  
  private Lscala/Enumeration; scala$Enumeration$$outerEnum$u0020;
  
  public Lscala/Enumeration; scala$Enumeration$$outerEnum() {
    return this.(Lscala/Enumeration$Value;)scala$Enumeration$$outerEnum$u0020;
  }
  
  public I; compare(Lscala/Enumeration$Value; that) {
    return (this.(Lscala/Enumeration$Value;::id()I;)() - that.(Lscala/Enumeration$Value;::id()I;)());
  }
  
  public Z; equals(Ljava/lang/Object; other) {
    Ljava/lang/Object; temp1 = other;
    Z; $2$;
    if (temp1.<instanceof>(Lscala/Enumeration$Value;))
      {
        Lscala/Enumeration$Value; temp2 = temp1.<cast>(Lscala/Enumeration$Value;);
        Lscala/Enumeration$Value; that = temp2;
        $2$ = ((this.(Lscala/Enumeration$Value;::scala$Enumeration$$outerEnum()Lscala/Enumeration;)() == that.(Lscala/Enumeration$Value;::scala$Enumeration$$outerEnum()Lscala/Enumeration;)()) && (this.(Lscala/Enumeration$Value;::id()I;)() == that.(Lscala/Enumeration$Value;::id()I;)()));
      }
    else
      {
        $2$ = false;
      }
    return $2$;
  }
  
  public I; hashCode() {
    return this.(Lscala/runtime/ScalaRunTime$;::hash(I;)I;)(this.(Lscala/Enumeration$Value;::id()I;)());
  }
  
  public I; mask32() {
    if ((this.(Lscala/Enumeration$Value;::id()I;)() >= 32))
      {
        throw (new (Ljava/lang/IllegalArgumentException;::this()V;)());
      }
    else
      {
        
      }
    return (1 << this.(Lscala/Enumeration$Value;::id()I;)());
  }
  
  public J; mask64() {
    if ((this.(Lscala/Enumeration$Value;::id()I;)() >= 64))
      {
        throw (new (Ljava/lang/IllegalArgumentException;::this()V;)());
      }
    else
      {
        
      }
    return (1L << this.(Lscala/Enumeration$Value;::id()I;)());
  }
  
  protected Lscala/Enumeration; $outer$u0020;
  
  public Lscala/Enumeration; scala$Enumeration$Value$$$outer() {
    return this.(Lscala/Enumeration$Value;)$outer$u0020;
  }
  
  public I; compare(Ljava/lang/Object; that) {
    return this.(Lscala/Enumeration$Value;::compare(Lscala/Enumeration$Value;)I;)(that.<cast>(Lscala/Enumeration$Value;));
  }
  
  public this(Lscala/Enumeration; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/Enumeration$Value;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
    Lscala/math/Ordered$class;.(Lscala/math/Ordered$class;::$init$(Lscala/math/Ordered;)V;)(this);
    this.(Lscala/Enumeration$Value;)scala$Enumeration$$outerEnum$u0020 = $outer;
  }
}
