public abstract class Lscala/UniquenessCache; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock; rwl$u0020;
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock; rwl() {
    return this.(Lscala/UniquenessCache;)rwl$u0020;
  }
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock; rlock$u0020;
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock; rlock() {
    return this.(Lscala/UniquenessCache;)rlock$u0020;
  }
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock; wlock$u0020;
  
  private Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock; wlock() {
    return this.(Lscala/UniquenessCache;)wlock$u0020;
  }
  
  private Ljava/util/WeakHashMap; map$u0020;
  
  private Ljava/util/WeakHashMap; map() {
    return this.(Lscala/UniquenessCache;)map$u0020;
  }
  
  protected abstract Ljava/lang/Object; valueFromKey(Ljava/lang/Object; k);
  
  protected abstract Lscala/Option; keyFromValue(Ljava/lang/Object; v);
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; name$1) {
    Ljava/lang/Object; res = this.(Lscala/UniquenessCache;::cached$1(Ljava/lang/Object;)Ljava/lang/Object;)(name$1);
    Ljava/lang/Object; $1$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(res, null))
      {
        $1$ = this.(Lscala/UniquenessCache;::updateCache$1(Ljava/lang/Object;)Ljava/lang/Object;)(name$1);
      }
    else
      {
        $1$ = res;
      }
    return $1$;
  }
  
  public Lscala/Option; unapply(Ljava/lang/Object; other) {
    return this.(Lscala/UniquenessCache;::keyFromValue(Ljava/lang/Object;)Lscala/Option;)(other);
  }
  
  private final Ljava/lang/Object; cached$1(Ljava/lang/Object; name$1) {
    this.(Lscala/UniquenessCache;::rlock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;::lock()V;)();
    Ljava/lang/Object; exceptionResult1;
    try {
      Ljava/lang/ref/WeakReference; reference = this.(Lscala/UniquenessCache;::map()Ljava/util/WeakHashMap;)().(Ljava/util/WeakHashMap;::get(Ljava/lang/Object;)Ljava/lang/Object;)(name$1).<cast>(Ljava/lang/ref/WeakReference;);
      Ljava/lang/Object; $2$;
      if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(reference, null))
        {
          $2$ = null;
        }
      else
        {
          $2$ = reference.(Ljava/lang/ref/Reference;::get()Ljava/lang/Object;)();
        }
      exceptionResult1 = $2$;
    } finally {
      this.(Lscala/UniquenessCache;::rlock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;::unlock()V;)();
    }
    return exceptionResult1;
  }
  
  private final Ljava/lang/Object; updateCache$1(Ljava/lang/Object; name$1) {
    this.(Lscala/UniquenessCache;::wlock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;::lock()V;)();
    Ljava/lang/Object; exceptionResult2;
    try {
      Ljava/lang/Object; res = this.(Lscala/UniquenessCache;::cached$1(Ljava/lang/Object;)Ljava/lang/Object;)(name$1);
      Ljava/lang/Object; $3$;
      if ((res != null))
        {
          $3$ = res;
        }
      else
        {
          Ljava/lang/Object; sym = this.(Lscala/UniquenessCache;::valueFromKey(Ljava/lang/Object;)Ljava/lang/Object;)(name$1);
          this.(Lscala/UniquenessCache;::map()Ljava/util/WeakHashMap;)().(Ljava/util/WeakHashMap;::put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(name$1, (new (Ljava/lang/ref/WeakReference;::this(Ljava/lang/Object;)V;)(sym)));
          $3$ = sym;
        }
      exceptionResult2 = $3$;
    } finally {
      this.(Lscala/UniquenessCache;::wlock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;::unlock()V;)();
    }
    return exceptionResult2;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    this.(Lscala/UniquenessCache;)rwl$u0020 = (new (Ljava/util/concurrent/locks/ReentrantReadWriteLock;::this()V;)());
    this.(Lscala/UniquenessCache;)rlock$u0020 = this.(Lscala/UniquenessCache;::rwl()Ljava/util/concurrent/locks/ReentrantReadWriteLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock;::readLock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;)();
    this.(Lscala/UniquenessCache;)wlock$u0020 = this.(Lscala/UniquenessCache;::rwl()Ljava/util/concurrent/locks/ReentrantReadWriteLock;)().(Ljava/util/concurrent/locks/ReentrantReadWriteLock;::writeLock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;)();
    this.(Lscala/UniquenessCache;)map$u0020 = (new (Ljava/util/WeakHashMap;::this()V;)());
  }
}
