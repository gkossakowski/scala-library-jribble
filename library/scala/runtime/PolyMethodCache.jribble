public final class Lscala/runtime/PolyMethodCache; extends Lscala/runtime/MethodCache; implements Lscala/ScalaObject; {
  
  private Lscala/runtime/MethodCache; next;
  
  private Ljava/lang/Class; receiver;
  
  private Ljava/lang/reflect/Method; method;
  
  private I; complexity;
  
  private Ljava/lang/reflect/Method; findInternal(Ljava/lang/Class; forReceiver) {
    Ljava/lang/reflect/Method; $1$;
    if ((forReceiver == this.(Lscala/runtime/PolyMethodCache;)receiver))
      {
        $1$ = this.(Lscala/runtime/PolyMethodCache;)method;
      }
    else
      {
        Lscala/runtime/MethodCache; temp1 = this.(Lscala/runtime/PolyMethodCache;)next;
        Ljava/lang/reflect/Method; $2$;
        if (temp1.<instanceof>(Lscala/runtime/PolyMethodCache;))
          {
            $2$ = temp1.<cast>(Lscala/runtime/PolyMethodCache;).(Lscala/runtime/PolyMethodCache;::findInternal(Ljava/lang/Class;)Ljava/lang/reflect/Method;)(forReceiver);
          }
        else
          {
            $2$ = this.(Lscala/runtime/PolyMethodCache;)next.(Lscala/runtime/MethodCache;::find(Ljava/lang/Class;)Ljava/lang/reflect/Method;)(forReceiver);
          }
        $1$ = $2$;
      }
    return $1$;
  }
  
  public Ljava/lang/reflect/Method; find(Ljava/lang/Class; forReceiver) {
    return this.(Lscala/runtime/PolyMethodCache;::findInternal(Ljava/lang/Class;)Ljava/lang/reflect/Method;)(forReceiver);
  }
  
  private final I; MaxComplexity() {
    return 160;
  }
  
  public Lscala/runtime/MethodCache; add(Ljava/lang/Class; forReceiver, Ljava/lang/reflect/Method; forMethod) {
    Lscala/runtime/MethodCache; $3$;
    if ((this.(Lscala/runtime/PolyMethodCache;)complexity < 160))
      {
        $3$ = (new (Lscala/runtime/PolyMethodCache;::this(Lscala/runtime/MethodCache;Ljava/lang/Class;Ljava/lang/reflect/Method;I;)V;)(this, forReceiver, forMethod, (this.(Lscala/runtime/PolyMethodCache;)complexity + 1)));
      }
    else
      {
        $3$ = (new (Lscala/runtime/MegaMethodCache;::this(Ljava/lang/String;Ljava/lang/Class;[)V;)(forMethod.(Ljava/lang/reflect/Method;::getName()Ljava/lang/String;)(), forMethod.(Ljava/lang/reflect/Method;::getParameterTypes()Ljava/lang/Class;[)()));
      }
    return $3$;
  }
  
  public this(Lscala/runtime/MethodCache; next, Ljava/lang/Class; receiver, Ljava/lang/reflect/Method; method, I; complexity) {
    this.(Lscala/runtime/PolyMethodCache;)next = next;
    this.(Lscala/runtime/PolyMethodCache;)receiver = receiver;
    this.(Lscala/runtime/PolyMethodCache;)method = method;
    this.(Lscala/runtime/PolyMethodCache;)complexity = complexity;
    (Lscala/runtime/MethodCache;::super()V;)();
  }
}
