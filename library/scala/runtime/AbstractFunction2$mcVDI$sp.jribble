public abstract class Lscala/runtime/AbstractFunction2$mcVDI$sp; extends Lscala/runtime/AbstractFunction2; implements Lscala/Function2$mcVDI$sp; {
  
  public V; apply(D; v1, I; v2) {
    Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::apply(Lscala/Function2$mcVDI$sp;D;I;)V;)(this, v1, v2);
  }
  
  public Lscala/Function1; curried() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::curried(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; curried$mcVDI$sp() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::curried$mcVDI$sp(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; curry() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::curry(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; curry$mcVDI$sp() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::curry$mcVDI$sp(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; tupled() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::tupled(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; tupled$mcVDI$sp() {
    return Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::tupled$mcVDI$sp(Lscala/Function2$mcVDI$sp;)Lscala/Function1;)(this);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2) {
    this.(Lscala/Function2$mcVDI$sp;::apply(D;I;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToDouble(Ljava/lang/Object;)D;)(v1), Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(v2));
    return Lscala/runtime/BoxedUnit;.UNIT;
  }
  
  public this() {
    (Lscala/runtime/AbstractFunction2;::super()V;)();
    Lscala/Function2$mcVDI$sp$class;.(Lscala/Function2$mcVDI$sp$class;::$init$(Lscala/Function2$mcVDI$sp;)V;)(this);
  }
}
