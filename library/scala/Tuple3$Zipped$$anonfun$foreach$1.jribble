public final class Lscala/Tuple3$Zipped$$anonfun$foreach$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; el1) {
    Ljava/lang/Object; $8$;
    if ((this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems2$7.(Lscala/collection/Iterator;::hasNext()Z;)() && this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems3$7.(Lscala/collection/Iterator;::hasNext()Z;)()))
      {
        $8$ = this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)f$6.(Lscala/Function3;::apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(el1, this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems2$7.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)(), this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems3$7.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)());
      }
    else
      {
        $8$ = Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
      }
    return $8$;
  }
  
  private Lscala/Function3; f$6;
  
  private Lscala/collection/Iterator; elems2$7;
  
  private Lscala/collection/Iterator; elems3$7;
  
  public this(Lscala/Tuple3$Zipped; $outer, Lscala/Function3; f$6, Lscala/collection/Iterator; elems2$7, Lscala/collection/Iterator; elems3$7) {
    this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)f$6 = f$6;
    this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems2$7 = elems2$7;
    this.(Lscala/Tuple3$Zipped$$anonfun$foreach$1;)elems3$7 = elems3$7;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
