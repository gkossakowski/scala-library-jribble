public final class Lscala/Tuple3$Zipped$$anonfun$map$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; el1) {
    Ljava/lang/Object; $4$;
    if ((this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems2$2.(Lscala/collection/Iterator;::hasNext()Z;)() && this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems3$2.(Lscala/collection/Iterator;::hasNext()Z;)()))
      {
        $4$ = this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)b$1.(Lscala/collection/mutable/Builder;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/Builder;)(this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)f$1.(Lscala/Function3;::apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(el1, this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems2$2.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)(), this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems3$2.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()));
      }
    else
      {
        $4$ = Lscala/runtime/BoxedUnit;.UNIT;
      }
    return $4$;
  }
  
  private Lscala/Function3; f$1;
  
  private Lscala/collection/mutable/Builder; b$1;
  
  private Lscala/collection/Iterator; elems2$2;
  
  private Lscala/collection/Iterator; elems3$2;
  
  public this(Lscala/Tuple3$Zipped; $outer, Lscala/Function3; f$1, Lscala/collection/mutable/Builder; b$1, Lscala/collection/Iterator; elems2$2, Lscala/collection/Iterator; elems3$2) {
    this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)f$1 = f$1;
    this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)b$1 = b$1;
    this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems2$2 = elems2$2;
    this.(Lscala/Tuple3$Zipped$$anonfun$map$1;)elems3$2 = elems3$2;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
