public final class Lscala/xml/Utility$; extends Ljava/lang/Object; implements Lscala/xml/parsing/TokenTests;, Lscala/ScalaObject; {
  public static Lscala/xml/Utility$; MODULE$ = new (Lscala/xml/Utility$;::this()V;)();
  
  public final Z; isSpace(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public final Z; isSpace(Lscala/collection/Seq; cs) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, cs);
  }
  
  public Z; isAlpha(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlpha(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isAlphaDigit(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlphaDigit(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isNameChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isNameStart(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameStart(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isName(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isName(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; isPubIDChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isPubIDChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isValidIANAEncoding(Lscala/collection/Seq; ianaEncoding) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isValidIANAEncoding(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, ianaEncoding);
  }
  
  public Z; checkSysID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkSysID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; checkPubID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkPubID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; toXML$default$7() {
    return false;
  }
  
  public Z; toXML$default$6() {
    return false;
  }
  
  public Z; toXML$default$5() {
    return true;
  }
  
  public Z; toXML$default$4() {
    return false;
  }
  
  public Lscala/collection/mutable/StringBuilder; toXML$default$3() {
    return (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
  }
  
  public Lscala/xml/NamespaceBinding; toXML$default$2() {
    return Lscala/xml/TopScope$;.MODULE$;
  }
  
  public Z; sequenceToXML$default$7() {
    return false;
  }
  
  public Z; sequenceToXML$default$6() {
    return false;
  }
  
  public Z; sequenceToXML$default$5() {
    return true;
  }
  
  public Z; sequenceToXML$default$4() {
    return false;
  }
  
  public Lscala/collection/mutable/StringBuilder; sequenceToXML$default$3() {
    return (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
  }
  
  public Lscala/xml/NamespaceBinding; sequenceToXML$default$2() {
    return Lscala/xml/TopScope$;.MODULE$;
  }
  
  public Ljava/lang/String; implicitSbToString(Lscala/collection/mutable/StringBuilder; sb) {
    return sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)();
  }
  
  public Ljava/lang/String; sbToString(Lscala/Function1; f) {
    Lscala/collection/mutable/StringBuilder; sb = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
    f.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(sb);
    return sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)();
  }
  
  public Z; isAtomAndNotText(Lscala/xml/Node; x) {
    return (x.(Lscala/xml/Node;::isAtom()Z;)() && !(x.<instanceof>(Lscala/xml/Text;)));
  }
  
  public Lscala/xml/Node; trim(Lscala/xml/Node; x) {
    Lscala/xml/Node; temp1 = x;
    Lscala/Option; temp2 = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::unapplySeq(Lscala/xml/Node;)Lscala/Option;)(temp1);
    Lscala/xml/Node; $1$;
    if (!(temp2.(Lscala/Option;::isEmpty()Z;)()))
      {
        Lscala/Tuple5; temp3 = temp2.(Lscala/Option;::get()Ljava/lang/Object;)().<cast>(Lscala/Tuple5;);
        Ljava/lang/String; temp4 = temp3.(Lscala/Tuple5;::_1()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Ljava/lang/String; temp5 = temp3.(Lscala/Tuple5;::_2()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Lscala/xml/MetaData; temp6 = temp3.(Lscala/Tuple5;::_3()Ljava/lang/Object;)().<cast>(Lscala/xml/MetaData;);
        Lscala/xml/NamespaceBinding; temp7 = temp3.(Lscala/Tuple5;::_4()Ljava/lang/Object;)().<cast>(Lscala/xml/NamespaceBinding;);
        Lscala/collection/Seq; temp8 = temp3.(Lscala/Tuple5;::_5()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
        Z; $2$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp8, null))
          {
            $2$ = false;
          }
        else
          {
            $2$ = (temp8.(Lscala/collection/SeqLike;::lengthCompare(I;)I;)(0) >= 0);
          }
        Lscala/xml/Node; $3$;
        if ($2$)
          {
            $3$ = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::apply(Ljava/lang/String;Ljava/lang/String;Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;Lscala/collection/Seq;)Lscala/xml/Elem;)(temp4, temp5, temp6, temp7, temp8.(Lscala/collection/TraversableLike;::flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/xml/Utility$$anonfun$trim$1;::this()V;)()), Lscala/collection/Seq$;.MODULE$.(Lscala/collection/Seq$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/Seq;));
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp1));
          }
        $1$ = $3$;
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp1));
      }
    return $1$;
  }
  
  public Lscala/collection/Seq; trimProper(Lscala/xml/Node; x) {
    Lscala/xml/Node; temp10 = x;
    Lscala/Option; temp11 = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::unapplySeq(Lscala/xml/Node;)Lscala/Option;)(temp10);
    Lscala/collection/Seq; $4$;
    if (!(temp11.(Lscala/Option;::isEmpty()Z;)()))
      {
        Lscala/Tuple5; temp12 = temp11.(Lscala/Option;::get()Ljava/lang/Object;)().<cast>(Lscala/Tuple5;);
        Ljava/lang/String; temp13 = temp12.(Lscala/Tuple5;::_1()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Ljava/lang/String; temp14 = temp12.(Lscala/Tuple5;::_2()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Lscala/xml/MetaData; temp15 = temp12.(Lscala/Tuple5;::_3()Ljava/lang/Object;)().<cast>(Lscala/xml/MetaData;);
        Lscala/xml/NamespaceBinding; temp16 = temp12.(Lscala/Tuple5;::_4()Ljava/lang/Object;)().<cast>(Lscala/xml/NamespaceBinding;);
        Lscala/collection/Seq; temp17 = temp12.(Lscala/Tuple5;::_5()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
        Z; $5$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp17, null))
          {
            $5$ = false;
          }
        else
          {
            $5$ = (temp17.(Lscala/collection/SeqLike;::lengthCompare(I;)I;)(0) >= 0);
          }
        Lscala/collection/Seq; $6$;
        if ($5$)
          {
            $6$ = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::apply(Ljava/lang/String;Ljava/lang/String;Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;Lscala/collection/Seq;)Lscala/xml/Elem;)(temp13, temp14, temp15, temp16, temp17.(Lscala/collection/TraversableLike;::flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/xml/Utility$$anonfun$trimProper$1;::this()V;)()), Lscala/collection/Seq$;.MODULE$.(Lscala/collection/Seq$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/Seq;));
          }
        else
          {
            Lscala/collection/Seq; $7$;
            if (temp10.<instanceof>(Lscala/xml/Text;))
              {
                Lscala/xml/Text; temp19 = temp10.<cast>(Lscala/xml/Text;);
                Ljava/lang/String; temp20 = temp19.(Lscala/xml/Text;::_data()Ljava/lang/String;)();
                Ljava/lang/String; s = temp20;
                $7$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent1(Ljava/lang/String;)Lscala/collection/Seq;)(s);
              }
            else
              {
                $7$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent2$percent1()Lscala/collection/Seq;)();
              }
            $6$ = $7$;
          }
        $4$ = $6$;
      }
    else
      {
        Lscala/collection/Seq; $8$;
        if (temp10.<instanceof>(Lscala/xml/Text;))
          {
            $8$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent1(Ljava/lang/String;)Lscala/collection/Seq;)(temp10.<cast>(Lscala/xml/Text;).(Lscala/xml/Text;::_data()Ljava/lang/String;)());
          }
        else
          {
            $8$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent2$percent1()Lscala/collection/Seq;)();
          }
        $4$ = $8$;
      }
    return $4$;
  }
  
  public Lscala/xml/MetaData; sort(Lscala/xml/MetaData; md) {
    Lscala/xml/MetaData; $9$;
    if (((md == Lscala/xml/Null$;.MODULE$) || (md.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)() == Lscala/xml/Null$;.MODULE$)))
      {
        $9$ = md;
      }
    else
      {
        Ljava/lang/String; key$1 = md.(Lscala/xml/MetaData;::key()Ljava/lang/String;)();
        Lscala/xml/MetaData; smaller = this.(Lscala/xml/Utility$;::sort(Lscala/xml/MetaData;)Lscala/xml/MetaData;)(md.(Lscala/xml/MetaData;::filter(Lscala/Function1;)Lscala/xml/MetaData;)((new (Lscala/xml/Utility$$anonfun$1;::this(Ljava/lang/String;)V;)(key$1))));
        Lscala/xml/MetaData; greater = this.(Lscala/xml/Utility$;::sort(Lscala/xml/MetaData;)Lscala/xml/MetaData;)(md.(Lscala/xml/MetaData;::filter(Lscala/Function1;)Lscala/xml/MetaData;)((new (Lscala/xml/Utility$$anonfun$2;::this(Ljava/lang/String;)V;)(key$1))));
        Lscala/xml/MetaData; qual$1 = smaller.(Lscala/xml/MetaData;::append(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;)Lscala/xml/MetaData;)(Lscala/xml/Null$;.MODULE$, smaller.(Lscala/xml/MetaData;::append$default$2()Lscala/xml/NamespaceBinding;)());
        Lscala/xml/MetaData; x$6 = md.(Lscala/xml/MetaData;::copy(Lscala/xml/MetaData;)Lscala/xml/MetaData;)(greater);
        Lscala/xml/NamespaceBinding; x$7 = qual$1.(Lscala/xml/MetaData;::append$default$2()Lscala/xml/NamespaceBinding;)();
        $9$ = qual$1.(Lscala/xml/MetaData;::append(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;)Lscala/xml/MetaData;)(x$6, x$7);
      }
    return $9$;
  }
  
  public Lscala/xml/Node; sort(Lscala/xml/Node; n) {
    Lscala/xml/Node; temp23 = n;
    Lscala/Option; temp24 = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::unapplySeq(Lscala/xml/Node;)Lscala/Option;)(temp23);
    Lscala/xml/Node; $10$;
    if (!(temp24.(Lscala/Option;::isEmpty()Z;)()))
      {
        Lscala/Tuple5; temp25 = temp24.(Lscala/Option;::get()Ljava/lang/Object;)().<cast>(Lscala/Tuple5;);
        Ljava/lang/String; temp26 = temp25.(Lscala/Tuple5;::_1()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Ljava/lang/String; temp27 = temp25.(Lscala/Tuple5;::_2()Ljava/lang/Object;)().<cast>(Ljava/lang/String;);
        Lscala/xml/MetaData; temp28 = temp25.(Lscala/Tuple5;::_3()Ljava/lang/Object;)().<cast>(Lscala/xml/MetaData;);
        Lscala/xml/NamespaceBinding; temp29 = temp25.(Lscala/Tuple5;::_4()Ljava/lang/Object;)().<cast>(Lscala/xml/NamespaceBinding;);
        Lscala/collection/Seq; temp30 = temp25.(Lscala/Tuple5;::_5()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
        Z; $11$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp30, null))
          {
            $11$ = false;
          }
        else
          {
            $11$ = (temp30.(Lscala/collection/SeqLike;::lengthCompare(I;)I;)(0) >= 0);
          }
        Lscala/xml/Node; $12$;
        if ($11$)
          {
            $12$ = Lscala/xml/Elem$;.MODULE$.(Lscala/xml/Elem$;::apply(Ljava/lang/String;Ljava/lang/String;Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;Lscala/collection/Seq;)Lscala/xml/Elem;)(temp26, temp27, this.(Lscala/xml/Utility$;::sort(Lscala/xml/MetaData;)Lscala/xml/MetaData;)(temp28), temp29, temp30.(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/xml/Utility$$anonfun$sort$1;::this()V;)()), Lscala/collection/Seq$;.MODULE$.(Lscala/collection/Seq$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/Seq;));
          }
        else
          {
            $12$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent2()Lscala/xml/Node;)();
          }
        $10$ = $12$;
      }
    else
      {
        $10$ = Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent2()Lscala/xml/Node;)();
      }
    return $10$;
  }
  
  public final Ljava/lang/String; escape(Ljava/lang/String; text$1) {
    return this.(Lscala/xml/Utility$;::sbToString(Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/Utility$$anonfun$escape$1;::this(Ljava/lang/String;)V;)(text$1)));
  }
  
  public final Lscala/collection/mutable/StringBuilder; escape(Ljava/lang/String; text, Lscala/collection/mutable/StringBuilder; s) {
    I; len = text.(Ljava/lang/String;::length()I;)();
    I; pos = 0;
    while$1: while(true) {
      if ((pos < len))
        {
          {
            {
              C; temp35 = text.(Ljava/lang/String;::charAt(I;)C;)(pos);
              I; $13$ = temp35.<cast>(I;);
              Ljava/lang/Object; $14$;
              switch ($13$) {
                9: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('\011');
                  break;
                }
                
                10: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('\012');
                  break;
                }
                
                13: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('\015');
                  break;
                }
                
                34: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("&quot;");
                  break;
                }
                
                38: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("&amp;");
                  break;
                }
                
                60: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("&lt;");
                  break;
                }
                
                62: {
                  $14$ = s.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("&gt;");
                  break;
                }
                
                default: {
                  C; c = temp35;
                  Ljava/lang/Object; $15$;
                  if ((c >= ' '))
                    {
                      $15$ = s.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(c);
                    }
                  else
                    {
                      $15$ = Lscala/runtime/BoxedUnit;.UNIT;
                    }
                  $14$ = $15$;
                  break;
                }
                
              }
            }
            pos = (pos + 1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    return s;
  }
  
  public final Lscala/collection/mutable/StringBuilder; unescape(Ljava/lang/String; ref, Lscala/collection/mutable/StringBuilder; s$2) {
    return Lscala/xml/Utility$Escapes$;.MODULE$.(Lscala/xml/Utility$Escapes$;::unescMap()Lscala/collection/immutable/Map;)().(Lscala/collection/MapLike;::get(Ljava/lang/Object;)Lscala/Option;)(ref).(Lscala/Option;::map(Lscala/Function1;)Lscala/Option;)((new (Lscala/xml/Utility$$anonfun$unescape$1;::this(Lscala/collection/mutable/StringBuilder;)V;)(s$2))).(Lscala/Option;::orNull(Lscala/Predef$$less$colon$less;)Ljava/lang/Object;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::conforms()Lscala/Predef$$less$colon$less;)()).<cast>(Lscala/collection/mutable/StringBuilder;);
  }
  
  public Lscala/collection/mutable/Set; collectNamespaces(Lscala/collection/Seq; nodes) {
    return nodes.(Lscala/collection/TraversableOnce;::foldLeft(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)((new (Lscala/collection/mutable/HashSet;::this()V;)()), (new (Lscala/xml/Utility$$anonfun$collectNamespaces$1;::this()V;)())).<cast>(Lscala/collection/mutable/Set;);
  }
  
  public V; collectNamespaces(Lscala/xml/Node; n$1, Lscala/collection/mutable/Set; set$1) {
    if (n$1.(Lscala/xml/Node;::doCollectNamespaces()Z;)())
      {
        set$1.(Lscala/collection/mutable/SetLike;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/SetLike;)(n$1.(Lscala/xml/Node;::namespace()Ljava/lang/String;)());
        n$1.(Lscala/xml/Node;::attributes()Lscala/xml/MetaData;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/Utility$$anonfun$collectNamespaces$2;::this(Lscala/xml/Node;Lscala/collection/mutable/Set;)V;)(n$1, set$1)));
        n$1.(Lscala/xml/Node;::child()Lscala/collection/Seq;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/Utility$$anonfun$collectNamespaces$3;::this(Lscala/collection/mutable/Set;)V;)(set$1)));
      }
    else
      {
        
      }
  }
  
  public Lscala/collection/mutable/StringBuilder; toXML(Lscala/xml/Node; x$8, Lscala/xml/NamespaceBinding; pscope, Lscala/collection/mutable/StringBuilder; sb$2, Z; stripComments$2, Z; decodeEntities$2, Z; preserveWhitespace$2, Z; minimizeTags$2) {
    Lscala/xml/Node; temp38 = x$8;
    Lscala/collection/mutable/StringBuilder; $16$;
    if (temp38.<instanceof>(Lscala/xml/Comment;))
      {
        Lscala/collection/mutable/StringBuilder; $17$;
        if (!(stripComments$2))
          {
            $17$ = temp38.<cast>(Lscala/xml/Comment;).(Lscala/xml/Comment;::buildString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb$2);
          }
        else
          {
            $17$ = sb$2;
          }
        $16$ = $17$;
      }
    else
      {
        Lscala/collection/mutable/StringBuilder; $18$;
        if (temp38.<instanceof>(Lscala/xml/SpecialNode;))
          {
            $18$ = temp38.<cast>(Lscala/xml/SpecialNode;).(Lscala/xml/SpecialNode;::buildString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb$2);
          }
        else
          {
            Lscala/collection/mutable/StringBuilder; $19$;
            if (temp38.<instanceof>(Lscala/xml/Group;))
              {
                temp38.<cast>(Lscala/xml/Group;).(Lscala/xml/Group;::nodes()Lscala/collection/Seq;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/Utility$$anonfun$toXML$1;::this(Lscala/xml/Node;Lscala/collection/mutable/StringBuilder;Z;Z;Z;Z;)V;)(x$8, sb$2, stripComments$2, decodeEntities$2, preserveWhitespace$2, minimizeTags$2)));
                $19$ = sb$2;
              }
            else
              {
                sb$2.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('<');
                x$8.(Lscala/xml/Node;::nameToString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb$2);
                if ((x$8.(Lscala/xml/Node;::attributes()Lscala/xml/MetaData;)() != null))
                  {
                    x$8.(Lscala/xml/Node;::attributes()Lscala/xml/MetaData;)().(Lscala/xml/MetaData;::buildString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb$2);
                  }
                else
                  {
                    
                  }
                x$8.(Lscala/xml/Node;::scope()Lscala/xml/NamespaceBinding;)().(Lscala/xml/NamespaceBinding;::buildString(Lscala/collection/mutable/StringBuilder;Lscala/xml/NamespaceBinding;)V;)(sb$2, pscope);
                Lscala/collection/mutable/StringBuilder; $20$;
                if ((x$8.(Lscala/xml/Node;::child()Lscala/collection/Seq;)().(Lscala/collection/IterableLike;::isEmpty()Z;)() && minimizeTags$2))
                  {
                    $20$ = sb$2.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(" />");
                  }
                else
                  {
                    sb$2.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('>');
                    this.(Lscala/xml/Utility$;::sequenceToXML(Lscala/collection/Seq;Lscala/xml/NamespaceBinding;Lscala/collection/mutable/StringBuilder;Z;Z;Z;Z;)V;)(x$8.(Lscala/xml/Node;::child()Lscala/collection/Seq;)(), x$8.(Lscala/xml/Node;::scope()Lscala/xml/NamespaceBinding;)(), sb$2, stripComments$2, decodeEntities$2, preserveWhitespace$2, minimizeTags$2);
                    sb$2.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("</");
                    x$8.(Lscala/xml/Node;::nameToString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb$2);
                    $20$ = sb$2.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('>');
                  }
                $19$ = $20$;
              }
            $18$ = $19$;
          }
        $16$ = $18$;
      }
    return $16$;
  }
  
  public V; sequenceToXML(Lscala/collection/Seq; children, Lscala/xml/NamespaceBinding; pscope$1, Lscala/collection/mutable/StringBuilder; sb$1, Z; stripComments$1, Z; decodeEntities$1, Z; preserveWhitespace$1, Z; minimizeTags$1) {
    if (children.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        return;
      }
    else
      {
        if (children.(Lscala/collection/IterableLike;::forall(Lscala/Function1;)Z;)((new (Lscala/xml/Utility$$anonfun$sequenceToXML$1;::this()V;)())))
          {
            Lscala/collection/Iterator; it = children.(Lscala/collection/IterableLike;::iterator()Lscala/collection/Iterator;)();
            Lscala/xml/Node; f = it.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)().<cast>(Lscala/xml/Node;);
            this.(Lscala/xml/Utility$;::toXML(Lscala/xml/Node;Lscala/xml/NamespaceBinding;Lscala/collection/mutable/StringBuilder;Z;Z;Z;Z;)Lscala/collection/mutable/StringBuilder;)(f, pscope$1, sb$1, stripComments$1, decodeEntities$1, preserveWhitespace$1, minimizeTags$1);
            while$2: while(true) {
              if (it.(Lscala/collection/Iterator;::hasNext()Z;)())
                {
                  {
                    Lscala/xml/Node; x = it.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)().<cast>(Lscala/xml/Node;);
                    sb$1.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(' ');
                    this.(Lscala/xml/Utility$;::toXML(Lscala/xml/Node;Lscala/xml/NamespaceBinding;Lscala/collection/mutable/StringBuilder;Z;Z;Z;Z;)Lscala/collection/mutable/StringBuilder;)(x, pscope$1, sb$1, stripComments$1, decodeEntities$1, preserveWhitespace$1, minimizeTags$1);
                  }
                  continue while$2;
                }
              else
                {
                  
                }
              break;
            }
          }
        else
          {
            children.(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/Utility$$anonfun$sequenceToXML$2;::this(Lscala/xml/NamespaceBinding;Lscala/collection/mutable/StringBuilder;Z;Z;Z;Z;)V;)(pscope$1, sb$1, stripComments$1, decodeEntities$1, preserveWhitespace$1, minimizeTags$1)));
          }
      }
  }
  
  public final Lscala/Option; prefix(Ljava/lang/String; name) {
    I; temp44 = name.(Ljava/lang/String;::indexOf(I;)I;)(58);
    Lscala/Option; $21$;
    if ((temp44 == -1))
      {
        $21$ = Lscala/None$;.MODULE$;
      }
    else
      {
        $21$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(name.(Ljava/lang/String;::substring(I;I;)Ljava/lang/String;)(0, temp44)));
      }
    return $21$;
  }
  
  public I; hashCode(Ljava/lang/String; pre, Ljava/lang/String; label, I; attribHashCode, I; scpeHash, Lscala/collection/Seq; children) {
    I; $22$;
    if ((pre != null))
      {
        $22$ = ((41 * Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)(pre)) % 7);
      }
    else
      {
        $22$ = 0;
      }
    I; c = 0;
    Lscala/collection/Iterator; i = children.(Lscala/collection/IterableLike;::iterator()Lscala/collection/Iterator;)();
    while$3: while(true) {
      if (i.(Lscala/collection/Iterator;::hasNext()Z;)())
        {
          c = ((c * 41) + Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)(i.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()));
          continue while$3;
        }
      else
        {
          
        }
      break;
    }
    return (((($22$ + (Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)(label) * 53)) + (attribHashCode * 7)) + (scpeHash * 31)) + c);
  }
  
  public Ljava/lang/String; appendQuoted(Ljava/lang/String; s$1) {
    return this.(Lscala/xml/Utility$;::sbToString(Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/Utility$$anonfun$appendQuoted$1;::this(Ljava/lang/String;)V;)(s$1)));
  }
  
  public Lscala/collection/mutable/StringBuilder; appendQuoted(Ljava/lang/String; s, Lscala/collection/mutable/StringBuilder; sb) {
    C; $23$;
    if (Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(s).(Lscala/collection/SeqLike;::contains(Ljava/lang/Object;)Z;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)('\"')))
      {
        $23$ = '\'';
      }
    else
      {
        $23$ = '\"';
      }
    C; ch = $23$;
    return sb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(ch).(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(s).(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(ch);
  }
  
  public Lscala/collection/mutable/StringBuilder; appendEscapedQuoted(Ljava/lang/String; s, Lscala/collection/mutable/StringBuilder; sb$3) {
    sb$3.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('\"');
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(s).(Lscala/collection/IndexedSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/Utility$$anonfun$appendEscapedQuoted$1;::this(Lscala/collection/mutable/StringBuilder;)V;)(sb$3)));
    return sb$3.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('\"');
  }
  
  public Ljava/lang/String; getName(Ljava/lang/String; s, I; index) {
    Ljava/lang/String; $24$;
    if ((index >= s.(Ljava/lang/String;::length()I;)()))
      {
        $24$ = null;
      }
    else
      {
        Ljava/lang/String; xs = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(s).(Lscala/collection/IndexedSeqOptimized;::drop(I;)Ljava/lang/Object;)(index).<cast>(Ljava/lang/String;);
        Ljava/lang/String; $25$;
        if ((Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(xs).(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && this.(Lscala/xml/parsing/TokenTests;::isNameStart(C;)Z;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(xs).(Lscala/collection/IndexedSeqOptimized;::head()Ljava/lang/Object;)()))))
          {
            $25$ = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(xs).(Lscala/collection/IndexedSeqOptimized;::takeWhile(Lscala/Function1;)Ljava/lang/Object;)((new (Lscala/xml/Utility$$anonfun$getName$1;::this()V;)())).<cast>(Ljava/lang/String;);
          }
        else
          {
            $25$ = "";
          }
        $24$ = $25$;
      }
    return $24$;
  }
  
  public Ljava/lang/String; checkAttributeValue(Ljava/lang/String; value) {
    I; i = 0;
    while$4: while(true) {
      if ((i < value.(Ljava/lang/String;::length()I;)()))
        {
          {
            {
              C; temp46 = value.(Ljava/lang/String;::charAt(I;)C;)(i);
              I; $26$ = temp46.<cast>(I;);
              switch ($26$) {
                38: {
                  Ljava/lang/String; n = this.(Lscala/xml/Utility$;::getName(Ljava/lang/String;I;)Ljava/lang/String;)(value, (i + 1));
                  if ((n == null))
                    {
                      return (("malformed entity reference in attribute value [" + value) + "]");
                    }
                  else
                    {
                      
                    }
                  i = ((i + n.(Ljava/lang/String;::length()I;)()) + 1);
                  if (((i >= value.(Ljava/lang/String;::length()I;)()) || (value.(Ljava/lang/String;::charAt(I;)C;)(i) != ';')))
                    {
                      return (("malformed entity reference in attribute value [" + value) + "]");
                    }
                  else
                    {
                      
                    }
                  break;
                }
                
                60: {
                  return "< not allowed in attribute value";
                  break;
                }
                
                default: {
                  
                  break;
                }
                
              }
            }
            i = (i + 1);
          }
          continue while$4;
        }
      else
        {
          
        }
      break;
    }
    return null;
  }
  
  public Lscala/collection/Seq; parseAttributeValue(Ljava/lang/String; value) {
    Lscala/collection/mutable/StringBuilder; sb = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
    Lscala/collection/mutable/StringBuilder; rfb = null;
    Lscala/xml/NodeBuffer; nb = (new (Lscala/xml/NodeBuffer;::this()V;)());
    Lscala/collection/Iterator; it$1 = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(value).(Lscala/collection/IndexedSeqLike;::iterator()Lscala/collection/Iterator;)();
    while$5: while(true) {
      if (it$1.(Lscala/collection/Iterator;::hasNext()Z;)())
        {
          {
            Lscala/runtime/CharRef; c$1 = (new (Lscala/runtime/CharRef;::this(C;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(it$1.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)())));
            Ljava/lang/Object; $27$;
            if ((c$1.(Lscala/runtime/CharRef;)elem == '&'))
              {
                c$1.(Lscala/runtime/CharRef;)elem = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(it$1.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)());
                Ljava/lang/Object; $28$;
                if ((c$1.(Lscala/runtime/CharRef;)elem == '#'))
                  {
                    c$1.(Lscala/runtime/CharRef;)elem = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(it$1.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)());
                    Ljava/lang/String; theChar = this.(Lscala/xml/Utility$;::parseCharRef(Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/Utility$$anonfun$4;::this(Lscala/runtime/CharRef;)V;)(c$1)), (new (Lscala/xml/Utility$$anonfun$5;::this(Lscala/collection/Iterator;Lscala/runtime/CharRef;)V;)(it$1, c$1)), (new (Lscala/xml/Utility$$anonfun$6;::this()V;)()));
                    $28$ = sb.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(theChar);
                  }
                else
                  {
                    if ((rfb == null))
                      {
                        rfb = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
                      }
                    else
                      {
                        
                      }
                    rfb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(c$1.(Lscala/runtime/CharRef;)elem);
                    c$1.(Lscala/runtime/CharRef;)elem = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(it$1.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)());
                    while$6: while(true) {
                      if ((c$1.(Lscala/runtime/CharRef;)elem != ';'))
                        {
                          {
                            rfb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(c$1.(Lscala/runtime/CharRef;)elem);
                            c$1.(Lscala/runtime/CharRef;)elem = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(it$1.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)());
                          }
                          continue while$6;
                        }
                      else
                        {
                          
                        }
                      break;
                    }
                    Ljava/lang/String; ref = rfb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)();
                    rfb.(Lscala/collection/mutable/StringBuilder;::setLength(I;)V;)(0);
                    Lscala/collection/mutable/StringBuilder; temp47 = this.(Lscala/xml/Utility$;::unescape(Ljava/lang/String;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(ref, sb);
                    Ljava/lang/Object; $29$;
                    if ((temp47 == null))
                      {
                        if ((sb.(Lscala/collection/mutable/StringBuilder;::length()I;)() > 0))
                          {
                            nb.(Lscala/collection/mutable/ArrayBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;)((new (Lscala/xml/Text;::this(Ljava/lang/String;)V;)(sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)())));
                            sb.(Lscala/collection/mutable/StringBuilder;::setLength(I;)V;)(0);
                          }
                        else
                          {
                            
                          }
                        $29$ = nb.(Lscala/collection/mutable/ArrayBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;)((new (Lscala/xml/EntityRef;::this(Ljava/lang/String;)V;)(sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)())));
                      }
                    else
                      {
                        $29$ = Lscala/runtime/BoxedUnit;.UNIT;
                      }
                    $28$ = $29$;
                  }
                $27$ = $28$;
              }
            else
              {
                $27$ = sb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(c$1.(Lscala/runtime/CharRef;)elem);
              }
          }
          continue while$5;
        }
      else
        {
          
        }
      break;
    }
    if ((sb.(Lscala/collection/mutable/StringBuilder;::length()I;)() > 0))
      {
        Lscala/xml/Text; x = (new (Lscala/xml/Text;::this(Ljava/lang/String;)V;)(sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)()));
        Lscala/collection/mutable/ArrayBuffer; $30$;
        if ((nb.(Lscala/collection/mutable/ResizableArray;::length()I;)() == 0))
          {
            return x;
          }
        else
          {
            $30$ = nb.(Lscala/collection/mutable/ArrayBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;)(x);
          }
      }
    else
      {
        
      }
    return nb;
  }
  
  public Ljava/lang/String; parseCharRef(Lscala/Function0; ch, Lscala/Function0; nextch, Lscala/Function1; reportSyntaxError) {
    nextch.(Lscala/Function0;::apply()Ljava/lang/Object;)();
    Z; hex = ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(ch.(Lscala/Function0;::apply()Ljava/lang/Object;)()) == 'x') && true);
    I; $31$;
    if (hex)
      {
        $31$ = 16;
      }
    else
      {
        $31$ = 10;
      }
    I; base = $31$;
    I; i = 0;
    while$7: while(true) {
      if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(ch.(Lscala/Function0;::apply()Ljava/lang/Object;)()) != ';'))
        {
          {
            {
              C; temp49 = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(ch.(Lscala/Function0;::apply()Ljava/lang/Object;)());
              I; $32$ = temp49.<cast>(I;);
              Ljava/lang/Object; $33$;
              switch ($32$) {
                48: {
                  {
                    Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  }
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                49: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                50: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                51: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                52: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                53: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                54: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                55: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                56: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                57: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent0$percent1()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                65: {
                  {
                    Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  }
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                66: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                67: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                68: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                69: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                70: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                97: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                98: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                99: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                100: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                101: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                102: {
                  Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::body$percent1$percent3()V;)();
                  $33$ = Lscala/runtime/BoxedUnit;.UNIT;
                  break;
                }
                
                default: {
                  $33$ = reportSyntaxError.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)((("character \'" + ch.(Lscala/Function0;::apply()Ljava/lang/Object;)()) + "\' not allowed in char ref\012"));
                  break;
                }
                
              }
            }
            nextch.(Lscala/Function0;::apply()Ljava/lang/Object;)();
          }
          continue while$7;
        }
      else
        {
          
        }
      break;
    }
    return (new (Ljava/lang/String;::this(I;[I;I;)V;)(Lscala/Array$;.MODULE$.(Lscala/Array$;::apply(I;Lscala/collection/Seq;)I;[)(i, Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapIntArray(I;[)Lscala/collection/mutable/WrappedArray;)(<I;>{})), 0, 1));
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::$init$(Lscala/xml/parsing/TokenTests;)V;)(this);
  }
  
  private final V; body$percent0$percent1() {
    i = ((i * base) + Lscala/Predef$;.MODULE$.(Lscala/Predef$;::charWrapper(C;)Lscala/runtime/RichChar;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(ch.(Lscala/Function0;::apply()Ljava/lang/Object;)())).(Lscala/runtime/RichChar;::asDigit()I;)());
  }
  
  private final Lscala/xml/Node; body$percent1$percent2() {
    return n;
  }
  
  private final V; body$percent1$percent3() {
    if (!(hex))
      {
        reportSyntaxError.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)("hex char not allowed in decimal char ref\012Did you mean to write &#x ?");
      }
    else
      {
        i = ((i * base) + Lscala/Predef$;.MODULE$.(Lscala/Predef$;::charWrapper(C;)Lscala/runtime/RichChar;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(ch.(Lscala/Function0;::apply()Ljava/lang/Object;)())).(Lscala/runtime/RichChar;::asDigit()I;)());
      }
  }
  
  private final Lscala/collection/Seq; body$percent2$percent1() {
    return x;
  }
  
  private final Lscala/collection/Seq; body$percent1$percent1(Ljava/lang/String; s) {
    return (new (Lscala/xml/TextBuffer;::this()V;)()).(Lscala/xml/TextBuffer;::append(Lscala/collection/Seq;)Lscala/xml/TextBuffer;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapString(Ljava/lang/String;)Lscala/collection/immutable/WrappedString;)(s)).(Lscala/xml/TextBuffer;::toText()Lscala/collection/Seq;)();
  }
}
