public abstract class Lscala/xml/Equality$class; {
  
  public static Z; strict_$bang$eq(Lscala/xml/Equality; $this, Lscala/xml/Equality; other) {
    return !($this.(Lscala/xml/Equality;::strict_$eq$eq(Lscala/xml/Equality;)Z;)(other));
  }
  
  public static Z; canEqual(Lscala/xml/Equality; $this, Ljava/lang/Object; other) {
    Ljava/lang/Object; temp9 = other;
    return temp9.<instanceof>(Lscala/xml/Equality;);
  }
  
  public static I; hashCode(Lscala/xml/Equality; $this) {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)($this.(Lscala/xml/Equality;::basisForHashCode()Lscala/collection/Seq;)());
  }
  
  public static Z; equals(Lscala/xml/Equality; $this, Ljava/lang/Object; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z;)Z;)($this, other, false);
  }
  
  public static final Z; xml_$eq$eq(Lscala/xml/Equality; $this, Ljava/lang/Object; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z;)Z;)($this, other, true);
  }
  
  public static final Z; xml_$bang$eq(Lscala/xml/Equality; $this, Ljava/lang/Object; other) {
    return !($this.(Lscala/xml/Equality;::xml_$eq$eq(Ljava/lang/Object;)Z;)(other));
  }
  
  private static Z; doComparison(Lscala/xml/Equality; $this, Ljava/lang/Object; other, Z; blithe) {
    Ljava/lang/Object; temp11 = other;
    Z; $9$;
    if (temp11.<instanceof>(Ljava/lang/Object;))
      {
        Ljava/lang/Object; temp12 = temp11;
        Z; $10$;
        if (Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::gd2$1(Lscala/xml/Equality;Ljava/lang/Object;)Z;)($this, temp12))
          {
            $10$ = true;
          }
        else
          {
            Z; $11$;
            if (temp12.<instanceof>(Lscala/xml/Equality;))
              {
                Lscala/xml/Equality; x = temp12.<cast>(Lscala/xml/Equality;);
                $11$ = (x.(Lscala/xml/Equality;::canEqual(Ljava/lang/Object;)Z;)($this) && $this.(Lscala/xml/Equality;::strict_$eq$eq(Lscala/xml/Equality;)Z;)(x));
              }
            else
              {
                $11$ = false;
              }
            $10$ = $11$;
          }
        $9$ = $10$;
      }
    else
      {
        $9$ = false;
      }
    Z; strictlyEqual = $9$;
    return (strictlyEqual || (blithe && Lscala/xml/Equality$;.MODULE$.(Lscala/xml/Equality$;::compareBlithely(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this, Lscala/xml/Equality$;.MODULE$.(Lscala/xml/Equality$;::asRef(Ljava/lang/Object;)Ljava/lang/Object;)(other))));
  }
  
  private static final Z; gd2$1(Lscala/xml/Equality; $this, Ljava/lang/Object; x$1) {
    return ($this == x$1);
  }
  
  public static V; $init$(Lscala/xml/Equality; $this) {
    
  }
}
