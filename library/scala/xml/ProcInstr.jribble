public class Lscala/xml/ProcInstr; extends Lscala/xml/SpecialNode; implements Lscala/ScalaObject;, Lscala/Product;, Lscala/Serializable; {
  public final static Lscala/Function1; tupled() { return Lscala/xml/ProcInstr$;.MODULE$.(Lscala/runtime/AbstractFunction2;::tupled()Lscala/Function1;)(); }
  public final static Lscala/Function1; curry() { return Lscala/xml/ProcInstr$;.MODULE$.(Lscala/runtime/AbstractFunction2;::curry()Lscala/Function1;)(); }
  public final static Lscala/Function1; curried() { return Lscala/xml/ProcInstr$;.MODULE$.(Lscala/runtime/AbstractFunction2;::curried()Lscala/Function1;)(); }
  
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  private Ljava/lang/String; target$u0020;
  
  public Ljava/lang/String; target() {
    return this.(Lscala/xml/ProcInstr;)target$u0020;
  }
  
  private Ljava/lang/String; proctext$u0020;
  
  public Ljava/lang/String; proctext() {
    return this.(Lscala/xml/ProcInstr;)proctext$u0020;
  }
  
  public final Z; doCollectNamespaces() {
    return false;
  }
  
  public final Z; doTransform() {
    return false;
  }
  
  public final Ljava/lang/String; label() {
    return "#PI";
  }
  
  public Ljava/lang/String; text() {
    return "";
  }
  
  public Lscala/collection/mutable/StringBuilder; buildString(Lscala/collection/mutable/StringBuilder; sb) {
    Ljava/lang/String; $2$ = this.(Lscala/xml/ProcInstr;::target()Ljava/lang/String;)();
    Ljava/lang/Object; $1$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/xml/ProcInstr;::proctext()Ljava/lang/String;)(), ""))
      {
        $1$ = "";
      }
    else
      {
        $1$ = (" " + this.(Lscala/xml/ProcInstr;::proctext()Ljava/lang/String;)());
      }
    return sb.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)("<?%s%s?>").(Lscala/collection/immutable/StringLike;::format(Lscala/collection/Seq;)Ljava/lang/String;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{$2$, $1$})));
  }
  
  public Lscala/xml/ProcInstr; copy(Ljava/lang/String; target, Ljava/lang/String; proctext) {
    return (new (Lscala/xml/ProcInstr;::this(Ljava/lang/String;Ljava/lang/String;)V;)(target, proctext));
  }
  
  public Ljava/lang/String; copy$default$2() {
    return this.(Lscala/xml/ProcInstr;::proctext()Ljava/lang/String;)();
  }
  
  public Ljava/lang/String; copy$default$1() {
    return this.(Lscala/xml/ProcInstr;::target()Ljava/lang/String;)();
  }
  
  public Ljava/lang/String; productPrefix() {
    return "ProcInstr";
  }
  
  public I; productArity() {
    return 2;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp1 = x$1;
    I; $3$ = temp1;
    Ljava/lang/Object; $4$;
    switch ($3$) {
      1: {
        $4$ = this.(Lscala/xml/ProcInstr;::proctext()Ljava/lang/String;)();
        break;
      }
      
      0: {
        $4$ = this.(Lscala/xml/ProcInstr;::target()Ljava/lang/String;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $4$;
  }
  
  public this(Ljava/lang/String; target, Ljava/lang/String; proctext) {
    this.(Lscala/xml/ProcInstr;)target$u0020 = target;
    this.(Lscala/xml/ProcInstr;)proctext$u0020 = proctext;
    (Lscala/xml/SpecialNode;::super()V;)();
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
    if (!(Lscala/xml/Utility$;.MODULE$.(Lscala/xml/parsing/TokenTests;::isName(Ljava/lang/String;)Z;)(target)))
      {
        throw (new (Ljava/lang/IllegalArgumentException;::this(Ljava/lang/String;)V;)((target + " must be an XML Name")));
      }
    else
      {
        
      }
    if (proctext.(Ljava/lang/String;::contains(Ljava/lang/CharSequence;)Z;)("?>"))
      {
        throw (new (Ljava/lang/IllegalArgumentException;::this(Ljava/lang/String;)V;)((proctext + " may not contain \"?>\"")));
      }
    else
      {
        
      }
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(target.(Ljava/lang/String;::toLowerCase()Ljava/lang/String;)(), "xml"))
      {
        throw (new (Ljava/lang/IllegalArgumentException;::this(Ljava/lang/String;)V;)((target + " is reserved")));
      }
    else
      {
        
      }
  }
}
