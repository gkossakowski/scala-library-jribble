public class Lscala/xml/dtd/Scanner; extends Lscala/xml/dtd/Tokens; implements Lscala/xml/parsing/TokenTests;, Lscala/ScalaObject; {
  
  public final Z; isSpace(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public final Z; isSpace(Lscala/collection/Seq; cs) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, cs);
  }
  
  public Z; isAlpha(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlpha(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isAlphaDigit(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlphaDigit(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isNameChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isNameStart(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameStart(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isName(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isName(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; isPubIDChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isPubIDChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isValidIANAEncoding(Lscala/collection/Seq; ianaEncoding) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isValidIANAEncoding(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, ianaEncoding);
  }
  
  public Z; checkSysID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkSysID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; checkPubID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkPubID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public final C; ENDCH() {
    return '\00';
  }
  
  private I; token$u0020;
  
  public I; token() {
    return this.(I;)token$u0020;
  }
  
  public V; token_$eq(I; x$1) {
    this.(I;)token$u0020 = x$1;
  }
  
  private Ljava/lang/String; value$u0020;
  
  public Ljava/lang/String; value() {
    return this.(Ljava/lang/String;)value$u0020;
  }
  
  public V; value_$eq(Ljava/lang/String; x$1) {
    this.(Ljava/lang/String;)value$u0020 = x$1;
  }
  
  private Lscala/collection/Iterator; it$u0020;
  
  private Lscala/collection/Iterator; it() {
    return this.(Lscala/collection/Iterator;)it$u0020;
  }
  
  private V; it_$eq(Lscala/collection/Iterator; x$1) {
    this.(Lscala/collection/Iterator;)it$u0020 = x$1;
  }
  
  private C; c$u0020;
  
  private C; c() {
    return this.(C;)c$u0020;
  }
  
  private V; c_$eq(C; x$1) {
    this.(C;)c$u0020 = x$1;
  }
  
  public final V; initScanner(Ljava/lang/String; s) {
    this.(Lscala/xml/dtd/Scanner;::value_$eq(Ljava/lang/String;)V;)("");
    this.(Lscala/xml/dtd/Scanner;::it_$eq(Lscala/collection/Iterator;)V;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(s).(Lscala/collection/IndexedSeqLike;::iterator()Lscala/collection/Iterator;)());
    this.(Lscala/xml/dtd/Scanner;::token_$eq(I;)V;)(11);
    this.(Lscala/xml/dtd/Scanner;::next()V;)();
    this.(Lscala/xml/dtd/Scanner;::nextToken()V;)();
  }
  
  public final V; nextToken() {
    if ((this.(Lscala/xml/dtd/Scanner;::token()I;)() != 10))
      {
        this.(Lscala/xml/dtd/Scanner;::token_$eq(I;)V;)(this.(Lscala/xml/dtd/Scanner;::readToken()I;)());
      }
    else
      {
        
      }
  }
  
  public final Z; isIdentChar() {
    return ((('a' <= this.(Lscala/xml/dtd/Scanner;::c()C;)()) && (this.(Lscala/xml/dtd/Scanner;::c()C;)() <= 'z')) || (('A' <= this.(Lscala/xml/dtd/Scanner;::c()C;)()) && (this.(Lscala/xml/dtd/Scanner;::c()C;)() <= 'Z')));
  }
  
  public final V; next() {
    if (this.(Lscala/xml/dtd/Scanner;::it()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::hasNext()Z;)())
      {
        this.(Lscala/xml/dtd/Scanner;::c_$eq(C;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(this.(Lscala/xml/dtd/Scanner;::it()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()));
      }
    else
      {
        this.(Lscala/xml/dtd/Scanner;::c_$eq(C;)V;)('\00');
      }
  }
  
  public final V; acc(C; d) {
    if ((this.(Lscala/xml/dtd/Scanner;::c()C;)() == d))
      {
        this.(Lscala/xml/dtd/Scanner;::next()V;)();
      }
    else
      {
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::error(Ljava/lang/String;)Lscala/runtime/Nothing$;)((((("expected \'" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)(d)) + "\' found \'") + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)(this.(Lscala/xml/dtd/Scanner;::c()C;)())) + "\' !"));
      }
  }
  
  public final V; accS(Lscala/collection/Seq; ds) {
    ds.(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/dtd/Scanner$$anonfun$accS$1;::this(Lscala/xml/dtd/Scanner;)V;)(this)));
  }
  
  public final I; readToken() {
    I; $1$;
    if (this.(Lscala/xml/parsing/TokenTests;::isSpace(C;)Z;)(this.(Lscala/xml/dtd/Scanner;::c()C;)()))
      {
        while$1: while(true) {
          if (this.(Lscala/xml/parsing/TokenTests;::isSpace(C;)Z;)(this.(Lscala/xml/dtd/Scanner;::c()C;)()))
            {
              this.(Lscala/xml/dtd/Scanner;::c_$eq(C;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(this.(Lscala/xml/dtd/Scanner;::it()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()));
              continue while$1;
            }
          else
            {
              
            }
          break;
        }
        $1$ = 13;
      }
    else
      {
        C; temp1 = this.(Lscala/xml/dtd/Scanner;::c()C;)();
        I; $2$ = temp1.<cast>(I;);
        I; $3$;
        switch ($2$) {
          0: {
            $3$ = 10;
            break;
          }
          
          35: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            this.(Lscala/xml/dtd/Scanner;::accS(Lscala/collection/Seq;)V;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapString(Ljava/lang/String;)Lscala/collection/immutable/WrappedString;)("PCDATA"));
            $3$ = 0;
            break;
          }
          
          40: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 3;
            break;
          }
          
          41: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 4;
            break;
          }
          
          42: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 6;
            break;
          }
          
          43: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 7;
            break;
          }
          
          44: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 5;
            break;
          }
          
          63: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 8;
            break;
          }
          
          124: {
            this.(Lscala/xml/dtd/Scanner;::next()V;)();
            $3$ = 9;
            break;
          }
          
          default: {
            I; $4$;
            if (this.(Lscala/xml/parsing/TokenTests;::isNameStart(C;)Z;)(this.(Lscala/xml/dtd/Scanner;::c()C;)()))
              {
                $4$ = this.(Lscala/xml/dtd/Scanner;::name()I;)();
              }
            else
              {
                Lscala/Predef$;.MODULE$.(Lscala/Predef$;::error(Ljava/lang/String;)Lscala/runtime/Nothing$;)(("unexpected character:" + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)(this.(Lscala/xml/dtd/Scanner;::c()C;)())));
                $4$ = 10;
              }
            $3$ = $4$;
            break;
          }
          
        }
        $1$ = $3$;
      }
    return $1$;
  }
  
  public final I; name() {
    Lscala/collection/mutable/StringBuilder; sb = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
    doWhile$1: while(true) {
      {
        sb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(this.(Lscala/xml/dtd/Scanner;::c()C;)());
        this.(Lscala/xml/dtd/Scanner;::next()V;)();
      }
      if (this.(Lscala/xml/parsing/TokenTests;::isNameChar(C;)Z;)(this.(Lscala/xml/dtd/Scanner;::c()C;)()))
        {
          continue doWhile$1;
        }
      else
        {
          
        }
      break;
    }
    this.(Lscala/xml/dtd/Scanner;::value_$eq(Ljava/lang/String;)V;)(sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)());
    return 1;
  }
  
  public this() {
    (Lscala/xml/dtd/Tokens;::super()V;)();
    Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::$init$(Lscala/xml/parsing/TokenTests;)V;)(this);
    this.(I;)token$u0020 = 10;
    this.(Lscala/collection/Iterator;)it$u0020 = null;
    this.(C;)c$u0020 = 'z';
  }
}
