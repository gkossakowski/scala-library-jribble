public final class Lscala/xml/dtd/MakeValidationException$; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  public static Lscala/xml/dtd/MakeValidationException$; MODULE$ = new (Lscala/xml/dtd/MakeValidationException$;::this()V;)();
  
  public Lscala/xml/dtd/ValidationException; fromFixedAttribute(Ljava/lang/String; k, Ljava/lang/String; value, Ljava/lang/String; actual) {
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)((((((("value of attribute " + k) + " FIXED to \"") + value) + "\", but document tries \"") + actual) + "\"")));
  }
  
  public Lscala/xml/dtd/ValidationException; fromNonEmptyElement() {
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)("element should be *empty*"));
  }
  
  public Lscala/xml/dtd/ValidationException; fromUndefinedElement(Ljava/lang/String; label) {
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)((("element \"" + label) + "\" not allowed here")));
  }
  
  public Lscala/xml/dtd/ValidationException; fromUndefinedAttribute(Ljava/lang/String; key) {
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)((("attribute " + key) + " not allowed here")));
  }
  
  public Lscala/xml/dtd/ValidationException; fromMissingAttribute(Lscala/collection/immutable/Set; allKeys) {
    Lscala/collection/mutable/StringBuilder; sb$1 = (new (Lscala/collection/mutable/StringBuilder;::this(Ljava/lang/String;)V;)("missing value for REQUIRED attribute"));
    if ((allKeys.(Lscala/collection/TraversableOnce;::size()I;)() > 1))
      {
        sb$1.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)('s');
      }
    else
      {
        
      }
    allKeys.(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/dtd/MakeValidationException$$anonfun$fromMissingAttribute$1;::this(Lscala/collection/mutable/StringBuilder;)V;)(sb$1)));
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)(sb$1.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)()));
  }
  
  public Lscala/xml/dtd/ValidationException; fromMissingAttribute(Ljava/lang/String; key, Ljava/lang/String; tpe) {
    return (new (Lscala/xml/dtd/ValidationException;::this(Ljava/lang/String;)V;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)("missing value for REQUIRED attribute %s of type %s").(Lscala/collection/immutable/StringLike;::format(Lscala/collection/Seq;)Ljava/lang/String;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{key, tpe}))));
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
  }
}
