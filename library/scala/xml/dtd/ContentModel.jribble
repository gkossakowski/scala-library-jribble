public abstract class Lscala/xml/dtd/ContentModel; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  public final static Lscala/collection/immutable/Set; traverse$1(Lscala/util/regexp/Base$RegExp; x_0) { return Lscala/xml/dtd/ContentModel$;.MODULE$.(Lscala/xml/dtd/ContentModel$;::traverse$1(Lscala/util/regexp/Base$RegExp;)Lscala/collection/immutable/Set;)(x_0); }
  public final static Lscala/collection/immutable/Set; getLabels(Lscala/util/regexp/Base$RegExp; x_0) { return Lscala/xml/dtd/ContentModel$;.MODULE$.(Lscala/xml/dtd/ContentModel$;::getLabels(Lscala/util/regexp/Base$RegExp;)Lscala/collection/immutable/Set;)(x_0); }
  public final static Lscala/xml/dtd/ContentModel; parse(Ljava/lang/String; x_0) { return Lscala/xml/dtd/ContentModel$;.MODULE$.(Lscala/xml/dtd/ContentModel$;::parse(Ljava/lang/String;)Lscala/xml/dtd/ContentModel;)(x_0); }
  public final static Z; containsText(Lscala/xml/dtd/ContentModel; x_0) { return Lscala/xml/dtd/ContentModel$;.MODULE$.(Lscala/xml/dtd/ContentModel$;::containsText(Lscala/xml/dtd/ContentModel;)Z;)(x_0); }
  public final static Z; isMixed(Lscala/xml/dtd/ContentModel; x_0) { return Lscala/xml/dtd/ContentModel$;.MODULE$.(Lscala/xml/dtd/ContentModel$;::isMixed(Lscala/xml/dtd/ContentModel;)Z;)(x_0); }
  
  
  public Ljava/lang/String; toString() {
    return Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::sbToString(Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/dtd/ContentModel$$anonfun$toString$1;::this(Lscala/xml/dtd/ContentModel;)V;)(this)));
  }
  
  public abstract Lscala/collection/mutable/StringBuilder; buildString(Lscala/collection/mutable/StringBuilder; sb);
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
  }
}
