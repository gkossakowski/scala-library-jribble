public abstract class Lscala/xml/dtd/ExternalID; extends Ljava/lang/Object; implements Lscala/xml/parsing/TokenTests;, Lscala/ScalaObject; {
  
  public final Z; isSpace(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public final Z; isSpace(Lscala/collection/Seq; cs) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isSpace(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, cs);
  }
  
  public Z; isAlpha(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlpha(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isAlphaDigit(C; c) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isAlphaDigit(Lscala/xml/parsing/TokenTests;C;)Z;)(this, c);
  }
  
  public Z; isNameChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isNameStart(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isNameStart(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isName(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isName(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; isPubIDChar(C; ch) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isPubIDChar(Lscala/xml/parsing/TokenTests;C;)Z;)(this, ch);
  }
  
  public Z; isValidIANAEncoding(Lscala/collection/Seq; ianaEncoding) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::isValidIANAEncoding(Lscala/xml/parsing/TokenTests;Lscala/collection/Seq;)Z;)(this, ianaEncoding);
  }
  
  public Z; checkSysID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkSysID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Z; checkPubID(Ljava/lang/String; s) {
    return Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::checkPubID(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)Z;)(this, s);
  }
  
  public Ljava/lang/String; quoted(Ljava/lang/String; s) {
    C; $1$;
    if (Lscala/Predef$;.MODULE$.(Lscala/Predef$;::augmentString(Ljava/lang/String;)Lscala/collection/immutable/StringOps;)(s).(Lscala/collection/SeqLike;::contains(Ljava/lang/Object;)Z;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)('\"')))
      {
        $1$ = '\'';
      }
    else
      {
        $1$ = '\"';
      }
    C; c = $1$;
    return ((c + s) + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToCharacter(C;)Ljava/lang/Character;)(c));
  }
  
  public Ljava/lang/String; toString() {
    Lscala/runtime/VolatileIntRef; bitmap$0$1 = (new (Lscala/runtime/VolatileIntRef;::this(I;)V;)(0));
    Lscala/runtime/ObjectRef; quotedSystemLiteral$lzy$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)());
    Lscala/runtime/ObjectRef; quotedPublicLiteral$lzy$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)());
    Ljava/lang/String; $2$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/xml/dtd/ExternalID;::publicId()Ljava/lang/String;)(), null))
      {
        $2$ = ("SYSTEM " + this.(Lscala/xml/dtd/ExternalID;::quotedSystemLiteral$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileIntRef;)Ljava/lang/String;)(quotedSystemLiteral$lzy$1, bitmap$0$1));
      }
    else
      {
        Ljava/lang/Object; $3$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/xml/dtd/ExternalID;::systemId()Ljava/lang/String;)(), null))
          {
            $3$ = "";
          }
        else
          {
            $3$ = (" " + this.(Lscala/xml/dtd/ExternalID;::quotedSystemLiteral$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileIntRef;)Ljava/lang/String;)(quotedSystemLiteral$lzy$1, bitmap$0$1));
          }
        $2$ = (("PUBLIC " + this.(Lscala/xml/dtd/ExternalID;::quotedPublicLiteral$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileIntRef;)Ljava/lang/String;)(quotedPublicLiteral$lzy$1, bitmap$0$1)) + $3$);
      }
    return $2$;
  }
  
  public Lscala/collection/mutable/StringBuilder; buildString(Lscala/collection/mutable/StringBuilder; sb) {
    return sb.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this.(Lscala/xml/dtd/ExternalID;::toString()Ljava/lang/String;)());
  }
  
  public abstract Ljava/lang/String; systemId();
  
  public abstract Ljava/lang/String; publicId();
  
  private final Ljava/lang/String; quotedSystemLiteral$1(Lscala/runtime/ObjectRef; quotedSystemLiteral$lzy$1, Lscala/runtime/VolatileIntRef; bitmap$0$1) {
    if (((bitmap$0$1.(I;)elem & 1) == 0))
      {
        if (((bitmap$0$1.(I;)elem & 1) == 0))
          {
            quotedSystemLiteral$lzy$1.(Ljava/lang/Object;)elem = this.(Lscala/xml/dtd/ExternalID;::quoted(Ljava/lang/String;)Ljava/lang/String;)(this.(Lscala/xml/dtd/ExternalID;::systemId()Ljava/lang/String;)());
            bitmap$0$1.(I;)elem = (bitmap$0$1.(I;)elem | 1);
          }
      }
    return quotedSystemLiteral$lzy$1.(Ljava/lang/Object;)elem.<cast>(Ljava/lang/String;);
  }
  
  private final Ljava/lang/String; quotedPublicLiteral$1(Lscala/runtime/ObjectRef; quotedPublicLiteral$lzy$1, Lscala/runtime/VolatileIntRef; bitmap$0$1) {
    if (((bitmap$0$1.(I;)elem & 2) == 0))
      {
        if (((bitmap$0$1.(I;)elem & 2) == 0))
          {
            quotedPublicLiteral$lzy$1.(Ljava/lang/Object;)elem = this.(Lscala/xml/dtd/ExternalID;::quoted(Ljava/lang/String;)Ljava/lang/String;)(this.(Lscala/xml/dtd/ExternalID;::publicId()Ljava/lang/String;)());
            bitmap$0$1.(I;)elem = (bitmap$0$1.(I;)elem | 2);
          }
      }
    return quotedPublicLiteral$lzy$1.(Ljava/lang/Object;)elem.<cast>(Ljava/lang/String;);
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/xml/parsing/TokenTests$class;.(Lscala/xml/parsing/TokenTests$class;::$init$(Lscala/xml/parsing/TokenTests;)V;)(this);
  }
}
