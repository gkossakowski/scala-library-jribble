public class Lscala/xml/TextBuffer; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  private Lscala/collection/mutable/StringBuilder; sb$u0020;
  
  public Lscala/collection/mutable/StringBuilder; sb() {
    return this.(Lscala/xml/TextBuffer;)sb$u0020;
  }
  
  public Lscala/xml/TextBuffer; append(Lscala/collection/Seq; cs) {
    cs.(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/xml/TextBuffer$$anonfun$append$1;::this(Lscala/xml/TextBuffer;)V;)(this)));
    return this;
  }
  
  public Lscala/collection/Seq; toText() {
    Ljava/lang/String; temp1 = this.(Lscala/xml/TextBuffer;::sb()Lscala/collection/mutable/StringBuilder;)().(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)().(Ljava/lang/String;::trim()Ljava/lang/String;)();
    Lscala/collection/Seq; $1$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(temp1, ""))
      {
        $1$ = Lscala/collection/immutable/Nil$;.MODULE$;
      }
    else
      {
        $1$ = Lscala/collection/Seq$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/Traversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/xml/Text;>{(new (Lscala/xml/Text;::this(Ljava/lang/String;)V;)(temp1))}.<cast>(Ljava/lang/Object;[))).<cast>(Lscala/collection/Seq;);
      }
    return $1$;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    this.(Lscala/xml/TextBuffer;)sb$u0020 = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
  }
}
