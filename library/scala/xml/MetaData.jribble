public abstract class Lscala/xml/MetaData; extends Ljava/lang/Object; implements Lscala/collection/Iterable;, Lscala/xml/Equality;, Lscala/Serializable;, Lscala/ScalaObject; {
  public final static Lscala/xml/MetaData; update(Lscala/xml/MetaData; x_0, Lscala/xml/NamespaceBinding; x_1, Lscala/xml/MetaData; x_2) { return Lscala/xml/MetaData$;.MODULE$.(Lscala/xml/MetaData$;::update(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;Lscala/xml/MetaData;)Lscala/xml/MetaData;)(x_0, x_1, x_2); }
  public final static Ljava/lang/String; getUniversalKey(Lscala/xml/MetaData; x_0, Lscala/xml/NamespaceBinding; x_1) { return Lscala/xml/MetaData$;.MODULE$.(Lscala/xml/MetaData$;::getUniversalKey(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;)Ljava/lang/String;)(x_0, x_1); }
  public final static Lscala/xml/MetaData; normalize(Lscala/xml/MetaData; x_0, Lscala/xml/NamespaceBinding; x_1) { return Lscala/xml/MetaData$;.MODULE$.(Lscala/xml/MetaData$;::normalize(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;)Lscala/xml/MetaData;)(x_0, x_1); }
  public final static Lscala/xml/MetaData; concatenate(Lscala/xml/MetaData; x_0, Lscala/xml/MetaData; x_1) { return Lscala/xml/MetaData$;.MODULE$.(Lscala/xml/MetaData$;::concatenate(Lscala/xml/MetaData;Lscala/xml/MetaData;)Lscala/xml/MetaData;)(x_0, x_1); }
  
  
  public Z; strict_$bang$eq(Lscala/xml/Equality; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::strict_$bang$eq(Lscala/xml/Equality;Lscala/xml/Equality;)Z;)(this, other);
  }
  
  public I; hashCode() {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::hashCode(Lscala/xml/Equality;)I;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::equals(Lscala/xml/Equality;Ljava/lang/Object;)Z;)(this, other);
  }
  
  public final Z; xml_$eq$eq(Ljava/lang/Object; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::xml_$eq$eq(Lscala/xml/Equality;Ljava/lang/Object;)Z;)(this, other);
  }
  
  public final Z; xml_$bang$eq(Ljava/lang/Object; other) {
    return Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::xml_$bang$eq(Lscala/xml/Equality;Ljava/lang/Object;)Z;)(this, other);
  }
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::companion(Lscala/collection/Iterable;)Lscala/collection/generic/GenericCompanion;)(this);
  }
  
  public Lscala/collection/Iterable; seq() {
    return Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::seq(Lscala/collection/Iterable;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; thisCollection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::thisCollection(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; toCollection(Ljava/lang/Object; repr) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toCollection(Lscala/collection/IterableLike;Ljava/lang/Object;)Lscala/collection/Iterable;)(this, repr);
  }
  
  public V; foreach(Lscala/Function1; f) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::foreach(Lscala/collection/IterableLike;Lscala/Function1;)V;)(this, f);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::forall(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::exists(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::find(Lscala/collection/IterableLike;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public Z; isEmpty() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::isEmpty(Lscala/collection/IterableLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::foldRight(Lscala/collection/IterableLike;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::reduceRight(Lscala/collection/IterableLike;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toIterable(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Ljava/lang/Object; head() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::head(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; slice(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::slice(Lscala/collection/IterableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Ljava/lang/Object; take(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::take(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; drop(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::drop(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeWhile(Lscala/collection/IterableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/collection/Iterator; grouped(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::grouped(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size, I; step) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;I;)Lscala/collection/Iterator;)(this, size, step);
  }
  
  public Ljava/lang/Object; takeRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; dropRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::dropRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/GenIterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/GenIterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipWithIndex(Lscala/collection/IterableLike;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, bf);
  }
  
  public Z; sameElements(Lscala/collection/GenIterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)Z;)(this, that);
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toStream(Lscala/collection/IterableLike;)Lscala/collection/immutable/Stream;)(this);
  }
  
  public Lscala/collection/IterableView; view() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public Lscala/collection/IterableView; view(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;I;I;)Lscala/collection/IterableView;)(this, from, until);
  }
  
  public Lscala/collection/Iterator; elements() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::elements(Lscala/collection/IterableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; first() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::first(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; firstOption() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::firstOption(Lscala/collection/IterableLike;)Lscala/Option;)(this);
  }
  
  public Lscala/collection/IterableView; projection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::projection(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::newBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/collection/mutable/Builder; genericBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/Tuple2; unzip(Lscala/Function1; asPair) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple2;)(this, asPair);
  }
  
  public Lscala/Tuple3; unzip3(Lscala/Function1; asTriple) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip3(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple3;)(this, asTriple);
  }
  
  public Lscala/collection/GenTraversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable);
  }
  
  public Lscala/collection/GenTraversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable);
  }
  
  public Ljava/lang/Object; repr() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::repr(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/collection/parallel/Combiner; parCombiner() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::parCombiner(Lscala/collection/TraversableLike;)Lscala/collection/parallel/Combiner;)(this);
  }
  
  public Z; hasDefiniteSize() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::hasDefiniteSize(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/GenTraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/Traversable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/Traversable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; filterNot(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filterNot(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::collect(Lscala/collection/TraversableLike;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, pf, bf);
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::partition(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::groupBy(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; scan(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; cbf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scan(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, cbf);
  }
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanLeft(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanRight(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Lscala/Option; headOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::headOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; tail() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tail(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; last() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::last(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; lastOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::lastOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; init() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::init(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; sliceWithKnownDelta(I; from, I; until, I; delta) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownDelta(Lscala/collection/TraversableLike;I;I;I;)Ljava/lang/Object;)(this, from, until, delta);
  }
  
  public Ljava/lang/Object; sliceWithKnownBound(I; from, I; until) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownBound(Lscala/collection/TraversableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::dropWhile(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::span(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/Tuple2; splitAt(I; n) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::splitAt(Lscala/collection/TraversableLike;I;)Lscala/Tuple2;)(this, n);
  }
  
  public Lscala/collection/Iterator; tails() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tails(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; inits() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::inits(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toTraversable(Lscala/collection/TraversableLike;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toIterator(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/String; stringPrefix() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::stringPrefix(Lscala/collection/TraversableLike;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::withFilter(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/generic/FilterMonadic;)(this, p);
  }
  
  public final Z; isTraversableAgain() {
    return Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::isTraversableAgain(Lscala/collection/GenTraversableLike;)Z;)(this);
  }
  
  public Lscala/collection/Parallel; par() {
    return Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::par(Lscala/collection/Parallelizable;)Lscala/collection/Parallel;)(this);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::count(Lscala/collection/TraversableOnce;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/Option; collectFirst(Lscala/PartialFunction; pf) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::collectFirst(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;)(this, pf);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; reduce(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduce(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; fold(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::fold(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; aggregate(Ljava/lang/Object; z, Lscala/Function2; seqop, Lscala/Function2; combop) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::aggregate(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;)(this, z, seqop, combop);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; maxBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::maxBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public Ljava/lang/Object; minBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::minBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/List; toList() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toList(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Lscala/collection/Seq; toSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSeq(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;)(this);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toBuffer(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;)(this, sep);
  }
  
  public Ljava/lang/String; mkString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, start, sep, end);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  public Ljava/lang/Object; $div$colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$div$colon$bslash(Lscala/collection/GenTraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Lscala/xml/MetaData; append(Lscala/xml/MetaData; updates, Lscala/xml/NamespaceBinding; scope) {
    return Lscala/xml/MetaData$;.MODULE$.(Lscala/xml/MetaData$;::update(Lscala/xml/MetaData;Lscala/xml/NamespaceBinding;Lscala/xml/MetaData;)Lscala/xml/MetaData;)(this, scope, updates);
  }
  
  public Lscala/xml/NamespaceBinding; append$default$2() {
    return Lscala/xml/TopScope$;.MODULE$;
  }
  
  public abstract Lscala/collection/Seq; apply(Ljava/lang/String; key);
  
  public final Lscala/collection/Seq; apply(Ljava/lang/String; namespace_uri, Lscala/xml/Node; owner, Ljava/lang/String; key) {
    return this.(Lscala/xml/MetaData;::apply(Ljava/lang/String;Lscala/xml/NamespaceBinding;Ljava/lang/String;)Lscala/collection/Seq;)(namespace_uri, owner.(Lscala/xml/Node;::scope()Lscala/xml/NamespaceBinding;)(), key);
  }
  
  public abstract Lscala/collection/Seq; apply(Ljava/lang/String; namespace_uri, Lscala/xml/NamespaceBinding; scp, Ljava/lang/String; k);
  
  public abstract Lscala/xml/MetaData; copy(Lscala/xml/MetaData; next);
  
  public abstract Ljava/lang/String; getNamespace(Lscala/xml/Node; owner);
  
  public Z; hasNext() {
    return (Lscala/xml/Null$;.MODULE$ != this.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)());
  }
  
  public I; length() {
    return this.(Lscala/xml/MetaData;::length(I;)I;)(0);
  }
  
  public I; length(I; i) {
    return this.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)().(Lscala/xml/MetaData;::length(I;)I;)((i + 1));
  }
  
  public abstract Z; isPrefixed();
  
  public Z; canEqual(Ljava/lang/Object; other) {
    Ljava/lang/Object; temp4 = other;
    return temp4.<instanceof>(Lscala/xml/MetaData;);
  }
  
  public Z; strict_$eq$eq(Lscala/xml/Equality; other) {
    Lscala/xml/Equality; temp6 = other;
    Z; $6$;
    if (temp6.<instanceof>(Lscala/xml/MetaData;))
      {
        $6$ = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/xml/MetaData;::asAttrMap()Lscala/collection/immutable/Map;)(), temp6.<cast>(Lscala/xml/MetaData;).(Lscala/xml/MetaData;::asAttrMap()Lscala/collection/immutable/Map;)());
      }
    else
      {
        $6$ = false;
      }
    return $6$;
  }
  
  public Lscala/collection/Seq; basisForHashCode() {
    return Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/collection/immutable/Map;>{this.(Lscala/xml/MetaData;::asAttrMap()Lscala/collection/immutable/Map;)()}.<cast>(Ljava/lang/Object;[)));
  }
  
  public Lscala/collection/Iterator; iterator() {
    return Lscala/collection/Iterator$;.MODULE$.(Lscala/collection/Iterator$;::single(Ljava/lang/Object;)Lscala/collection/Iterator;)(this).(Lscala/collection/Iterator;::$plus$plus(Lscala/Function0;)Lscala/collection/Iterator;)((new (Lscala/xml/MetaData$$anonfun$iterator$1;::this(Lscala/xml/MetaData;)V;)(this)));
  }
  
  public I; size() {
    return (1 + this.(Lscala/xml/MetaData;::iterator()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::length()I;)());
  }
  
  public Lscala/xml/MetaData; filter(Lscala/Function1; f) {
    Lscala/xml/MetaData; $7$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(f.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this)))
      {
        $7$ = this.(Lscala/xml/MetaData;::copy(Lscala/xml/MetaData;)Lscala/xml/MetaData;)(this.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)().(Lscala/xml/MetaData;::filter(Lscala/Function1;)Lscala/xml/MetaData;)(f));
      }
    else
      {
        $7$ = this.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)().(Lscala/xml/MetaData;::filter(Lscala/Function1;)Lscala/xml/MetaData;)(f);
      }
    return $7$;
  }
  
  public abstract Ljava/lang/String; key();
  
  public abstract Lscala/collection/Seq; value();
  
  public Ljava/lang/String; prefixedKey() {
    Lscala/sys/package$;.MODULE$.(Lscala/sys/package$;::error(Ljava/lang/String;)Lscala/runtime/Nothing$;)("whack! you stepped on broken handling of jribble backend.");
  }
  
  public Lscala/collection/immutable/Map; asAttrMap() {
    return this.(Lscala/xml/MetaData;::iterator()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::map(Lscala/Function1;)Lscala/collection/Iterator;)((new (Lscala/xml/MetaData$$anonfun$asAttrMap$1;::this(Lscala/xml/MetaData;)V;)(this))).(Lscala/collection/TraversableOnce;::toMap(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::conforms()Lscala/Predef$$less$colon$less;)());
  }
  
  public abstract Lscala/xml/MetaData; next();
  
  public final Lscala/Option; get(Ljava/lang/String; key) {
    return Lscala/Option$;.MODULE$.(Lscala/Option$;::apply(Ljava/lang/Object;)Lscala/Option;)(this.(Lscala/xml/MetaData;::apply(Ljava/lang/String;)Lscala/collection/Seq;)(key));
  }
  
  public final Lscala/Option; get(Ljava/lang/String; uri, Lscala/xml/Node; owner, Ljava/lang/String; key) {
    return this.(Lscala/xml/MetaData;::get(Ljava/lang/String;Lscala/xml/NamespaceBinding;Ljava/lang/String;)Lscala/Option;)(uri, owner.(Lscala/xml/Node;::scope()Lscala/xml/NamespaceBinding;)(), key);
  }
  
  public final Lscala/Option; get(Ljava/lang/String; uri, Lscala/xml/NamespaceBinding; scope, Ljava/lang/String; key) {
    return Lscala/Option$;.MODULE$.(Lscala/Option$;::apply(Ljava/lang/Object;)Lscala/Option;)(this.(Lscala/xml/MetaData;::apply(Ljava/lang/String;Lscala/xml/NamespaceBinding;Ljava/lang/String;)Lscala/collection/Seq;)(uri, scope, key));
  }
  
  public Ljava/lang/String; toString1() {
    return Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::sbToString(Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/MetaData$$anonfun$toString1$1;::this(Lscala/xml/MetaData;)V;)(this)));
  }
  
  public abstract V; toString1(Lscala/collection/mutable/StringBuilder; sb);
  
  public Ljava/lang/String; toString() {
    return Lscala/xml/Utility$;.MODULE$.(Lscala/xml/Utility$;::sbToString(Lscala/Function1;)Ljava/lang/String;)((new (Lscala/xml/MetaData$$anonfun$toString$1;::this(Lscala/xml/MetaData;)V;)(this)));
  }
  
  public Lscala/collection/mutable/StringBuilder; buildString(Lscala/collection/mutable/StringBuilder; sb) {
    sb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(' ');
    this.(Lscala/xml/MetaData;::toString1(Lscala/collection/mutable/StringBuilder;)V;)(sb);
    return this.(Lscala/xml/MetaData;::next()Lscala/xml/MetaData;)().(Lscala/xml/MetaData;::buildString(Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(sb);
  }
  
  public abstract Z; wellformed(Lscala/xml/NamespaceBinding; scope);
  
  public abstract Lscala/xml/MetaData; remove(Ljava/lang/String; key);
  
  public abstract Lscala/xml/MetaData; remove(Ljava/lang/String; namespace, Lscala/xml/NamespaceBinding; scope, Ljava/lang/String; key);
  
  public final Lscala/xml/MetaData; remove(Ljava/lang/String; namespace, Lscala/xml/Node; owner, Ljava/lang/String; key) {
    return this.(Lscala/xml/MetaData;::remove(Ljava/lang/String;Lscala/xml/NamespaceBinding;Ljava/lang/String;)Lscala/xml/MetaData;)(namespace, owner.(Lscala/xml/Node;::scope()Lscala/xml/NamespaceBinding;)(), key);
  }
  
  public Lscala/collection/GenMap; toMap(Lscala/Predef$$less$colon$less; ev) {
    return this.(Lscala/collection/TraversableOnce;::toMap(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(ev);
  }
  
  public Lscala/collection/GenSet; toSet() {
    return this.(Lscala/collection/TraversableOnce;::toSet()Lscala/collection/immutable/Set;)();
  }
  
  public Lscala/collection/GenSeq; toSeq() {
    return this.(Lscala/collection/TraversableOnce;::toSeq()Lscala/collection/Seq;)();
  }
  
  public Lscala/collection/GenTraversable; toTraversable() {
    return this.(Lscala/collection/TraversableLike;::toTraversable()Lscala/collection/Traversable;)();
  }
  
  public Lscala/collection/GenMap; groupBy(Lscala/Function1; f) {
    return this.(Lscala/collection/TraversableLike;::groupBy(Lscala/Function1;)Lscala/collection/immutable/Map;)(f);
  }
  
  public Lscala/collection/TraversableView; view(I; from, I; until) {
    return this.(Lscala/collection/IterableLike;::view(I;I;)Lscala/collection/IterableView;)(from, until);
  }
  
  public Lscala/collection/TraversableView; view() {
    return this.(Lscala/collection/IterableLike;::view()Lscala/collection/IterableView;)();
  }
  
  public Lscala/collection/GenIterable; toIterable() {
    return this.(Lscala/collection/IterableLike;::toIterable()Lscala/collection/Iterable;)();
  }
  
  public Lscala/collection/Traversable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/IterableLike;::toCollection(Ljava/lang/Object;)Lscala/collection/Iterable;)(repr);
  }
  
  public Lscala/collection/Traversable; thisCollection() {
    return this.(Lscala/collection/IterableLike;::thisCollection()Lscala/collection/Iterable;)();
  }
  
  public Lscala/collection/TraversableOnce; seq() {
    return this.(Lscala/collection/Iterable;::seq()Lscala/collection/Iterable;)();
  }
  
  public Lscala/collection/Traversable; seq() {
    return this.(Lscala/collection/Iterable;::seq()Lscala/collection/Iterable;)();
  }
  
  public Ljava/lang/Object; filter(Lscala/Function1; p) {
    return this.(Lscala/xml/MetaData;::filter(Lscala/Function1;)Lscala/xml/MetaData;)(p);
  }
  
  private final Z; gd1$1(Lscala/xml/Attribute; x$1) {
    return x$1.(Lscala/xml/Attribute;::isPrefixed()Z;)();
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$init$(Lscala/collection/GenTraversableOnce;)V;)(this);
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::$init$(Lscala/collection/Parallelizable;)V;)(this);
    Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::$init$(Lscala/collection/GenTraversableLike;)V;)(this);
    Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$init$(Lscala/collection/TraversableLike;)V;)(this);
    Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::$init$(Lscala/collection/generic/GenericTraversableTemplate;)V;)(this);
    Lscala/collection/GenTraversable$class;.(Lscala/collection/GenTraversable$class;::$init$(Lscala/collection/GenTraversable;)V;)(this);
    Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::$init$(Lscala/collection/Traversable;)V;)(this);
    Lscala/collection/GenIterableLike$class;.(Lscala/collection/GenIterableLike$class;::$init$(Lscala/collection/GenIterableLike;)V;)(this);
    Lscala/collection/GenIterable$class;.(Lscala/collection/GenIterable$class;::$init$(Lscala/collection/GenIterable;)V;)(this);
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::$init$(Lscala/collection/IterableLike;)V;)(this);
    Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::$init$(Lscala/collection/Iterable;)V;)(this);
    Lscala/xml/Equality$class;.(Lscala/xml/Equality$class;::$init$(Lscala/xml/Equality;)V;)(this);
  }
}
