public class Lscala/collection/immutable/RedBlack$RedTree; extends Lscala/collection/immutable/RedBlack$NonEmpty; implements Lscala/ScalaObject;, Lscala/Product;, Lscala/Serializable; {
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  private Ljava/lang/Object; key$u0020;
  
  public Ljava/lang/Object; key() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;)key$u0020;
  }
  
  private Ljava/lang/Object; value$u0020;
  
  public Ljava/lang/Object; value() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;)value$u0020;
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; left$u0020;
  
  public Lscala/collection/immutable/RedBlack$Tree; left() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;)left$u0020;
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; right$u0020;
  
  public Lscala/collection/immutable/RedBlack$Tree; right() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;)right$u0020;
  }
  
  public Z; isBlack() {
    return false;
  }
  
  public Lscala/collection/immutable/RedBlack$RedTree; copy(Ljava/lang/Object; key, Ljava/lang/Object; value, Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right) {
    return (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$RedTree;::scala$collection$immutable$RedBlack$RedTree$$$outer()Lscala/collection/immutable/RedBlack;)(), key, value, left, right));
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; copy$default$4() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; copy$default$3() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
  }
  
  public Ljava/lang/Object; copy$default$2() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;::value()Ljava/lang/Object;)();
  }
  
  public Ljava/lang/Object; copy$default$1() {
    return this.(Lscala/collection/immutable/RedBlack$RedTree;::key()Ljava/lang/Object;)();
  }
  
  public I; hashCode() {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::_hashCode(Lscala/Product;)I;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::_toString(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; x$1) {
    Ljava/lang/Object; temp242 = x$1;
    Z; $32$;
    if ((temp242.<instanceof>(Lscala/collection/immutable/RedBlack$RedTree;) && (temp242.<cast>(Lscala/collection/immutable/RedBlack$RedTree;).(Lscala/collection/immutable/RedBlack$RedTree;::scala$collection$immutable$RedBlack$RedTree$$$outer()Lscala/collection/immutable/RedBlack;)() == this.(Lscala/collection/immutable/RedBlack$RedTree;::scala$collection$immutable$RedBlack$RedTree$$$outer()Lscala/collection/immutable/RedBlack;)())))
      {
        Lscala/collection/immutable/RedBlack$RedTree; temp243 = temp242.<cast>(Lscala/collection/immutable/RedBlack$RedTree;);
        Ljava/lang/Object; temp244 = temp243.(Lscala/collection/immutable/RedBlack$RedTree;::key()Ljava/lang/Object;)();
        Ljava/lang/Object; temp245 = temp243.(Lscala/collection/immutable/RedBlack$RedTree;::value()Ljava/lang/Object;)();
        Lscala/collection/immutable/RedBlack$Tree; temp246 = temp243.(Lscala/collection/immutable/RedBlack$RedTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
        Lscala/collection/immutable/RedBlack$Tree; temp247 = temp243.(Lscala/collection/immutable/RedBlack$RedTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
        Ljava/lang/Object; key$1 = temp244;
        Ljava/lang/Object; value$1 = temp245;
        Lscala/collection/immutable/RedBlack$Tree; left$1 = temp246;
        Lscala/collection/immutable/RedBlack$Tree; right$1 = temp247;
        Z; $33$;
        if (this.(Lscala/collection/immutable/RedBlack$RedTree;::gd3$1(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Z;)(key$1, value$1, left$1, right$1))
          {
            Ljava/lang/Object; $34$;
            Ljava/lang/Object; $35$;
            Lscala/collection/immutable/RedBlack$Tree; $36$;
            Lscala/collection/immutable/RedBlack$Tree; $37$;
            Z; $38$;
            body$percent018: while(true) {
              $38$ = x$1.<cast>(Lscala/collection/immutable/RedBlack$RedTree;).(Lscala/Equals;::canEqual(Ljava/lang/Object;)Z;)(this);
              break;
            }
            $33$ = $38$;
          }
        else
          {
            $33$ = false;
          }
        $32$ = $33$;
      }
    else
      {
        $32$ = false;
      }
    return ((this == x$1) || $32$);
  }
  
  public Ljava/lang/String; productPrefix() {
    return "RedTree";
  }
  
  public I; productArity() {
    return 4;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp248 = x$1;
    I; $39$ = temp248;
    Ljava/lang/Object; $40$;
    switch ($39$) {
      3: {
        $40$ = this.(Lscala/collection/immutable/RedBlack$RedTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
        break;
      }
      
      1: {
        $40$ = this.(Lscala/collection/immutable/RedBlack$RedTree;::value()Ljava/lang/Object;)();
        break;
      }
      
      2: {
        $40$ = this.(Lscala/collection/immutable/RedBlack$RedTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
        break;
      }
      
      0: {
        $40$ = this.(Lscala/collection/immutable/RedBlack$RedTree;::key()Ljava/lang/Object;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $40$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/collection/immutable/RedBlack$RedTree;);
  }
  
  public Lscala/collection/immutable/RedBlack; scala$collection$immutable$RedBlack$RedTree$$$outer() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)$outer$u0020;
  }
  
  private final Z; gd3$1(Ljava/lang/Object; x$1, Ljava/lang/Object; x$2, Lscala/collection/immutable/RedBlack$Tree; x$3, Lscala/collection/immutable/RedBlack$Tree; x$4) {
    return (((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$1, this.(Lscala/collection/immutable/RedBlack$RedTree;::key()Ljava/lang/Object;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$2, this.(Lscala/collection/immutable/RedBlack$RedTree;::value()Ljava/lang/Object;)())) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$3, this.(Lscala/collection/immutable/RedBlack$RedTree;::left()Lscala/collection/immutable/RedBlack$Tree;)())) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$4, this.(Lscala/collection/immutable/RedBlack$RedTree;::right()Lscala/collection/immutable/RedBlack$Tree;)()));
  }
  
  public this(Lscala/collection/immutable/RedBlack; $outer, Ljava/lang/Object; key, Ljava/lang/Object; value, Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right) {
    this.(Lscala/collection/immutable/RedBlack$RedTree;)key$u0020 = key;
    this.(Lscala/collection/immutable/RedBlack$RedTree;)value$u0020 = value;
    this.(Lscala/collection/immutable/RedBlack$RedTree;)left$u0020 = left;
    this.(Lscala/collection/immutable/RedBlack$RedTree;)right$u0020 = right;
    (Lscala/collection/immutable/RedBlack$NonEmpty;::super(Lscala/collection/immutable/RedBlack;)V;)($outer);
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
  }
}
