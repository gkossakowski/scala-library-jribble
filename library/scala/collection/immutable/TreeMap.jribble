public class Lscala/collection/immutable/TreeMap; extends Lscala/collection/immutable/RedBlack; implements Lscala/collection/immutable/SortedMap;, Lscala/collection/SortedMapLike;, Lscala/collection/immutable/MapLike;, Lscala/ScalaObject; {
  
  public Lscala/collection/immutable/SortedMap; $plus$plus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/immutable/SortedMap$class;.(Lscala/collection/immutable/SortedMap$class;::$plus$plus(Lscala/collection/immutable/SortedMap;Lscala/collection/TraversableOnce;)Lscala/collection/immutable/SortedMap;)(this, xs);
  }
  
  public Lscala/collection/SortedSet; keySet() {
    return Lscala/collection/SortedMapLike$class;.(Lscala/collection/SortedMapLike$class;::keySet(Lscala/collection/SortedMapLike;)Lscala/collection/SortedSet;)(this);
  }
  
  public Lscala/collection/generic/Sorted; from(Ljava/lang/Object; from) {
    return Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::from(Lscala/collection/generic/Sorted;Ljava/lang/Object;)Lscala/collection/generic/Sorted;)(this, from);
  }
  
  public Lscala/collection/generic/Sorted; until(Ljava/lang/Object; until) {
    return Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::until(Lscala/collection/generic/Sorted;Ljava/lang/Object;)Lscala/collection/generic/Sorted;)(this, until);
  }
  
  public Lscala/collection/generic/Sorted; range(Ljava/lang/Object; from, Ljava/lang/Object; until) {
    return Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::range(Lscala/collection/generic/Sorted;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/generic/Sorted;)(this, from, until);
  }
  
  public Lscala/collection/generic/Sorted; to(Ljava/lang/Object; to) {
    return Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::to(Lscala/collection/generic/Sorted;Ljava/lang/Object;)Lscala/collection/generic/Sorted;)(this, to);
  }
  
  public Z; hasAll(Lscala/collection/Iterator; j) {
    return Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::hasAll(Lscala/collection/generic/Sorted;Lscala/collection/Iterator;)Z;)(this, j);
  }
  
  public Lscala/collection/immutable/Map; withDefault(Lscala/Function1; d) {
    return Lscala/collection/immutable/Map$class;.(Lscala/collection/immutable/Map$class;::withDefault(Lscala/collection/immutable/Map;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, d);
  }
  
  public Lscala/collection/immutable/Map; withDefaultValue(Ljava/lang/Object; d) {
    return Lscala/collection/immutable/Map$class;.(Lscala/collection/immutable/Map$class;::withDefaultValue(Lscala/collection/immutable/Map;Ljava/lang/Object;)Lscala/collection/immutable/Map;)(this, d);
  }
  
  public Lscala/collection/immutable/Map; filterKeys(Lscala/Function1; p) {
    return Lscala/collection/immutable/MapLike$class;.(Lscala/collection/immutable/MapLike$class;::filterKeys(Lscala/collection/immutable/MapLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; mapValues(Lscala/Function1; f) {
    return Lscala/collection/immutable/MapLike$class;.(Lscala/collection/immutable/MapLike$class;::mapValues(Lscala/collection/immutable/MapLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; transform(Lscala/Function2; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/immutable/MapLike$class;.(Lscala/collection/immutable/MapLike$class;::transform(Lscala/collection/immutable/MapLike;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Lscala/collection/immutable/Map; update(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return Lscala/collection/immutable/MapLike$class;.(Lscala/collection/immutable/MapLike$class;::update(Lscala/collection/immutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/Map;)(this, key, value);
  }
  
  public Z; isEmpty() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::isEmpty(Lscala/collection/MapLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; getOrElse(Ljava/lang/Object; key, Lscala/Function0; `default`) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;)(this, key, `default`);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::apply(Lscala/collection/MapLike;Ljava/lang/Object;)Ljava/lang/Object;)(this, key);
  }
  
  public Z; contains(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::contains(Lscala/collection/MapLike;Ljava/lang/Object;)Z;)(this, key);
  }
  
  public Z; isDefinedAt(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::isDefinedAt(Lscala/collection/MapLike;Ljava/lang/Object;)Z;)(this, key);
  }
  
  public Lscala/collection/Iterator; keysIterator() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::keysIterator(Lscala/collection/MapLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterable; keys() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::keys(Lscala/collection/MapLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; values() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::values(Lscala/collection/MapLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterator; valuesIterator() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::valuesIterator(Lscala/collection/MapLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; `default`(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::`default`(Lscala/collection/MapLike;Ljava/lang/Object;)Ljava/lang/Object;)(this, key);
  }
  
  public Lscala/collection/Map; mapElements(Lscala/Function1; f) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::mapElements(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, f);
  }
  
  public Lscala/collection/Map; filterNot(Lscala/Function1; p) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::filterNot(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, p);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, start, sep, end);
  }
  
  public Ljava/lang/String; stringPrefix() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::stringPrefix(Lscala/collection/MapLike;)Ljava/lang/String;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::toString(Lscala/collection/MapLike;)Ljava/lang/String;)(this);
  }
  
  public I; hashCode() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::hashCode(Lscala/collection/MapLike;)I;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; that) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::equals(Lscala/collection/MapLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/generic/Subtractable; $minus(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems) {
    return Lscala/collection/generic/Subtractable$class;.(Lscala/collection/generic/Subtractable$class;::$minus(Lscala/collection/generic/Subtractable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/generic/Subtractable;)(this, elem1, elem2, elems);
  }
  
  public Lscala/collection/generic/Subtractable; $minus$minus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/generic/Subtractable$class;.(Lscala/collection/generic/Subtractable$class;::$minus$minus(Lscala/collection/generic/Subtractable;Lscala/collection/TraversableOnce;)Lscala/collection/generic/Subtractable;)(this, xs);
  }
  
  public Lscala/PartialFunction; orElse(Lscala/PartialFunction; that) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::orElse(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;)(this, that);
  }
  
  public Lscala/PartialFunction; andThen(Lscala/Function1; k) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::andThen(Lscala/PartialFunction;Lscala/Function1;)Lscala/PartialFunction;)(this, k);
  }
  
  public Lscala/Function1; lift() {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::lift(Lscala/PartialFunction;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; compose(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/immutable/Iterable$class;.(Lscala/collection/immutable/Iterable$class;::companion(Lscala/collection/immutable/Iterable;)Lscala/collection/generic/GenericCompanion;)(this);
  }
  
  public Lscala/collection/Iterable; thisCollection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::thisCollection(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; toCollection(Ljava/lang/Object; repr) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toCollection(Lscala/collection/IterableLike;Ljava/lang/Object;)Lscala/collection/Iterable;)(this, repr);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::forall(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::exists(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::find(Lscala/collection/IterableLike;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::foldRight(Lscala/collection/IterableLike;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::reduceRight(Lscala/collection/IterableLike;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toIterable(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Ljava/lang/Object; head() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::head(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; take(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::take(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; slice(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::slice(Lscala/collection/IterableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeWhile(Lscala/collection/IterableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/collection/Iterator; grouped(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::grouped(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size, I; step) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;I;)Lscala/collection/Iterator;)(this, size, step);
  }
  
  public Ljava/lang/Object; takeRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; dropRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::dropRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/Iterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/Iterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/Iterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/Iterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipWithIndex(Lscala/collection/IterableLike;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, bf);
  }
  
  public Z; sameElements(Lscala/collection/Iterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/Iterable;)Z;)(this, that);
  }
  
  public Lscala/collection/Seq; toSeq() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toSeq(Lscala/collection/IterableLike;)Lscala/collection/Seq;)(this);
  }
  
  public Z; canEqual(Ljava/lang/Object; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/IterableView; view() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public Lscala/collection/IterableView; view(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;I;I;)Lscala/collection/IterableView;)(this, from, until);
  }
  
  public Lscala/collection/Iterator; elements() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::elements(Lscala/collection/IterableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; first() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::first(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; firstOption() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::firstOption(Lscala/collection/IterableLike;)Lscala/Option;)(this);
  }
  
  public Lscala/collection/IterableView; projection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::projection(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public Lscala/collection/mutable/Builder; genericBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/Tuple2; unzip(Lscala/Function1; asPair) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple2;)(this, asPair);
  }
  
  public Lscala/collection/Traversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/Traversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Ljava/lang/Object; repr() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::repr(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public final Z; isTraversableAgain() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::isTraversableAgain(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Z; hasDefiniteSize() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::hasDefiniteSize(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; filter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filter(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::collect(Lscala/collection/TraversableLike;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, pf, bf);
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::partition(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::groupBy(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanLeft(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanRight(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Lscala/Option; headOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::headOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; tail() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tail(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; last() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::last(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; lastOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::lastOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; init() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::init(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; drop(I; n) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::drop(Lscala/collection/TraversableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::dropWhile(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::span(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/Tuple2; splitAt(I; n) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::splitAt(Lscala/collection/TraversableLike;I;)Lscala/Tuple2;)(this, n);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toTraversable(Lscala/collection/TraversableLike;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toIterator(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::withFilter(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/generic/FilterMonadic;)(this, p);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::count(Lscala/collection/TraversableOnce;Lscala/Function1;)I;)(this, p);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/List; toList() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toList(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toBuffer(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;)(this, sep);
  }
  
  public Ljava/lang/String; mkString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  private I; size$u0020;
  
  public I; size() {
    return this.(I;)size$u0020;
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; t;
  
  private Lscala/math/Ordering; ordering$u0020;
  
  public Lscala/math/Ordering; ordering() {
    return this.(Lscala/math/Ordering;)ordering$u0020;
  }
  
  public Z; isSmaller(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)().(Lscala/math/Ordering;::lt(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x, y);
  }
  
  protected Lscala/collection/mutable/Builder; newBuilder() {
    return Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/generic/SortedMapFactory;::newBuilder(Lscala/math/Ordering;)Lscala/collection/mutable/Builder;)(this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)());
  }
  
  public this(Lscala/math/Ordering; ordering) {
    (Lscala/collection/immutable/TreeMap;::this(I;Lscala/collection/immutable/RedBlack$Tree;Lscala/math/Ordering;)V;)(0, null, ordering);
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; tree$u0020;
  
  protected Lscala/collection/immutable/RedBlack$Tree; tree() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)tree$u0020;
  }
  
  public Lscala/collection/immutable/TreeMap; rangeImpl(Lscala/Option; from, Lscala/Option; until) {
    Lscala/collection/immutable/RedBlack$Tree; ntree = this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::range(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;)(from, until);
    return (new (Lscala/collection/immutable/TreeMap;::this(I;Lscala/collection/immutable/RedBlack$Tree;Lscala/math/Ordering;)V;)(ntree.(Lscala/collection/immutable/RedBlack$Tree;::count()I;)(), ntree, this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)()));
  }
  
  public Ljava/lang/Object; firstKey() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)t.(Lscala/collection/immutable/RedBlack$Tree;::first()Ljava/lang/Object;)();
  }
  
  public Ljava/lang/Object; lastKey() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)t.(Lscala/collection/immutable/RedBlack$Tree;::last()Ljava/lang/Object;)();
  }
  
  public I; compare(Ljava/lang/Object; k0, Ljava/lang/Object; k1) {
    return this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)().(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(k0, k1);
  }
  
  public Lscala/collection/immutable/TreeMap; empty() {
    return Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/immutable/TreeMap$;::empty(Lscala/math/Ordering;)Lscala/collection/immutable/TreeMap;)(this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)());
  }
  
  public Lscala/collection/immutable/TreeMap; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    I; $1$;
    if (this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key).(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)())
      {
        $1$ = (this.(Lscala/collection/immutable/TreeMap;::size()I;)() + 1);
      }
    else
      {
        $1$ = this.(Lscala/collection/immutable/TreeMap;::size()I;)();
      }
    I; newsize = $1$;
    return Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/immutable/TreeMap$;::scala$collection$immutable$TreeMap$$make(I;Lscala/collection/immutable/RedBlack$Tree;Lscala/math/Ordering;)Lscala/collection/immutable/TreeMap;)(newsize, this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::update(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key, value), this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)());
  }
  
  public Lscala/collection/immutable/TreeMap; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/immutable/TreeMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(kv.(Lscala/Tuple2;::_1()Ljava/lang/Object;)(), kv.(Lscala/Tuple2;::_2()Ljava/lang/Object;)());
  }
  
  public Lscala/collection/immutable/TreeMap; $plus(Lscala/Tuple2; elem1, Lscala/Tuple2; elem2, Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(elem1).(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(elem2).(Lscala/collection/TraversableLike;::$plus$plus(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(elems, Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/immutable/TreeMap$;::canBuildFrom(Lscala/math/Ordering;)Lscala/collection/generic/CanBuildFrom;)(this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)())).<cast>(Lscala/collection/immutable/TreeMap;);
  }
  
  public Lscala/collection/immutable/TreeMap; insert(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)(this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key).(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)());
    return Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/immutable/TreeMap$;::scala$collection$immutable$TreeMap$$make(I;Lscala/collection/immutable/RedBlack$Tree;Lscala/math/Ordering;)Lscala/collection/immutable/TreeMap;)((this.(Lscala/collection/immutable/TreeMap;::size()I;)() + 1), this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::update(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key, value), this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)());
  }
  
  public Lscala/collection/immutable/TreeMap; $minus(Ljava/lang/Object; key) {
    Lscala/collection/immutable/TreeMap; $2$;
    if (this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key).(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)())
      {
        $2$ = this;
      }
    else
      {
        $2$ = Lscala/collection/immutable/TreeMap$;.MODULE$.(Lscala/collection/immutable/TreeMap$;::scala$collection$immutable$TreeMap$$make(I;Lscala/collection/immutable/RedBlack$Tree;Lscala/math/Ordering;)Lscala/collection/immutable/TreeMap;)((this.(Lscala/collection/immutable/TreeMap;::size()I;)() - 1), this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::delete(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key), this.(Lscala/collection/immutable/TreeMap;::ordering()Lscala/math/Ordering;)());
      }
    return $2$;
  }
  
  public Lscala/Option; get(Ljava/lang/Object; key) {
    Lscala/collection/immutable/RedBlack$Tree; temp1 = this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(key);
    Lscala/Option; $3$;
    if (temp1.<instanceof>(Lscala/collection/immutable/RedBlack$NonEmpty;))
      {
        $3$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(temp1.<cast>(Lscala/collection/immutable/RedBlack$NonEmpty;).(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)()));
      }
    else
      {
        $3$ = Lscala/None$;.MODULE$;
      }
    return $3$;
  }
  
  public Lscala/collection/Iterator; iterator() {
    return this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::toStream()Lscala/collection/immutable/Stream;)().(Lscala/collection/LinearSeqLike;::iterator()Lscala/collection/Iterator;)();
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::toStream()Lscala/collection/immutable/Stream;)();
  }
  
  public V; foreach(Lscala/Function1; f$1) {
    this.(Lscala/collection/immutable/TreeMap;::tree()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::foreach(Lscala/Function2;)V;)((new (Lscala/collection/immutable/TreeMap$$anonfun$foreach$1;::this(Lscala/collection/immutable/TreeMap;Lscala/Function1;)V;)(this, f$1)));
  }
  
  public Lscala/collection/generic/Subtractable; repr() {
    return this.(Lscala/collection/TraversableLike;::repr()Ljava/lang/Object;)().<cast>(Lscala/collection/generic/Subtractable;);
  }
  
  public Lscala/collection/generic/Sorted; repr() {
    return this.(Lscala/collection/TraversableLike;::repr()Ljava/lang/Object;)().<cast>(Lscala/collection/generic/Sorted;);
  }
  
  public Lscala/collection/TraversableView; view(I; from, I; until) {
    return this.(Lscala/collection/IterableLike;::view(I;I;)Lscala/collection/IterableView;)(from, until);
  }
  
  public Lscala/collection/TraversableView; view() {
    return this.(Lscala/collection/IterableLike;::view()Lscala/collection/IterableView;)();
  }
  
  public Lscala/collection/Traversable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/IterableLike;::toCollection(Ljava/lang/Object;)Lscala/collection/Iterable;)(repr);
  }
  
  public Lscala/collection/Traversable; thisCollection() {
    return this.(Lscala/collection/IterableLike;::thisCollection()Lscala/collection/Iterable;)();
  }
  
  public Lscala/Function1; andThen(Lscala/Function1; g) {
    return this.(Lscala/PartialFunction;::andThen(Lscala/Function1;)Lscala/PartialFunction;)(g);
  }
  
  public Ljava/lang/Object; filterNot(Lscala/Function1; p) {
    return this.(Lscala/collection/MapLike;::filterNot(Lscala/Function1;)Lscala/collection/Map;)(p);
  }
  
  public Lscala/collection/Map; mapValues(Lscala/Function1; f) {
    return this.(Lscala/collection/immutable/MapLike;::mapValues(Lscala/Function1;)Lscala/collection/immutable/Map;)(f);
  }
  
  public Lscala/collection/Map; filterKeys(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/MapLike;::filterKeys(Lscala/Function1;)Lscala/collection/immutable/Map;)(p);
  }
  
  public Lscala/collection/Set; keySet() {
    return this.(Lscala/collection/SortedMapLike;::keySet()Lscala/collection/SortedSet;)();
  }
  
  public Lscala/collection/Map; $plus$plus(Lscala/collection/TraversableOnce; xs) {
    return this.(Lscala/collection/immutable/SortedMap;::$plus$plus(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/SortedMap;)(xs);
  }
  
  public Lscala/collection/immutable/Map; $plus$plus(Lscala/collection/TraversableOnce; xs) {
    return this.(Lscala/collection/immutable/SortedMap;::$plus$plus(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/SortedMap;)(xs);
  }
  
  public Lscala/collection/generic/Subtractable; $minus(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/immutable/TreeMap;::$minus(Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(elem);
  }
  
  public Lscala/collection/Map; $minus(Ljava/lang/Object; key) {
    return this.(Lscala/collection/immutable/TreeMap;::$minus(Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(key);
  }
  
  public Lscala/collection/Map; $plus(Lscala/Tuple2; kv1, Lscala/Tuple2; kv2, Lscala/collection/Seq; kvs) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/immutable/TreeMap;)(kv1, kv2, kvs);
  }
  
  public Lscala/collection/immutable/Map; $plus(Lscala/Tuple2; elem1, Lscala/Tuple2; elem2, Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/immutable/TreeMap;)(elem1, elem2, elems);
  }
  
  public Lscala/collection/SortedMap; $plus(Lscala/Tuple2; elem1, Lscala/Tuple2; elem2, Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/immutable/TreeMap;)(elem1, elem2, elems);
  }
  
  public Lscala/collection/immutable/SortedMap; $plus(Lscala/Tuple2; elem1, Lscala/Tuple2; elem2, Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/immutable/TreeMap;)(elem1, elem2, elems);
  }
  
  public Lscala/collection/Map; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(kv);
  }
  
  public Lscala/collection/immutable/Map; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(kv);
  }
  
  public Lscala/collection/SortedMap; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(kv);
  }
  
  public Lscala/collection/immutable/SortedMap; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/immutable/TreeMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/TreeMap;)(kv);
  }
  
  public Lscala/collection/Map; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/immutable/TreeMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(key, value);
  }
  
  public Lscala/collection/immutable/Map; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/immutable/TreeMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(key, value);
  }
  
  public Lscala/collection/SortedMap; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/immutable/TreeMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(key, value);
  }
  
  public Lscala/collection/immutable/SortedMap; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/immutable/TreeMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/TreeMap;)(key, value);
  }
  
  public Lscala/collection/Map; empty() {
    return this.(Lscala/collection/immutable/TreeMap;::empty()Lscala/collection/immutable/TreeMap;)();
  }
  
  public Lscala/collection/immutable/Map; empty() {
    return this.(Lscala/collection/immutable/TreeMap;::empty()Lscala/collection/immutable/TreeMap;)();
  }
  
  public Lscala/collection/SortedMap; empty() {
    return this.(Lscala/collection/immutable/TreeMap;::empty()Lscala/collection/immutable/TreeMap;)();
  }
  
  public Lscala/collection/immutable/SortedMap; empty() {
    return this.(Lscala/collection/immutable/TreeMap;::empty()Lscala/collection/immutable/TreeMap;)();
  }
  
  public Lscala/collection/generic/Sorted; rangeImpl(Lscala/Option; from, Lscala/Option; until) {
    return this.(Lscala/collection/immutable/TreeMap;::rangeImpl(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/TreeMap;)(from, until);
  }
  
  public Lscala/collection/SortedMap; rangeImpl(Lscala/Option; from, Lscala/Option; until) {
    return this.(Lscala/collection/immutable/TreeMap;::rangeImpl(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/TreeMap;)(from, until);
  }
  
  public this(I; size, Lscala/collection/immutable/RedBlack$Tree; t, Lscala/math/Ordering; ordering) {
    this.(I;)size$u0020 = size;
    this.(Lscala/collection/immutable/RedBlack$Tree;)t = t;
    this.(Lscala/math/Ordering;)ordering$u0020 = ordering;
    (Lscala/collection/immutable/RedBlack;::super()V;)();
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$init$(Lscala/collection/TraversableLike;)V;)(this);
    Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::$init$(Lscala/collection/generic/GenericTraversableTemplate;)V;)(this);
    Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::$init$(Lscala/collection/Traversable;)V;)(this);
    Lscala/collection/immutable/Traversable$class;.(Lscala/collection/immutable/Traversable$class;::$init$(Lscala/collection/immutable/Traversable;)V;)(this);
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::$init$(Lscala/collection/IterableLike;)V;)(this);
    Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::$init$(Lscala/collection/Iterable;)V;)(this);
    Lscala/collection/immutable/Iterable$class;.(Lscala/collection/immutable/Iterable$class;::$init$(Lscala/collection/immutable/Iterable;)V;)(this);
    Lscala/Function1$class;.(Lscala/Function1$class;::$init$(Lscala/Function1;)V;)(this);
    Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::$init$(Lscala/PartialFunction;)V;)(this);
    Lscala/collection/generic/Subtractable$class;.(Lscala/collection/generic/Subtractable$class;::$init$(Lscala/collection/generic/Subtractable;)V;)(this);
    Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::$init$(Lscala/collection/MapLike;)V;)(this);
    Lscala/collection/Map$class;.(Lscala/collection/Map$class;::$init$(Lscala/collection/Map;)V;)(this);
    Lscala/collection/immutable/MapLike$class;.(Lscala/collection/immutable/MapLike$class;::$init$(Lscala/collection/immutable/MapLike;)V;)(this);
    Lscala/collection/immutable/Map$class;.(Lscala/collection/immutable/Map$class;::$init$(Lscala/collection/immutable/Map;)V;)(this);
    Lscala/collection/generic/Sorted$class;.(Lscala/collection/generic/Sorted$class;::$init$(Lscala/collection/generic/Sorted;)V;)(this);
    Lscala/collection/SortedMapLike$class;.(Lscala/collection/SortedMapLike$class;::$init$(Lscala/collection/SortedMapLike;)V;)(this);
    Lscala/collection/SortedMap$class;.(Lscala/collection/SortedMap$class;::$init$(Lscala/collection/SortedMap;)V;)(this);
    Lscala/collection/immutable/SortedMap$class;.(Lscala/collection/immutable/SortedMap$class;::$init$(Lscala/collection/immutable/SortedMap;)V;)(this);
    Lscala/collection/immutable/RedBlack$Tree; $4$;
    if ((size == 0))
      {
        $4$ = this.(Lscala/collection/immutable/RedBlack;::Empty()Lscala/collection/immutable/RedBlack$Empty$;)();
      }
    else
      {
        $4$ = t;
      }
    this.(Lscala/collection/immutable/RedBlack$Tree;)tree$u0020 = $4$;
  }
}
