public class Lscala/collection/immutable/HashSet$HashTrieSet; extends Lscala/collection/immutable/HashSet; implements Lscala/ScalaObject; {
  
  private I; bitmap$u0020;
  
  private I; bitmap() {
    return this.(Lscala/collection/immutable/HashSet$HashTrieSet;)bitmap$u0020;
  }
  
  private V; bitmap_$eq(I; x$1) {
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)bitmap$u0020 = x$1;
  }
  
  private Lscala/collection/immutable/HashSet;[ scala$collection$immutable$HashSet$HashTrieSet$$elems$u0020;
  
  public final Lscala/collection/immutable/HashSet;[ scala$collection$immutable$HashSet$HashTrieSet$$elems() {
    return this.(Lscala/collection/immutable/HashSet$HashTrieSet;)scala$collection$immutable$HashSet$HashTrieSet$$elems$u0020;
  }
  
  private V; scala$collection$immutable$HashSet$HashTrieSet$$elems_$eq(Lscala/collection/immutable/HashSet;[ x$1) {
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)scala$collection$immutable$HashSet$HashTrieSet$$elems$u0020 = x$1;
  }
  
  private I; size0$u0020;
  
  private I; size0() {
    return this.(Lscala/collection/immutable/HashSet$HashTrieSet;)size0$u0020;
  }
  
  private V; size0_$eq(I; x$1) {
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)size0$u0020 = x$1;
  }
  
  public I; size() {
    return this.(Lscala/collection/immutable/HashSet$HashTrieSet;::size0()I;)();
  }
  
  public Z; get0(Ljava/lang/Object; key, I; hash, I; level) {
    I; index = ((hash >> level) & 31);
    I; mask = (1 << index);
    Z; $12$;
    if ((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() == -1))
      {
        $12$ = this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)()[(index & 31)].(Lscala/collection/immutable/HashSet;::get0(Ljava/lang/Object;I;I;)Z;)(key, hash, (level + 5));
      }
    else
      {
        Z; $13$;
        if (((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & mask) != 0))
          {
            I; offset = Ljava/lang/Integer;.(Ljava/lang/Integer;::bitCount(I;)I;)((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & (mask - 1)));
            $13$ = this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)()[offset].(Lscala/collection/immutable/HashSet;::get0(Ljava/lang/Object;I;I;)Z;)(key, hash, (level + 5));
          }
        else
          {
            $13$ = false;
          }
        $12$ = $13$;
      }
    return $12$;
  }
  
  public Lscala/collection/immutable/HashSet; updated0(Ljava/lang/Object; key, I; hash, I; level) {
    I; index = ((hash >> level) & 31);
    I; mask = (1 << index);
    I; offset = Ljava/lang/Integer;.(Ljava/lang/Integer;::bitCount(I;)I;)((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & (mask - 1)));
    Lscala/collection/immutable/HashSet; $14$;
    if (((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & mask) != 0))
      {
        Lscala/collection/immutable/HashSet;[ elemsNew = new Lscala/collection/immutable/HashSet;[this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length>];
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), 0, elemsNew, 0, this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length>);
        Lscala/collection/immutable/HashSet; sub = this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)()[offset];
        Lscala/collection/immutable/HashSet; subNew = sub.(Lscala/collection/immutable/HashSet;::updated0(Ljava/lang/Object;I;I;)Lscala/collection/immutable/HashSet;)(key, hash, (level + 5));
        elemsNew[offset] = subNew;
        $14$ = (new (Lscala/collection/immutable/HashSet$HashTrieSet;::this(I;Lscala/collection/immutable/HashSet;[I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)(), elemsNew, (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::size()I;)() + (subNew.(Lscala/collection/immutable/HashSet;::size()I;)() - sub.(Lscala/collection/immutable/HashSet;::size()I;)()))));
      }
    else
      {
        Lscala/collection/immutable/HashSet;[ elemsNew = new Lscala/collection/immutable/HashSet;[(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length> + 1)];
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), 0, elemsNew, 0, offset);
        elemsNew[offset] = (new (Lscala/collection/immutable/HashSet$HashSet1;::this(Ljava/lang/Object;I;)V;)(key, hash));
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), offset, elemsNew, (offset + 1), (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length> - offset));
        I; bitmapNew = (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() | mask);
        $14$ = (new (Lscala/collection/immutable/HashSet$HashTrieSet;::this(I;Lscala/collection/immutable/HashSet;[I;)V;)(bitmapNew, elemsNew, (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::size()I;)() + 1)));
      }
    return $14$;
  }
  
  public Lscala/collection/immutable/HashSet; removed0(Ljava/lang/Object; key, I; hash, I; level) {
    I; index = ((hash >> level) & 31);
    I; mask = (1 << index);
    I; offset = Ljava/lang/Integer;.(Ljava/lang/Integer;::bitCount(I;)I;)((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & (mask - 1)));
    Lscala/collection/immutable/HashSet; $15$;
    if (((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() & mask) != 0))
      {
        Lscala/collection/immutable/HashSet; sub = this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)()[offset];
        Lscala/collection/immutable/HashSet; subNew = sub.(Lscala/collection/immutable/HashSet;::removed0(Ljava/lang/Object;I;I;)Lscala/collection/immutable/HashSet;)(key, hash, (level + 5));
        Lscala/collection/immutable/HashSet; $16$;
        if (subNew.(Lscala/collection/SetLike;::isEmpty()Z;)())
          {
            I; bitmapNew = (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)() ^ mask);
            Lscala/collection/immutable/HashSet; $17$;
            if ((bitmapNew != 0))
              {
                Lscala/collection/immutable/HashSet;[ elemsNew = new Lscala/collection/immutable/HashSet;[(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length> - 1)];
                Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), 0, elemsNew, 0, offset);
                Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), (offset + 1), elemsNew, offset, ((this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length> - offset) - 1));
                I; sizeNew = (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::size()I;)() - sub.(Lscala/collection/immutable/HashSet;::size()I;)());
                $17$ = (new (Lscala/collection/immutable/HashSet$HashTrieSet;::this(I;Lscala/collection/immutable/HashSet;[I;)V;)(bitmapNew, elemsNew, sizeNew));
              }
            else
              {
                $17$ = Lscala/collection/immutable/HashSet$;.MODULE$.(Lscala/collection/immutable/HashSet$;::empty()Lscala/collection/immutable/HashSet;)();
              }
            $16$ = $17$;
          }
        else
          {
            Lscala/collection/immutable/HashSet;[ elemsNew = new Lscala/collection/immutable/HashSet;[this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length>];
            Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)(), 0, elemsNew, 0, this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length>);
            elemsNew[offset] = subNew;
            I; sizeNew = (this.(Lscala/collection/immutable/HashSet$HashTrieSet;::size()I;)() + (subNew.(Lscala/collection/immutable/HashSet;::size()I;)() - sub.(Lscala/collection/immutable/HashSet;::size()I;)()));
            $16$ = (new (Lscala/collection/immutable/HashSet$HashTrieSet;::this(I;Lscala/collection/immutable/HashSet;[I;)V;)(this.(Lscala/collection/immutable/HashSet$HashTrieSet;::bitmap()I;)(), elemsNew, sizeNew));
          }
        $15$ = $16$;
      }
    else
      {
        $15$ = this;
      }
    return $15$;
  }
  
  public Lscala/collection/Iterator; iterator() {
    return (new (Lscala/collection/immutable/HashSet$HashTrieSet$$anon$1;::this(Lscala/collection/immutable/HashSet$HashTrieSet;)V;)(this));
  }
  
  public V; foreach(Lscala/Function1; f) {
    I; i = 0;
    while$1: while(true) {
      if ((i < this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)().<length>))
        {
          {
            this.(Lscala/collection/immutable/HashSet$HashTrieSet;::scala$collection$immutable$HashSet$HashTrieSet$$elems()Lscala/collection/immutable/HashSet;[)()[i].(Lscala/collection/immutable/HashSet;::foreach(Lscala/Function1;)V;)(f);
            i = (i + 1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public this(I; bitmap, Lscala/collection/immutable/HashSet;[ elems, I; size0) {
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)bitmap$u0020 = bitmap;
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)scala$collection$immutable$HashSet$HashTrieSet$$elems$u0020 = elems;
    this.(Lscala/collection/immutable/HashSet$HashTrieSet;)size0$u0020 = size0;
    (Lscala/collection/immutable/HashSet;::super()V;)();
  }
}
