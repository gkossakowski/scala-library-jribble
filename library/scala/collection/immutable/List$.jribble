public final class Lscala/collection/immutable/List$; extends Lscala/collection/generic/SeqFactory; implements Lscala/ScalaObject; {
  public static Lscala/collection/immutable/List$; MODULE$ = new (Lscala/collection/immutable/List$;::this()V;)();
  
  public Lscala/collection/generic/CanBuildFrom; canBuildFrom() {
    return this.(Lscala/collection/generic/GenTraversableFactory;::ReusableCBF()Lscala/collection/generic/GenTraversableFactory$reusableCBF;)();
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
  }
  
  public Lscala/collection/immutable/List; empty() {
    return Lscala/collection/immutable/Nil$;.MODULE$;
  }
  
  public Lscala/collection/immutable/List; apply(Lscala/collection/Seq; xs) {
    return xs.(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; range(I; start, I; end, Lscala/Function1; step) {
    Z; up = (step.(Lscala/Function1;::apply$mcII$sp(I;)I;)(start) > start);
    Z; down = (step.(Lscala/Function1;::apply$mcII$sp(I;)I;)(start) < start);
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    I; i = start;
    while$15: while(true) {
      if (((!(up) || (i < end)) && (!(down) || (i > end))))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(i));
            I; next = step.(Lscala/Function1;::apply$mcII$sp(I;)I;)(i);
            if ((i == next))
              {
                throw (new (Ljava/lang/IllegalArgumentException;::this(Ljava/lang/String;)V;)(("the step function did not make any progress on " + Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(i))));
              }
            else
              {
                
              }
            i = next;
          }
          continue while$15;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; make(I; n, Ljava/lang/Object; elem) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    I; i = 0;
    while$16: while(true) {
      if ((i < n))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(elem);
            i = (i + 1);
          }
          continue while$16;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; flatten(Lscala/collection/immutable/List; xss) {
    Lscala/collection/mutable/ListBuffer; b$1 = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    xss.(Lscala/collection/LinearSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/List$$anonfun$flatten$1;::this(Lscala/collection/mutable/ListBuffer;)V;)(b$1)));
    return b$1.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/Tuple2; unzip(Lscala/collection/immutable/List; xs) {
    Lscala/collection/mutable/ListBuffer; b1 = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/mutable/ListBuffer; b2 = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; xc = xs;
    while$18: while(true) {
      if (!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            b1.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/Tuple2;).(Lscala/Tuple2;::_1()Ljava/lang/Object;)());
            b2.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/Tuple2;).(Lscala/Tuple2;::_2()Ljava/lang/Object;)());
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$18;
        }
      else
        {
          
        }
      break;
    }
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(b1.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)(), b2.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)()));
  }
  
  public Lscala/Tuple2; unzip(Lscala/collection/Iterable; xs) {
    return xs.(Lscala/collection/IterableLike;::foldRight(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(Lscala/collection/immutable/Nil$;.MODULE$, Lscala/collection/immutable/Nil$;.MODULE$)), (new (Lscala/collection/immutable/List$$anonfun$unzip$1;::this()V;)())).<cast>(Lscala/Tuple2;);
  }
  
  public Lscala/collection/immutable/List; lefts(Lscala/collection/Iterable; es) {
    return es.(Lscala/collection/IterableLike;::foldRight(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(Lscala/collection/immutable/Nil$;.MODULE$, (new (Lscala/collection/immutable/List$$anonfun$lefts$1;::this()V;)())).<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/collection/immutable/List; rights(Lscala/collection/Iterable; es) {
    return es.(Lscala/collection/IterableLike;::foldRight(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(Lscala/collection/immutable/Nil$;.MODULE$, (new (Lscala/collection/immutable/List$$anonfun$rights$1;::this()V;)())).<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/Tuple2; separate(Lscala/collection/Iterable; es) {
    return es.(Lscala/collection/IterableLike;::foldRight(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(Lscala/collection/immutable/Nil$;.MODULE$, Lscala/collection/immutable/Nil$;.MODULE$)), (new (Lscala/collection/immutable/List$$anonfun$separate$1;::this()V;)())).<cast>(Lscala/Tuple2;);
  }
  
  public Lscala/collection/immutable/List; fromIterator(Lscala/collection/Iterator; it) {
    return it.(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; fromArray(Ljava/lang/Object; arr) {
    return this.(Lscala/collection/immutable/List$;::fromArray(Ljava/lang/Object;I;I;)Lscala/collection/immutable/List;)(arr, 0, Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::array_length(Ljava/lang/Object;)I;)(arr));
  }
  
  public Lscala/collection/immutable/List; fromArray(Ljava/lang/Object; arr, I; start, I; len) {
    Lscala/collection/immutable/List; res = Lscala/collection/immutable/Nil$;.MODULE$;
    I; i = (start + len);
    while$19: while(true) {
      if ((i > start))
        {
          {
            i = (i - 1);
            Ljava/lang/Object; x$14 = Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::array_apply(Ljava/lang/Object;I;)Ljava/lang/Object;)(arr, i);
            res = res.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$14);
          }
          continue while$19;
        }
      else
        {
          
        }
      break;
    }
    return res;
  }
  
  public Lscala/collection/immutable/List; fromString(Ljava/lang/String; str, C; separator) {
    Lscala/collection/immutable/List; words = Lscala/collection/immutable/Nil$;.MODULE$;
    I; pos = str.(Ljava/lang/String;::length()I;)();
    while$20: while(true) {
      if ((pos > 0))
        {
          {
            I; pos1 = str.(Ljava/lang/String;::lastIndexOf(I;I;)I;)(separator.<cast>(I;), (pos - 1));
            if (((pos1 + 1) < pos))
              {
                Ljava/lang/String; x$15 = str.(Ljava/lang/String;::substring(I;I;)Ljava/lang/String;)((pos1 + 1), pos);
                words = words.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$15);
              }
            else
              {
                
              }
            pos = pos1;
          }
          continue while$20;
        }
      else
        {
          
        }
      break;
    }
    return words;
  }
  
  public Ljava/lang/String; toString(Lscala/collection/immutable/List; xs) {
    Lscala/collection/mutable/StringBuilder; sb = (new (Lscala/collection/mutable/StringBuilder;::this()V;)());
    Lscala/collection/immutable/List; xc = xs;
    while$21: while(true) {
      if (!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            sb.(Lscala/collection/mutable/StringBuilder;::append(C;)Lscala/collection/mutable/StringBuilder;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToChar(Ljava/lang/Object;)C;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()));
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$21;
        }
      else
        {
          
        }
      break;
    }
    return sb.(Lscala/collection/mutable/StringBuilder;::toString()Ljava/lang/String;)();
  }
  
  public Lscala/collection/immutable/List; mapConserve(Lscala/collection/immutable/List; xs$1, Lscala/Function1; f$2) {
    return this.(Lscala/collection/immutable/List$;::loop$4(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(xs$1, xs$1, f$2);
  }
  
  public Lscala/collection/immutable/List; map2(Lscala/collection/immutable/List; xs, Lscala/collection/immutable/List; ys, Lscala/Function2; f) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; xc = xs;
    Lscala/collection/immutable/List; yc = ys;
    while$23: while(true) {
      if ((!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(yc.(Lscala/collection/IterableLike;::isEmpty()Z;)())))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), yc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()));
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            yc = yc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$23;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; map3(Lscala/collection/immutable/List; xs, Lscala/collection/immutable/List; ys, Lscala/collection/immutable/List; zs, Lscala/Function3; f) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; xc = xs;
    Lscala/collection/immutable/List; yc = ys;
    Lscala/collection/immutable/List; zc = zs;
    while$24: while(true) {
      if (((!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(yc.(Lscala/collection/IterableLike;::isEmpty()Z;)())) && !(zc.(Lscala/collection/IterableLike;::isEmpty()Z;)())))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(f.(Lscala/Function3;::apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), yc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), zc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()));
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            yc = yc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            zc = zc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$24;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Z; forall2(Lscala/collection/immutable/List; xs, Lscala/collection/immutable/List; ys, Lscala/Function2; f) {
    Lscala/collection/immutable/List; xc = xs;
    Lscala/collection/immutable/List; yc = ys;
    while$25: while(true) {
      if ((!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(yc.(Lscala/collection/IterableLike;::isEmpty()Z;)())))
        {
          {
            if (!(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), yc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
              {
                return false;
              }
            else
              {
                
              }
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            yc = yc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$25;
        }
      else
        {
          
        }
      break;
    }
    return true;
  }
  
  public Z; exists2(Lscala/collection/immutable/List; xs, Lscala/collection/immutable/List; ys, Lscala/Function2; f) {
    Lscala/collection/immutable/List; xc = xs;
    Lscala/collection/immutable/List; yc = ys;
    while$26: while(true) {
      if ((!(xc.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(yc.(Lscala/collection/IterableLike;::isEmpty()Z;)())))
        {
          {
            if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), yc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)())))
              {
                return true;
              }
            else
              {
                
              }
            xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            yc = yc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$26;
        }
      else
        {
          
        }
      break;
    }
    return false;
  }
  
  public Lscala/collection/immutable/List; transpose(Lscala/collection/immutable/List; xss) {
    Lscala/collection/mutable/ListBuffer; buf = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; yss = xss;
    while$27: while(true) {
      if (!(yss.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            buf.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(yss.(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/collection/immutable/List$$anonfun$transpose$1;::this()V;)()), this.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()));
            yss = yss.(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/collection/immutable/List$$anonfun$transpose$2;::this()V;)()), this.(Lscala/collection/immutable/List$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/List;);
          }
          continue while$27;
        }
      else
        {
          
        }
      break;
    }
    return buf.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/GenTraversable; apply(Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(elems);
  }
  
  public Lscala/collection/GenTraversable; empty() {
    return this.(Lscala/collection/immutable/List$;::empty()Lscala/collection/immutable/List;)();
  }
  
  private final Lscala/collection/immutable/List; loop$4(Lscala/collection/immutable/List; ys, Lscala/collection/immutable/List; xs$1, Lscala/Function1; f$2) {
    Lscala/collection/immutable/List; $19$;
    if (ys.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $19$ = xs$1;
      }
    else
      {
        Ljava/lang/Object; head0 = ys.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)();
        Ljava/lang/Object; head1 = f$2.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(head0);
        Lscala/collection/immutable/List; $20$;
        if ((head1 == head0))
          {
            $20$ = this.(Lscala/collection/immutable/List$;::loop$4(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(ys.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;), xs$1, f$2);
          }
        else
          {
            Ljava/lang/Object; x$16 = head1;
            Lscala/collection/immutable/List; ys1 = this.(Lscala/collection/immutable/List$;::mapConserve(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(ys.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;), f$2).(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$16);
            Lscala/collection/immutable/List; $21$;
            if ((xs$1 == ys))
              {
                $21$ = ys1;
              }
            else
              {
                Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
                Lscala/collection/immutable/List; xc = xs$1;
                while$22: while(true) {
                  if ((xc != ys))
                    {
                      {
                        b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
                        xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
                      }
                      continue while$22;
                    }
                  else
                    {
                      
                    }
                  break;
                }
                $21$ = b.(Lscala/collection/mutable/ListBuffer;::prependToList(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(ys1);
              }
            $20$ = $21$;
          }
        $19$ = $20$;
      }
    return $19$;
  }
  
  public this() {
    (Lscala/collection/generic/SeqFactory;::super()V;)();
  }
}
