public final class Lscala/collection/immutable/Stream$; extends Lscala/collection/generic/SeqFactory; implements Lscala/ScalaObject; {
  public static Lscala/collection/immutable/Stream$; MODULE$ = new (Lscala/collection/immutable/Stream$;::this()V;)();
  
  public Lscala/collection/generic/CanBuildFrom; canBuildFrom() {
    return (new (Lscala/collection/immutable/Stream$StreamCanBuildFrom;::this()V;)());
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return (new (Lscala/collection/immutable/Stream$StreamBuilder;::this()V;)());
  }
  
  public Lscala/collection/immutable/Stream; empty() {
    return Lscala/collection/immutable/Stream$Empty$;.MODULE$;
  }
  
  public Lscala/collection/immutable/Stream; apply(Lscala/collection/Seq; xs) {
    return xs.(Lscala/collection/IterableLike;::toStream()Lscala/collection/immutable/Stream;)();
  }
  
  public Lscala/collection/immutable/Stream$ConsWrapper; consWrapper(Lscala/Function0; stream) {
    return (new (Lscala/collection/immutable/Stream$ConsWrapper;::this(Lscala/Function0;)V;)(stream));
  }
  
  private Lscala/collection/immutable/Stream$$hash$colon$colon$; lazy_$colon$colon$u0020;
  
  public Lscala/collection/immutable/Stream$$hash$colon$colon$; lazy_$colon$colon() {
    if (((this.(Lscala/collection/generic/GenTraversableFactory;)bitmap$0 & 2) == 0))
      {
        if (((this.(Lscala/collection/generic/GenTraversableFactory;)bitmap$0 & 2) == 0))
          {
            this.(Lscala/collection/immutable/Stream$;)lazy_$colon$colon$u0020 = Lscala/collection/immutable/Stream$$hash$colon$colon$;.MODULE$;
            this.(Lscala/collection/generic/GenTraversableFactory;)bitmap$0 = (this.(Lscala/collection/generic/GenTraversableFactory;)bitmap$0 | 2);
          }
      }
    return this.(Lscala/collection/immutable/Stream$;)lazy_$colon$colon$u0020;
  }
  
  public Lscala/collection/immutable/Stream; iterate(Ljava/lang/Object; start$2, Lscala/Function1; f$6) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(start$2, (new (Lscala/collection/immutable/Stream$$anonfun$iterate$1;::this(Ljava/lang/Object;Lscala/Function1;)V;)(start$2, f$6)));
  }
  
  public Lscala/collection/immutable/Stream; iterate(Ljava/lang/Object; start, I; len, Lscala/Function1; f) {
    return this.(Lscala/collection/immutable/Stream$;::iterate(Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Stream;)(start, f).(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)(len);
  }
  
  public Lscala/collection/immutable/Stream; from(I; start$1, I; step$1) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(start$1), (new (Lscala/collection/immutable/Stream$$anonfun$from$1;::this(I;I;)V;)(start$1, step$1)));
  }
  
  public Lscala/collection/immutable/Stream; from(I; start) {
    return this.(Lscala/collection/immutable/Stream$;::from(I;I;)Lscala/collection/immutable/Stream;)(start, 1);
  }
  
  public Lscala/collection/immutable/Stream; continually(Lscala/Function0; elem$3) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(elem$3.(Lscala/Function0;::apply()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$continually$1;::this(Lscala/Function0;)V;)(elem$3)));
  }
  
  public Lscala/collection/immutable/Stream; fill(I; n$2, Lscala/Function0; elem$2) {
    Lscala/collection/immutable/Stream; $32$;
    if ((n$2 <= 0))
      {
        $32$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    else
      {
        $32$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(elem$2.(Lscala/Function0;::apply()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$fill$1;::this(I;Lscala/Function0;)V;)(n$2, elem$2)));
      }
    return $32$;
  }
  
  public Lscala/collection/immutable/Stream; tabulate(I; n$3, Lscala/Function1; f$7) {
    return this.(Lscala/collection/immutable/Stream$;::loop$5(I;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(0, n$3, f$7);
  }
  
  public Lscala/collection/immutable/Stream; range(Ljava/lang/Object; start$3, Ljava/lang/Object; end$2, Ljava/lang/Object; step$2, Lscala/math/Integral; evidence$1$1) {
    Lscala/math/Integral; num$1 = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::implicitly(Ljava/lang/Object;)Ljava/lang/Object;)(evidence$1$1).<cast>(Lscala/math/Integral;);
    Z; $33$;
    if (num$1.(Lscala/math/Ordering;::mkOrderingOps(Ljava/lang/Object;)Lscala/math/Ordering$Ops;)(step$2).(Lscala/math/Ordering$Ops;::$less(Ljava/lang/Object;)Z;)(num$1.(Lscala/math/Numeric;::zero()Ljava/lang/Object;)()))
      {
        $33$ = num$1.(Lscala/math/Ordering;::mkOrderingOps(Ljava/lang/Object;)Lscala/math/Ordering$Ops;)(start$3).(Lscala/math/Ordering$Ops;::$less$eq(Ljava/lang/Object;)Z;)(end$2);
      }
    else
      {
        $33$ = num$1.(Lscala/math/Ordering;::mkOrderingOps(Ljava/lang/Object;)Lscala/math/Ordering$Ops;)(end$2).(Lscala/math/Ordering$Ops;::$less$eq(Ljava/lang/Object;)Z;)(start$3);
      }
    Lscala/collection/immutable/Stream; $34$;
    if ($33$)
      {
        $34$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    else
      {
        $34$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(start$3, (new (Lscala/collection/immutable/Stream$$anonfun$range$1;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;Lscala/math/Integral;)V;)(start$3, end$2, step$2, evidence$1$1, num$1)));
      }
    return $34$;
  }
  
  public Lscala/collection/immutable/Stream$Cons; filteredTail(Lscala/collection/immutable/Stream; stream$2, Lscala/Function1; p$1) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(stream$2.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$filteredTail$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(stream$2, p$1)));
  }
  
  public Lscala/collection/immutable/Stream$Cons; collectedTail(Lscala/collection/immutable/Stream; stream$1, Lscala/PartialFunction; pf$1, Lscala/collection/generic/CanBuildFrom; bf$1) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(pf$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(stream$1.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()), (new (Lscala/collection/immutable/Stream$$anonfun$collectedTail$1;::this(Lscala/collection/immutable/Stream;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)V;)(stream$1, pf$1, bf$1)));
  }
  
  public Lscala/collection/immutable/Stream; fromIterator(Lscala/collection/Iterator; it) {
    return it.(Lscala/collection/Iterator;::toStream()Lscala/collection/immutable/Stream;)();
  }
  
  public Lscala/collection/immutable/Stream; concat(Lscala/collection/Iterable; xs) {
    return this.(Lscala/collection/immutable/Stream$;::concat(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;)(xs.(Lscala/collection/IterableLike;::iterator()Lscala/collection/Iterator;)());
  }
  
  public Lscala/collection/immutable/Stream; concat(Lscala/collection/Iterator; xs) {
    return xs.(Lscala/collection/Iterator;::toStream()Lscala/collection/immutable/Stream;)().(Lscala/collection/immutable/Stream;::flatten(Lscala/Function1;)Lscala/collection/immutable/Stream;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::conforms()Lscala/Predef$$less$colon$less;)());
  }
  
  public Lscala/collection/immutable/Stream; range(I; start, I; end, Lscala/Function1; step) {
    return this.(Lscala/collection/immutable/Stream$;::iterate(Ljava/lang/Object;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(start), (end - start), step);
  }
  
  public Lscala/collection/immutable/Stream; const(Ljava/lang/Object; elem$4) {
    return Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(elem$4, (new (Lscala/collection/immutable/Stream$$anonfun$const$1;::this(Ljava/lang/Object;)V;)(elem$4)));
  }
  
  public Lscala/collection/immutable/Stream; make(I; n, Ljava/lang/Object; elem$5) {
    return this.(Lscala/collection/immutable/Stream$;::fill(I;Lscala/Function0;)Lscala/collection/immutable/Stream;)(n, (new (Lscala/collection/immutable/Stream$$anonfun$make$1;::this(Ljava/lang/Object;)V;)(elem$5)));
  }
  
  public Lscala/collection/GenTraversable; range(Ljava/lang/Object; start, Ljava/lang/Object; end, Ljava/lang/Object; step, Lscala/math/Integral; evidence$2) {
    return this.(Lscala/collection/immutable/Stream$;::range(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/immutable/Stream;)(start, end, step, evidence$2);
  }
  
  public Lscala/collection/GenTraversable; tabulate(I; n, Lscala/Function1; f) {
    return this.(Lscala/collection/immutable/Stream$;::tabulate(I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(n, f);
  }
  
  public Lscala/collection/GenTraversable; fill(I; n, Lscala/Function0; elem) {
    return this.(Lscala/collection/immutable/Stream$;::fill(I;Lscala/Function0;)Lscala/collection/immutable/Stream;)(n, elem);
  }
  
  public Lscala/collection/GenTraversable; iterate(Ljava/lang/Object; start, I; len, Lscala/Function1; f) {
    return this.(Lscala/collection/immutable/Stream$;::iterate(Ljava/lang/Object;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(start, len, f);
  }
  
  public Lscala/collection/GenTraversable; apply(Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/immutable/Stream$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/Stream;)(elems);
  }
  
  public Lscala/collection/GenTraversable; empty() {
    return this.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)();
  }
  
  public final Lscala/collection/immutable/Stream; loop$5(I; i$1, I; n$3, Lscala/Function1; f$7) {
    Lscala/collection/immutable/Stream; $35$;
    if ((i$1 >= n$3))
      {
        $35$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    else
      {
        $35$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(f$7.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(i$1)), (new (Lscala/collection/immutable/Stream$$anonfun$loop$5$1;::this(I;Lscala/Function1;I;)V;)(n$3, f$7, i$1)));
      }
    return $35$;
  }
  
  public this() {
    (Lscala/collection/generic/SeqFactory;::super()V;)();
  }
}
