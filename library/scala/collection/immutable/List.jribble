public abstract class Lscala/collection/immutable/List; extends Ljava/lang/Object; implements Lscala/collection/immutable/LinearSeq;, Lscala/Product;, Lscala/collection/generic/GenericTraversableTemplate;, Lscala/collection/LinearSeqOptimized;, Lscala/ScalaObject; {
  
  public final Z; scala$collection$LinearSeqOptimized$$super$sameElements(Lscala/collection/Iterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/Iterable;)Z;)(this, that);
  }
  
  public I; length() {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::length(Lscala/collection/LinearSeqOptimized;)I;)(this);
  }
  
  public Ljava/lang/Object; apply(I; n) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::apply(Lscala/collection/LinearSeqOptimized;I;)Ljava/lang/Object;)(this, n);
  }
  
  public V; foreach(Lscala/Function1; f) {
    Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::foreach(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)V;)(this, f);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::forall(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Z;)(this, p);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::count(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::find(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; f) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, f);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; f) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::foldRight(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, f);
  }
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; f) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;)Ljava/lang/Object;)(this, f);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::reduceRight(Lscala/collection/LinearSeqOptimized;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Ljava/lang/Object; last() {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::last(Lscala/collection/LinearSeqOptimized;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/collection/LinearSeqOptimized; dropRight(I; n) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::dropRight(Lscala/collection/LinearSeqOptimized;I;)Lscala/collection/LinearSeqOptimized;)(this, n);
  }
  
  public Z; sameElements(Lscala/collection/Iterable; that) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/Iterable;)Z;)(this, that);
  }
  
  public I; lengthCompare(I; len) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::lengthCompare(Lscala/collection/LinearSeqOptimized;I;)I;)(this, len);
  }
  
  public Z; isDefinedAt(I; x) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::isDefinedAt(Lscala/collection/LinearSeqOptimized;I;)Z;)(this, x);
  }
  
  public I; segmentLength(Lscala/Function1; p, I; from) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::segmentLength(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, from);
  }
  
  public I; indexWhere(Lscala/Function1; p, I; from) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::indexWhere(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, from);
  }
  
  public I; lastIndexWhere(Lscala/Function1; p, I; end) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::lastIndexWhere(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, end);
  }
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/String; productPrefix() {
    return Lscala/Product$class;.(Lscala/Product$class;::productPrefix(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/LinearSeq; thisCollection() {
    return Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::thisCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(this);
  }
  
  public Lscala/collection/LinearSeq; toCollection(Lscala/collection/LinearSeqLike; repr) {
    return Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::toCollection(Lscala/collection/LinearSeqLike;Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(this, repr);
  }
  
  public Lscala/collection/Iterator; iterator() {
    return Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::iterator(Lscala/collection/LinearSeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public I; size() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::size(Lscala/collection/SeqLike;)I;)(this);
  }
  
  public I; prefixLength(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::prefixLength(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public I; indexWhere(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexWhere(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public I; findIndexOf(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::findIndexOf(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public I; indexOf(Ljava/lang/Object; elem) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOf(Lscala/collection/SeqLike;Ljava/lang/Object;)I;)(this, elem);
  }
  
  public I; indexOf(Ljava/lang/Object; elem, I; from) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOf(Lscala/collection/SeqLike;Ljava/lang/Object;I;)I;)(this, elem, from);
  }
  
  public I; lastIndexOf(Ljava/lang/Object; elem) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOf(Lscala/collection/SeqLike;Ljava/lang/Object;)I;)(this, elem);
  }
  
  public I; lastIndexOf(Ljava/lang/Object; elem, I; end) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOf(Lscala/collection/SeqLike;Ljava/lang/Object;I;)I;)(this, elem, end);
  }
  
  public I; lastIndexWhere(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexWhere(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public Ljava/lang/Object; reverseMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reverseMap(Lscala/collection/SeqLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Lscala/collection/Iterator; reverseIterator() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reverseIterator(Lscala/collection/SeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; reversedElements() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reversedElements(Lscala/collection/SeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Z; startsWith(Lscala/collection/Seq; that, I; offset) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::startsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)Z;)(this, that, offset);
  }
  
  public Z; startsWith(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::startsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public Z; endsWith(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::endsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public I; indexOfSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)I;)(this, that);
  }
  
  public I; indexOfSlice(Lscala/collection/Seq; that, I; from) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)I;)(this, that, from);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)I;)(this, that);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that, I; end) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)I;)(this, that, end);
  }
  
  public Z; containsSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::containsSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public Z; contains(Ljava/lang/Object; elem) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::contains(Lscala/collection/SeqLike;Ljava/lang/Object;)Z;)(this, elem);
  }
  
  public Ljava/lang/Object; union(Lscala/collection/Seq; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::union(Lscala/collection/SeqLike;Lscala/collection/Seq;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; diff(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::diff(Lscala/collection/SeqLike;Lscala/collection/Seq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; intersect(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::intersect(Lscala/collection/SeqLike;Lscala/collection/Seq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; distinct() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::distinct(Lscala/collection/SeqLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; patch(I; from, Lscala/collection/Seq; patch, I; replaced, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::patch(Lscala/collection/SeqLike;I;Lscala/collection/Seq;I;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, from, patch, replaced, bf);
  }
  
  public Ljava/lang/Object; updated(I; index, Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::updated(Lscala/collection/SeqLike;I;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, index, elem, bf);
  }
  
  public Ljava/lang/Object; $colon$plus(Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$colon$plus(Lscala/collection/SeqLike;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, elem, bf);
  }
  
  public Ljava/lang/Object; padTo(I; len, Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::padTo(Lscala/collection/SeqLike;I;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, len, elem, bf);
  }
  
  public Z; corresponds(Lscala/collection/Seq; that, Lscala/Function2; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::corresponds(Lscala/collection/SeqLike;Lscala/collection/Seq;Lscala/Function2;)Z;)(this, that, p);
  }
  
  public Ljava/lang/Object; sortWith(Lscala/Function2; lt) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sortWith(Lscala/collection/SeqLike;Lscala/Function2;)Ljava/lang/Object;)(this, lt);
  }
  
  public Ljava/lang/Object; sortBy(Lscala/Function1; f, Lscala/math/Ordering; ord) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sortBy(Lscala/collection/SeqLike;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, ord);
  }
  
  public Ljava/lang/Object; sorted(Lscala/math/Ordering; ord) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;)Ljava/lang/Object;)(this, ord);
  }
  
  public Lscala/collection/Seq; toSeq() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::toSeq(Lscala/collection/SeqLike;)Lscala/collection/Seq;)(this);
  }
  
  public Lscala/collection/immutable/Range; indices() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indices(Lscala/collection/SeqLike;)Lscala/collection/immutable/Range;)(this);
  }
  
  public Lscala/collection/SeqView; view() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::view(Lscala/collection/SeqLike;)Lscala/collection/SeqView;)(this);
  }
  
  public Lscala/collection/SeqView; view(I; from, I; until) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::view(Lscala/collection/SeqLike;I;I;)Lscala/collection/SeqView;)(this, from, until);
  }
  
  public I; hashCode() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::hashCode(Lscala/collection/SeqLike;)I;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::equals(Lscala/collection/SeqLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::toString(Lscala/collection/SeqLike;)Ljava/lang/String;)(this);
  }
  
  public I; findLastIndexOf(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::findLastIndexOf(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public Z; equalsWith(Lscala/collection/Seq; that, Lscala/Function2; f) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::equalsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;Lscala/Function2;)Z;)(this, that, f);
  }
  
  public Lscala/collection/SeqView; projection() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::projection(Lscala/collection/SeqLike;)Lscala/collection/SeqView;)(this);
  }
  
  public Lscala/PartialFunction; orElse(Lscala/PartialFunction; that) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::orElse(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;)(this, that);
  }
  
  public Lscala/PartialFunction; andThen(Lscala/Function1; k) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::andThen(Lscala/PartialFunction;Lscala/Function1;)Lscala/PartialFunction;)(this, k);
  }
  
  public Lscala/Function1; lift() {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::lift(Lscala/PartialFunction;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; compose(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toIterable(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterator; grouped(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::grouped(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size, I; step) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;I;)Lscala/collection/Iterator;)(this, size, step);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/Iterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/Iterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/Iterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/Iterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipWithIndex(Lscala/collection/IterableLike;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, bf);
  }
  
  public Z; canEqual(Ljava/lang/Object; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/Iterator; elements() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::elements(Lscala/collection/IterableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; first() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::first(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; firstOption() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::firstOption(Lscala/collection/IterableLike;)Lscala/Option;)(this);
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::newBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/collection/mutable/Builder; genericBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/Tuple2; unzip(Lscala/Function1; asPair) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple2;)(this, asPair);
  }
  
  public Lscala/collection/Traversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/Traversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Ljava/lang/Object; repr() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::repr(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public final Z; isTraversableAgain() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::isTraversableAgain(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Z; hasDefiniteSize() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::hasDefiniteSize(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; filter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filter(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Ljava/lang/Object; filterNot(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filterNot(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::collect(Lscala/collection/TraversableLike;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, pf, bf);
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::partition(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::groupBy(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanLeft(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanRight(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Lscala/Option; headOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::headOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; tail() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tail(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; lastOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::lastOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; init() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::init(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toTraversable(Lscala/collection/TraversableLike;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toIterator(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::withFilter(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/generic/FilterMonadic;)(this, p);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toBuffer(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;)(this, sep);
  }
  
  public Ljava/lang/String; mkString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, start, sep, end);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/immutable/List$;.MODULE$;
  }
  
  public abstract Z; isEmpty();
  
  public abstract Ljava/lang/Object; head();
  
  public Lscala/collection/immutable/List; $colon$colon(Ljava/lang/Object; x) {
    return (new (Lscala/collection/immutable/$colon$colon;::this(Ljava/lang/Object;Lscala/collection/immutable/List;)V;)(x, this));
  }
  
  public Lscala/collection/immutable/List; $colon$colon$colon(Lscala/collection/immutable/List; prefix) {
    Lscala/collection/immutable/List; $1$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $1$ = prefix;
      }
    else
      {
        $1$ = (new (Lscala/collection/mutable/ListBuffer;::this()V;)()).(Lscala/collection/generic/Growable;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(prefix).<cast>(Lscala/collection/mutable/ListBuffer;).(Lscala/collection/mutable/ListBuffer;::prependToList(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(this);
      }
    return $1$;
  }
  
  public Lscala/collection/immutable/List; reverse_$colon$colon$colon(Lscala/collection/immutable/List; prefix) {
    Lscala/collection/immutable/List; these = this;
    Lscala/collection/immutable/List; pres = prefix;
    while$1: while(true) {
      if (!(pres.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            Ljava/lang/Object; x$1 = pres.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)();
            these = these.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$1);
            pres = pres.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    return these;
  }
  
  public Lscala/collection/immutable/List; mapConserve(Lscala/Function1; f$1) {
    return this.(Lscala/collection/immutable/List;::loop$1(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(this, f$1);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    Lscala/collection/mutable/Builder; b = bf.(Lscala/collection/generic/CanBuildFrom;::apply(Ljava/lang/Object;)Lscala/collection/mutable/Builder;)(this);
    Ljava/lang/Object; $2$;
    if (b.<instanceof>(Lscala/collection/mutable/ListBuffer;))
      {
        Lscala/collection/immutable/List; x$3 = this;
        $2$ = that.(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)().(Lscala/collection/immutable/List;::$colon$colon$colon(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(x$3);
      }
    else
      {
        $2$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
      }
    return $2$;
  }
  
  public Ljava/lang/Object; $plus$colon(Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    Lscala/collection/generic/CanBuildFrom; temp1 = bf;
    Ljava/lang/Object; $3$;
    if ((temp1.<instanceof>(Lscala/collection/generic/CanBuildFrom;) && temp1.<instanceof>(Lscala/collection/generic/TraversableFactory$GenericCanBuildFrom;)))
      {
        Ljava/lang/Object; x$4 = elem;
        $3$ = this.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$4);
      }
    else
      {
        $3$ = Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$plus$colon(Lscala/collection/SeqLike;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, elem, bf);
      }
    return $3$;
  }
  
  public Lscala/collection/immutable/List; toList() {
    return this;
  }
  
  public Lscala/collection/immutable/List; take(I; n) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    I; i = 0;
    Lscala/collection/immutable/List; these = this;
    while$3: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && (i < n)))
        {
          {
            i = (i + 1);
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$3;
        }
      else
        {
          
        }
      break;
    }
    Lscala/collection/immutable/List; $4$;
    if (these.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $4$ = this;
      }
    else
      {
        $4$ = b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
      }
    return $4$;
  }
  
  public Lscala/collection/immutable/List; drop(I; n) {
    Lscala/collection/immutable/List; these = this;
    I; count = n;
    while$4: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && (count > 0)))
        {
          {
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            count = (count - 1);
          }
          continue while$4;
        }
      else
        {
          
        }
      break;
    }
    return these;
  }
  
  public Lscala/collection/immutable/List; slice(I; start, I; end) {
    I; len = end;
    if ((start > 0))
      {
        len = (len - start);
      }
    else
      {
        
      }
    return this.(Lscala/collection/immutable/List;::drop(I;)Lscala/collection/immutable/List;)(start).(Lscala/collection/immutable/List;::take(I;)Lscala/collection/immutable/List;)(len);
  }
  
  public Lscala/collection/immutable/List; takeRight(I; n) {
    return this.(Lscala/collection/immutable/List;::loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(this.(Lscala/collection/immutable/List;::drop(I;)Lscala/collection/immutable/List;)(n), this);
  }
  
  public Lscala/Tuple2; splitAt(I; n) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    I; i = 0;
    Lscala/collection/immutable/List; these = this;
    while$5: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && (i < n)))
        {
          {
            i = (i + 1);
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$5;
        }
      else
        {
          
        }
      break;
    }
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)(), these));
  }
  
  public Lscala/collection/immutable/List; takeWhile(Lscala/Function1; p) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; these = this;
    while$6: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$6;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; dropWhile(Lscala/Function1; p$1) {
    return this.(Lscala/collection/immutable/List;::loop$3(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(this, p$1);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; these = this;
    while$7: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
        {
          {
            b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$7;
        }
      else
        {
          
        }
      break;
    }
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)(), these));
  }
  
  public Lscala/collection/immutable/List; reverse() {
    Lscala/collection/immutable/List; result = Lscala/collection/immutable/Nil$;.MODULE$;
    Lscala/collection/immutable/List; these = this;
    while$8: while(true) {
      if (!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            Ljava/lang/Object; x$5 = these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)();
            result = result.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$5);
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$8;
        }
      else
        {
          
        }
      break;
    }
    return result;
  }
  
  public Ljava/lang/String; stringPrefix() {
    return "List";
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    Lscala/collection/immutable/Stream; $5$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $5$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    else
      {
        $5$ = (new (Lscala/collection/immutable/Stream$Cons;::this(Ljava/lang/Object;Lscala/Function0;)V;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/List$$anonfun$toStream$1;::this(Lscala/collection/immutable/List;)V;)(this))));
      }
    return $5$;
  }
  
  public Lscala/Tuple2; `break`(Lscala/Function1; p$2) {
    return this.(Lscala/collection/immutable/List;::span(Lscala/Function1;)Lscala/Tuple2;)((new (Lscala/collection/immutable/List$$anonfun$break$1;::this(Lscala/collection/immutable/List;Lscala/Function1;)V;)(this, p$2)));
  }
  
  public Lscala/collection/immutable/List; remove(Lscala/Function1; p) {
    return this.(Lscala/collection/TraversableLike;::filterNot(Lscala/Function1;)Ljava/lang/Object;)(p).<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/collection/immutable/List; $minus$minus(Lscala/collection/immutable/List; that) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; these = this;
    while$9: while(true) {
      if (!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            if (!(that.(Lscala/collection/SeqLike;::contains(Ljava/lang/Object;)Z;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)())))
              {
                b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
              }
            else
              {
                
              }
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$9;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; $minus(Ljava/lang/Object; x) {
    Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; these = this;
    while$10: while(true) {
      if (!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            if ((these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)() != x))
              {
                b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
              }
            else
              {
                
              }
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
          }
          continue while$10;
        }
      else
        {
          
        }
      break;
    }
    return b.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  public Lscala/collection/immutable/List; removeDuplicates() {
    return this.(Lscala/collection/SeqLike;::distinct()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/collection/immutable/List; sort(Lscala/Function2; lt$1) {
    return this.(Lscala/collection/immutable/List;::ms$1(Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;)(this, lt$1);
  }
  
  public Lscala/collection/LinearSeqOptimized; tail() {
    return this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/LinearSeqOptimized;);
  }
  
  public Lscala/collection/immutable/List; tail() {
    return this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
  }
  
  public Lscala/Function1; andThen(Lscala/Function1; g) {
    return this.(Lscala/PartialFunction;::andThen(Lscala/Function1;)Lscala/PartialFunction;)(g);
  }
  
  public Lscala/collection/IterableView; projection() {
    return this.(Lscala/collection/SeqLike;::projection()Lscala/collection/SeqView;)();
  }
  
  public Lscala/collection/TraversableView; view(I; from, I; until) {
    return this.(Lscala/collection/SeqLike;::view(I;I;)Lscala/collection/SeqView;)(from, until);
  }
  
  public Lscala/collection/IterableView; view(I; from, I; until) {
    return this.(Lscala/collection/SeqLike;::view(I;I;)Lscala/collection/SeqView;)(from, until);
  }
  
  public Lscala/collection/TraversableView; view() {
    return this.(Lscala/collection/SeqLike;::view()Lscala/collection/SeqView;)();
  }
  
  public Lscala/collection/IterableView; view() {
    return this.(Lscala/collection/SeqLike;::view()Lscala/collection/SeqView;)();
  }
  
  public Lscala/collection/Traversable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Iterable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Seq; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Traversable; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Lscala/collection/Iterable; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Lscala/collection/Seq; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Z; isDefinedAt(Ljava/lang/Object; x) {
    return this.(Lscala/collection/LinearSeqOptimized;::isDefinedAt(I;)Z;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(x));
  }
  
  public Ljava/lang/Object; dropRight(I; n) {
    return this.(Lscala/collection/LinearSeqOptimized;::dropRight(I;)Lscala/collection/LinearSeqOptimized;)(n);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    return this.(Lscala/collection/LinearSeqOptimized;::apply(I;)Ljava/lang/Object;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(v1));
  }
  
  public Ljava/lang/Object; reverse() {
    return this.(Lscala/collection/immutable/List;::reverse()Lscala/collection/immutable/List;)();
  }
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/List;::dropWhile(Lscala/Function1;)Lscala/collection/immutable/List;)(p);
  }
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/List;::takeWhile(Lscala/Function1;)Lscala/collection/immutable/List;)(p);
  }
  
  public Lscala/collection/LinearSeqOptimized; takeWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/List;::takeWhile(Lscala/Function1;)Lscala/collection/immutable/List;)(p);
  }
  
  public Ljava/lang/Object; takeRight(I; n) {
    return this.(Lscala/collection/immutable/List;::takeRight(I;)Lscala/collection/immutable/List;)(n);
  }
  
  public Ljava/lang/Object; slice(I; from, I; until) {
    return this.(Lscala/collection/immutable/List;::slice(I;I;)Lscala/collection/immutable/List;)(from, until);
  }
  
  public Lscala/collection/LinearSeqOptimized; slice(I; from, I; until) {
    return this.(Lscala/collection/immutable/List;::slice(I;I;)Lscala/collection/immutable/List;)(from, until);
  }
  
  public Ljava/lang/Object; drop(I; n) {
    return this.(Lscala/collection/immutable/List;::drop(I;)Lscala/collection/immutable/List;)(n);
  }
  
  public Lscala/collection/LinearSeqOptimized; drop(I; n) {
    return this.(Lscala/collection/immutable/List;::drop(I;)Lscala/collection/immutable/List;)(n);
  }
  
  public Ljava/lang/Object; take(I; n) {
    return this.(Lscala/collection/immutable/List;::take(I;)Lscala/collection/immutable/List;)(n);
  }
  
  public Lscala/collection/LinearSeqOptimized; take(I; n) {
    return this.(Lscala/collection/immutable/List;::take(I;)Lscala/collection/immutable/List;)(n);
  }
  
  private final Lscala/collection/immutable/List; loop$1(Lscala/collection/immutable/List; ys, Lscala/Function1; f$1) {
    Lscala/collection/immutable/List; $6$;
    if (ys.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $6$ = this;
      }
    else
      {
        Ljava/lang/Object; head0 = ys.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)();
        Ljava/lang/Object; head1 = f$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(head0);
        Lscala/collection/immutable/List; $7$;
        if ((head1 == head0))
          {
            $7$ = this.(Lscala/collection/immutable/List;::loop$1(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(ys.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;), f$1);
          }
        else
          {
            Ljava/lang/Object; x$2 = head1;
            Lscala/collection/immutable/List; ys1 = ys.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;).(Lscala/collection/immutable/List;::mapConserve(Lscala/Function1;)Lscala/collection/immutable/List;)(f$1).(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$2);
            Lscala/collection/immutable/List; $8$;
            if ((this == ys))
              {
                $8$ = ys1;
              }
            else
              {
                Lscala/collection/mutable/ListBuffer; b = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
                Lscala/collection/immutable/List; xc = this;
                while$2: while(true) {
                  if ((xc != ys))
                    {
                      {
                        b.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(xc.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
                        xc = xc.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
                      }
                      continue while$2;
                    }
                  else
                    {
                      
                    }
                  break;
                }
                $8$ = b.(Lscala/collection/mutable/ListBuffer;::prependToList(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(ys1);
              }
            $7$ = $8$;
          }
        $6$ = $7$;
      }
    return $6$;
  }
  
  private final Lscala/collection/immutable/List; loop$2(Lscala/collection/immutable/List; lead, Lscala/collection/immutable/List; lag) {
    Lscala/collection/immutable/List; temp3 = lead;
    Lscala/collection/immutable/List; $9$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/collection/immutable/Nil$;.MODULE$, temp3))
      {
        $9$ = lag;
      }
    else
      {
        Lscala/collection/immutable/List; $10$;
        if (temp3.<instanceof>(Lscala/collection/immutable/$colon$colon;))
          {
            $10$ = this.(Lscala/collection/immutable/List;::loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(temp3.<cast>(Lscala/collection/immutable/$colon$colon;).(Lscala/collection/immutable/$colon$colon;::tl$1()Lscala/collection/immutable/List;)(), lag.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;));
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp3));
          }
        $9$ = $10$;
      }
    return $9$;
  }
  
  private final Lscala/collection/immutable/List; loop$3(Lscala/collection/immutable/List; xs, Lscala/Function1; p$1) {
    Lscala/collection/immutable/List; $11$;
    if ((xs.(Lscala/collection/IterableLike;::isEmpty()Z;)() || !(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(xs.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)())))))
      {
        $11$ = xs;
      }
    else
      {
        $11$ = this.(Lscala/collection/immutable/List;::loop$3(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;)(xs.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;), p$1);
      }
    return $11$;
  }
  
  private final Lscala/collection/immutable/List; merge$1(Lscala/collection/immutable/List; l1, Lscala/collection/immutable/List; l2, Lscala/Function2; lt$1) {
    Lscala/collection/mutable/ListBuffer; res = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; left1 = l1;
    Lscala/collection/immutable/List; left2 = l2;
    while$11: while(true) {
      if ((!(left1.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(left2.(Lscala/collection/IterableLike;::isEmpty()Z;)())))
        {
          if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(lt$1.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(left1.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), left2.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)())))
            {
              res.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(left1.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
              left1 = left1.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            }
          else
            {
              res.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(left2.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
              left2 = left2.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            }
          continue while$11;
        }
      else
        {
          
        }
      break;
    }
    res.(Lscala/collection/generic/Growable;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(left1);
    res.(Lscala/collection/generic/Growable;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(left2);
    return res.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)();
  }
  
  private final Lscala/Tuple2; split$1(Lscala/collection/immutable/List; lst) {
    Lscala/collection/mutable/ListBuffer; res1 = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/mutable/ListBuffer; res2 = (new (Lscala/collection/mutable/ListBuffer;::this()V;)());
    Lscala/collection/immutable/List; left = lst;
    while$12: while(true) {
      if (!(left.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            res1.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(left.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            left = left.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
            if (!(left.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
              {
                res2.(Lscala/collection/mutable/ListBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ListBuffer;)(left.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
                left = left.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
              }
            else
              {
                
              }
          }
          continue while$12;
        }
      else
        {
          
        }
      break;
    }
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(res1.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)(), res2.(Lscala/collection/mutable/ListBuffer;::toList()Lscala/collection/immutable/List;)()));
  }
  
  private final Lscala/collection/immutable/List; ms$1(Lscala/collection/immutable/List; lst, Lscala/Function2; lt$1) {
    Lscala/collection/immutable/List; temp11 = lst;
    Lscala/collection/immutable/List; $12$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/collection/immutable/Nil$;.MODULE$, temp11))
      {
        $12$ = lst;
      }
    else
      {
        Lscala/collection/immutable/List; $13$;
        if (temp11.<instanceof>(Lscala/collection/immutable/$colon$colon;))
          {
            Lscala/collection/immutable/$colon$colon; temp13 = temp11.<cast>(Lscala/collection/immutable/$colon$colon;);
            Ljava/lang/Object; temp14 = temp13.(Lscala/collection/immutable/$colon$colon;::hd$1()Ljava/lang/Object;)();
            Lscala/collection/immutable/List; temp15 = temp13.(Lscala/collection/immutable/$colon$colon;::tl$1()Lscala/collection/immutable/List;)();
            Lscala/collection/immutable/List; $14$;
            if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/collection/immutable/Nil$;.MODULE$, temp15))
              {
                $14$ = lst;
              }
            else
              {
                Lscala/collection/immutable/List; $15$;
                if (temp15.<instanceof>(Lscala/collection/immutable/$colon$colon;))
                  {
                    Lscala/collection/immutable/$colon$colon; temp17 = temp15.<cast>(Lscala/collection/immutable/$colon$colon;);
                    Ljava/lang/Object; temp18 = temp17.(Lscala/collection/immutable/$colon$colon;::hd$1()Ljava/lang/Object;)();
                    Lscala/collection/immutable/List; $16$;
                    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/collection/immutable/Nil$;.MODULE$, temp17.(Lscala/collection/immutable/$colon$colon;::tl$1()Lscala/collection/immutable/List;)()))
                      {
                        Ljava/lang/Object; x = temp14;
                        Ljava/lang/Object; y = temp18;
                        Lscala/collection/immutable/List; $17$;
                        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(lt$1.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(x, y)))
                          {
                            $17$ = lst;
                          }
                        else
                          {
                            Ljava/lang/Object; x$7 = y;
                            Ljava/lang/Object; x$6 = x;
                            $17$ = Lscala/collection/immutable/Nil$;.MODULE$.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$6).(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$7);
                          }
                        $16$ = $17$;
                      }
                    else
                      {
                        Lscala/collection/immutable/List; lst = temp13;
                        $16$ = this.(Lscala/collection/immutable/List;::body$percent3$percent1(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(lst);
                      }
                    $15$ = $16$;
                  }
                else
                  {
                    $15$ = this.(Lscala/collection/immutable/List;::body$percent3$percent1(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(temp13);
                  }
                $14$ = $15$;
              }
            $13$ = $14$;
          }
        else
          {
            $13$ = this.(Lscala/collection/immutable/List;::body$percent3$percent1(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;)(temp11);
          }
        $12$ = $13$;
      }
    return $12$;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$init$(Lscala/collection/TraversableLike;)V;)(this);
    Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::$init$(Lscala/collection/generic/GenericTraversableTemplate;)V;)(this);
    Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::$init$(Lscala/collection/Traversable;)V;)(this);
    Lscala/collection/immutable/Traversable$class;.(Lscala/collection/immutable/Traversable$class;::$init$(Lscala/collection/immutable/Traversable;)V;)(this);
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::$init$(Lscala/collection/IterableLike;)V;)(this);
    Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::$init$(Lscala/collection/Iterable;)V;)(this);
    Lscala/collection/immutable/Iterable$class;.(Lscala/collection/immutable/Iterable$class;::$init$(Lscala/collection/immutable/Iterable;)V;)(this);
    Lscala/Function1$class;.(Lscala/Function1$class;::$init$(Lscala/Function1;)V;)(this);
    Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::$init$(Lscala/PartialFunction;)V;)(this);
    Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$init$(Lscala/collection/SeqLike;)V;)(this);
    Lscala/collection/Seq$class;.(Lscala/collection/Seq$class;::$init$(Lscala/collection/Seq;)V;)(this);
    Lscala/collection/immutable/Seq$class;.(Lscala/collection/immutable/Seq$class;::$init$(Lscala/collection/immutable/Seq;)V;)(this);
    Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::$init$(Lscala/collection/LinearSeqLike;)V;)(this);
    Lscala/collection/LinearSeq$class;.(Lscala/collection/LinearSeq$class;::$init$(Lscala/collection/LinearSeq;)V;)(this);
    Lscala/collection/immutable/LinearSeq$class;.(Lscala/collection/immutable/LinearSeq$class;::$init$(Lscala/collection/immutable/LinearSeq;)V;)(this);
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
    Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::$init$(Lscala/collection/LinearSeqOptimized;)V;)(this);
  }
  
  private final Lscala/collection/immutable/List; body$percent3$percent1(Lscala/collection/immutable/List; lst) {
    Lscala/Tuple2; temp8 = this.(Lscala/collection/immutable/List;::split$1(Lscala/collection/immutable/List;)Lscala/Tuple2;)(lst);
    Lscala/Tuple2; $18$;
    if ((temp8 != null))
      {
        $18$ = (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(temp8.(Lscala/Tuple2;::_1()Ljava/lang/Object;)(), temp8.(Lscala/Tuple2;::_2()Ljava/lang/Object;)()));
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp8));
      }
    Lscala/Tuple2; x$8 = $18$;
    Lscala/collection/immutable/List; l1 = x$8.(Lscala/Tuple2;::_1()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
    Lscala/collection/immutable/List; l2 = x$8.(Lscala/Tuple2;::_2()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
    Lscala/collection/immutable/List; l1s = this.(Lscala/collection/immutable/List;::ms$1(Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;)(l1, lt$1);
    Lscala/collection/immutable/List; l2s = this.(Lscala/collection/immutable/List;::ms$1(Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;)(l2, lt$1);
    return this.(Lscala/collection/immutable/List;::merge$1(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;)(l1s, l2s, lt$1);
  }
}
