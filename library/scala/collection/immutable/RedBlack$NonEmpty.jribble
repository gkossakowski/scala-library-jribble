public abstract class Lscala/collection/immutable/RedBlack$NonEmpty; extends Lscala/collection/immutable/RedBlack$Tree; implements Lscala/Serializable;, Lscala/ScalaObject; {
  
  public Z; isEmpty() {
    return false;
  }
  
  public abstract Ljava/lang/Object; key();
  
  public abstract Ljava/lang/Object; value();
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; left();
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; right();
  
  public Lscala/collection/immutable/RedBlack$Tree; lookup(Ljava/lang/Object; k) {
    Lscala/collection/immutable/RedBlack$Tree; $4$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(k, this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)()))
      {
        $4$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k);
      }
    else
      {
        Lscala/collection/immutable/RedBlack$Tree; $5$;
        if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), k))
          {
            $5$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::lookup(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k);
          }
        else
          {
            $5$ = this;
          }
        $4$ = $5$;
      }
    return $4$;
  }
  
  public final Lscala/collection/immutable/RedBlack$NonEmpty; scala$collection$immutable$RedBlack$NonEmpty$$balanceLeft(Z; isBlack, Ljava/lang/Object; z, Ljava/lang/Object; zv, Lscala/collection/immutable/RedBlack$Tree; l, Lscala/collection/immutable/RedBlack$Tree; d) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  public final Lscala/collection/immutable/RedBlack$NonEmpty; scala$collection$immutable$RedBlack$NonEmpty$$balanceRight(Z; isBlack, Ljava/lang/Object; x, Ljava/lang/Object; xv, Lscala/collection/immutable/RedBlack$Tree; a, Lscala/collection/immutable/RedBlack$Tree; r) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; upd(Ljava/lang/Object; k, Ljava/lang/Object; v) {
    Lscala/collection/immutable/RedBlack$Tree; $6$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(k, this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)()))
      {
        $6$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$balanceLeft(Z;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$NonEmpty;)(this.(Lscala/collection/immutable/RedBlack$Tree;::isBlack()Z;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::upd(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k, v), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)());
      }
    else
      {
        Lscala/collection/immutable/RedBlack$Tree; $7$;
        if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), k))
          {
            $7$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$balanceRight(Z;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$NonEmpty;)(this.(Lscala/collection/immutable/RedBlack$Tree;::isBlack()Z;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::upd(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k, v));
          }
        else
          {
            $7$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::scala$collection$immutable$RedBlack$$mkTree(Z;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$NonEmpty;)(this.(Lscala/collection/immutable/RedBlack$Tree;::isBlack()Z;)(), k, v, this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)());
          }
        $6$ = $7$;
      }
    return $6$;
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; del(Ljava/lang/Object; k$1) {
    Ljava/lang/Object; temp186 = k$1;
    Lscala/collection/immutable/RedBlack$Tree; $8$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::gd1$1(Ljava/lang/Object;)Z;)(k$1))
      {
        Lscala/collection/immutable/RedBlack$NonEmpty; $9$;
        body$percent013: while(true) {
          $9$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::delLeft$1(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$NonEmpty;)(k$1);
          break;
        }
        $8$ = $9$;
      }
    else
      {
        Lscala/collection/immutable/RedBlack$Tree; $10$;
        if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::gd2$1(Ljava/lang/Object;)Z;)(k$1))
          {
            Lscala/collection/immutable/RedBlack$NonEmpty; $11$;
            body$percent113: while(true) {
              $11$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::delRight$1(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$NonEmpty;)(k$1);
              break;
            }
            $10$ = $11$;
          }
        else
          {
            $10$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::append$1(Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)());
          }
        $8$ = $10$;
      }
    return $8$;
  }
  
  public Lscala/collection/immutable/RedBlack$NonEmpty; smallest() {
    Lscala/collection/immutable/RedBlack$NonEmpty; $12$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)())
      {
        $12$ = this;
      }
    else
      {
        $12$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::smallest()Lscala/collection/immutable/RedBlack$NonEmpty;)();
      }
    return $12$;
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::toStream()Lscala/collection/immutable/Stream;)().(Lscala/collection/immutable/Stream;::$plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/Stream;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/Tuple2;>{(new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)()))}.<cast>(Ljava/lang/Object;[))), Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::$plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::toStream()Lscala/collection/immutable/Stream;)(), Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/immutable/Stream;);
  }
  
  public Lscala/collection/Iterator; iterator() {
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::iterator()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::$plus$plus(Lscala/Function0;)Lscala/collection/Iterator;)((new (Lscala/collection/immutable/RedBlack$NonEmpty$$anonfun$iterator$1;::this(Lscala/collection/immutable/RedBlack$NonEmpty;)V;)(this))).(Lscala/collection/Iterator;::$plus$plus(Lscala/Function0;)Lscala/collection/Iterator;)((new (Lscala/collection/immutable/RedBlack$NonEmpty$$anonfun$iterator$2;::this(Lscala/collection/immutable/RedBlack$NonEmpty;)V;)(this)));
  }
  
  public V; foreach(Lscala/Function2; f) {
    this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::foreach(Lscala/Function2;)V;)(f);
    f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)());
    this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::foreach(Lscala/Function2;)V;)(f);
  }
  
  public Lscala/Tuple2; visit(Ljava/lang/Object; input, Lscala/Function3; f) {
    Lscala/Tuple2; left = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::visit(Ljava/lang/Object;Lscala/Function3;)Lscala/Tuple2;)(input, f);
    if (!(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(left.(Lscala/Tuple2;::_1()Ljava/lang/Object;)())))
      {
        return left;
      }
    else
      {
        
      }
    Lscala/Tuple2; middle = f.(Lscala/Function3;::apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(left.(Lscala/Tuple2;::_2()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)()).<cast>(Lscala/Tuple2;);
    if (!(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(middle.(Lscala/Tuple2;::_1()Ljava/lang/Object;)())))
      {
        return middle;
      }
    else
      {
        
      }
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::visit(Ljava/lang/Object;Lscala/Function3;)Lscala/Tuple2;)(middle.(Lscala/Tuple2;::_2()Ljava/lang/Object;)(), f);
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; rng(Lscala/Option; from, Lscala/Option; until) {
    if ((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(from, Lscala/None$;.MODULE$) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(until, Lscala/None$;.MODULE$)))
      {
        return this;
      }
    else
      {
        
      }
    if (((from != Lscala/None$;.MODULE$) && this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), from.(Lscala/Option;::get()Ljava/lang/Object;)())))
      {
        return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::rng(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;)(from, until);
      }
    else
      {
        
      }
    if (((until != Lscala/None$;.MODULE$) && (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(until.(Lscala/Option;::get()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)()) || !(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), until.(Lscala/Option;::get()Ljava/lang/Object;)())))))
      {
        return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::rng(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;)(from, until);
      }
    else
      {
        
      }
    Lscala/collection/immutable/RedBlack$Tree; newLeft = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::rng(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;)(from, Lscala/None$;.MODULE$);
    Lscala/collection/immutable/RedBlack$Tree; newRight = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::rng(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;)(Lscala/None$;.MODULE$, until);
    Lscala/collection/immutable/RedBlack$Tree; $13$;
    if (((newLeft == this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)()) && (newRight == this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)())))
      {
        $13$ = this;
      }
    else
      {
        Lscala/collection/immutable/RedBlack$Tree; $14$;
        if ((newLeft == this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::Empty()Lscala/collection/immutable/RedBlack$Empty;)()))
          {
            $14$ = newRight.(Lscala/collection/immutable/RedBlack$Tree;::upd(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)());
          }
        else
          {
            Lscala/collection/immutable/RedBlack$Tree; $15$;
            if ((newRight == this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::Empty()Lscala/collection/immutable/RedBlack$Empty;)()))
              {
                $15$ = newLeft.(Lscala/collection/immutable/RedBlack$Tree;::upd(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)());
              }
            else
              {
                $15$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::rebalance(Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(newLeft, newRight);
              }
            $14$ = $15$;
          }
        $13$ = $14$;
      }
    return $13$;
  }
  
  private Lscala/Tuple4; compareDepth(Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right) {
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::unzipBoth$1(Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/List;Lscala/collection/immutable/List;I;)Lscala/Tuple4;)(left, right, Lscala/collection/immutable/Nil$;.MODULE$, Lscala/collection/immutable/Nil$;.MODULE$, 0);
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; rebalance(Lscala/collection/immutable/RedBlack$Tree; newLeft, Lscala/collection/immutable/RedBlack$Tree; newRight) {
    Lscala/collection/immutable/RedBlack$Tree; blkNewLeft = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::scala$collection$immutable$RedBlack$$blacken(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(newLeft);
    Lscala/collection/immutable/RedBlack$Tree; blkNewRight = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::scala$collection$immutable$RedBlack$$blacken(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(newRight);
    Lscala/Tuple4; temp237 = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::compareDepth(Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/Tuple4;)(blkNewLeft, blkNewRight);
    Lscala/Tuple4; $16$;
    if ((temp237 != null))
      {
        $16$ = (new (Lscala/Tuple4;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(temp237.(Lscala/Tuple4;::_1()Ljava/lang/Object;)(), temp237.(Lscala/Tuple4;::_2()Ljava/lang/Object;)(), temp237.(Lscala/Tuple4;::_3()Ljava/lang/Object;)(), temp237.(Lscala/Tuple4;::_4()Ljava/lang/Object;)()));
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp237));
      }
    Lscala/Tuple4; x$10 = $16$;
    Lscala/collection/immutable/List; zipper = x$10.(Lscala/Tuple4;::_1()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/List;);
    Z; levelled = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(x$10.(Lscala/Tuple4;::_2()Ljava/lang/Object;)());
    Z; leftMost$1 = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(x$10.(Lscala/Tuple4;::_3()Ljava/lang/Object;)());
    I; smallerDepth = Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(x$10.(Lscala/Tuple4;::_4()Ljava/lang/Object;)());
    Lscala/collection/immutable/RedBlack$Tree; $17$;
    if (levelled)
      {
        $17$ = (new (Lscala/collection/immutable/RedBlack$BlackTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), blkNewLeft, blkNewRight));
      }
    else
      {
        Lscala/collection/immutable/List; zipFrom = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::findDepth$1(Lscala/collection/immutable/List;I;)Lscala/collection/immutable/List;)(zipper, smallerDepth);
        Lscala/collection/immutable/RedBlack$RedTree; $18$;
        if (leftMost$1)
          {
            $18$ = (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), blkNewLeft, zipFrom.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/RedBlack$Tree;)));
          }
        else
          {
            $18$ = (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), zipFrom.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/RedBlack$Tree;), blkNewRight));
          }
        Lscala/collection/immutable/RedBlack$RedTree; union = $18$;
        Lscala/collection/immutable/RedBlack$Tree; zippedTree = zipFrom.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/LinearSeqOptimized;).(Lscala/collection/LinearSeqOptimized;::foldLeft(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(union, (new (Lscala/collection/immutable/RedBlack$NonEmpty$$anonfun$1;::this(Lscala/collection/immutable/RedBlack$NonEmpty;Z;)V;)(this, leftMost$1))).<cast>(Lscala/collection/immutable/RedBlack$Tree;);
        $17$ = zippedTree;
      }
    return $17$;
  }
  
  public Ljava/lang/Object; first() {
    Ljava/lang/Object; $19$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)())
      {
        $19$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)();
      }
    else
      {
        $19$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::first()Ljava/lang/Object;)();
      }
    return $19$;
  }
  
  public Ljava/lang/Object; last() {
    Ljava/lang/Object; $20$;
    if (this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::isEmpty()Z;)())
      {
        $20$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)();
      }
    else
      {
        $20$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::last()Ljava/lang/Object;)();
      }
    return $20$;
  }
  
  public I; count() {
    return ((1 + this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::count()I;)()) + this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::count()I;)());
  }
  
  public Lscala/collection/immutable/RedBlack; scala$collection$immutable$RedBlack$NonEmpty$$$outer() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)$outer$u0020;
  }
  
  private final Lscala/collection/immutable/RedBlack$NonEmpty; balance$1(Ljava/lang/Object; x, Ljava/lang/Object; xv, Lscala/collection/immutable/RedBlack$Tree; tl, Lscala/collection/immutable/RedBlack$Tree; tr) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  private final Lscala/collection/immutable/RedBlack$RedTree; subl$1(Lscala/collection/immutable/RedBlack$Tree; t) {
    Lscala/collection/immutable/RedBlack$Tree; temp77 = t;
    Lscala/collection/immutable/RedBlack$RedTree; $21$;
    if (temp77.<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;))
      {
        Lscala/collection/immutable/RedBlack$BlackTree; temp78 = temp77.<cast>(Lscala/collection/immutable/RedBlack$BlackTree;);
        $21$ = (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), temp78.(Lscala/collection/immutable/RedBlack$BlackTree;::key()Ljava/lang/Object;)(), temp78.(Lscala/collection/immutable/RedBlack$BlackTree;::value()Ljava/lang/Object;)(), temp78.(Lscala/collection/immutable/RedBlack$BlackTree;::left()Lscala/collection/immutable/RedBlack$Tree;)(), temp78.(Lscala/collection/immutable/RedBlack$BlackTree;::right()Lscala/collection/immutable/RedBlack$Tree;)()));
      }
    else
      {
        throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)(("Defect: invariance violation; expected black, got " + t)));
      }
    return $21$;
  }
  
  private final Lscala/collection/immutable/RedBlack$NonEmpty; balLeft$1(Ljava/lang/Object; x, Ljava/lang/Object; xv, Lscala/collection/immutable/RedBlack$Tree; tl, Lscala/collection/immutable/RedBlack$Tree; tr) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  private final Lscala/collection/immutable/RedBlack$NonEmpty; balRight$1(Ljava/lang/Object; x, Ljava/lang/Object; xv, Lscala/collection/immutable/RedBlack$Tree; tl, Lscala/collection/immutable/RedBlack$Tree; tr) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  private final Lscala/collection/immutable/RedBlack$NonEmpty; delLeft$1(Ljava/lang/Object; k$1) {
    Lscala/collection/immutable/RedBlack$Tree; temp129 = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)();
    Lscala/collection/immutable/RedBlack$NonEmpty; $22$;
    if (temp129.<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;))
      {
        $22$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::balLeft$1(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$NonEmpty;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::del(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k$1), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)());
      }
    else
      {
        $22$ = (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::del(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k$1), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)()));
      }
    return $22$;
  }
  
  private final Lscala/collection/immutable/RedBlack$NonEmpty; delRight$1(Ljava/lang/Object; k$1) {
    Lscala/collection/immutable/RedBlack$Tree; temp135 = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)();
    Lscala/collection/immutable/RedBlack$NonEmpty; $23$;
    if (temp135.<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;))
      {
        $23$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::balRight$1(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$NonEmpty;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::del(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k$1));
      }
    else
      {
        $23$ = (new (Lscala/collection/immutable/RedBlack$RedTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::value()Ljava/lang/Object;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)(), this.(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)().(Lscala/collection/immutable/RedBlack$Tree;::del(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k$1)));
      }
    return $23$;
  }
  
  private final Lscala/collection/immutable/RedBlack$Tree; append$1(Lscala/collection/immutable/RedBlack$Tree; tl, Lscala/collection/immutable/RedBlack$Tree; tr) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  private final Z; gd1$1(Ljava/lang/Object; k$1) {
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(k$1, this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)());
  }
  
  private final Z; gd2$1(Ljava/lang/Object; k$1) {
    return this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::isSmaller(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::key()Ljava/lang/Object;)(), k$1);
  }
  
  private final Lscala/collection/immutable/List; unzip$1(Lscala/collection/immutable/List; zipper, Z; leftMost) {
    Lscala/collection/immutable/RedBlack$Tree; $24$;
    if (leftMost)
      {
        $24$ = zipper.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/RedBlack$NonEmpty;).(Lscala/collection/immutable/RedBlack$NonEmpty;::left()Lscala/collection/immutable/RedBlack$Tree;)();
      }
    else
      {
        $24$ = zipper.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/RedBlack$NonEmpty;).(Lscala/collection/immutable/RedBlack$NonEmpty;::right()Lscala/collection/immutable/RedBlack$Tree;)();
      }
    Lscala/collection/immutable/RedBlack$Tree; next = $24$;
    Lscala/collection/immutable/RedBlack$Tree; temp187 = next;
    Lscala/collection/immutable/List; $25$;
    if (temp187.<instanceof>(Lscala/collection/immutable/RedBlack$NonEmpty;))
      {
        Lscala/collection/immutable/RedBlack$NonEmpty; temp188 = temp187.<cast>(Lscala/collection/immutable/RedBlack$NonEmpty;);
        Lscala/collection/immutable/RedBlack$NonEmpty; node = temp188;
        Lscala/collection/immutable/RedBlack$NonEmpty; x$1 = node;
        $25$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::unzip$1(Lscala/collection/immutable/List;Z;)Lscala/collection/immutable/List;)(zipper.(Lscala/collection/immutable/List;::$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/List;)(x$1), leftMost);
      }
    else
      {
        Lscala/collection/immutable/List; $26$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/immutable/RedBlack$NonEmpty;::scala$collection$immutable$RedBlack$NonEmpty$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::Empty()Lscala/collection/immutable/RedBlack$Empty;)(), temp187))
          {
            $26$ = zipper;
          }
        else
          {
            fail$percent3: while(true) {
              throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp187));
            }
          }
        $25$ = $26$;
      }
    return $25$;
  }
  
  private final Lscala/Tuple4; unzipBoth$1(Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right, Lscala/collection/immutable/List; leftZipper, Lscala/collection/immutable/List; rightZipper, I; smallerDepth) {
    throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("whack! you stepped on broken handling of jribble backend."));
  }
  
  private final Lscala/collection/immutable/List; findDepth$1(Lscala/collection/immutable/List; zipper, I; depth) {
    Lscala/collection/immutable/List; temp227 = zipper;
    Lscala/collection/immutable/List; $28$;
    if (temp227.<instanceof>(Lscala/collection/immutable/$colon$colon;))
      {
        Lscala/collection/immutable/$colon$colon; temp228 = temp227.<cast>(Lscala/collection/immutable/$colon$colon;);
        Lscala/collection/immutable/List; temp230 = temp228.(Lscala/collection/immutable/$colon$colon;::tl$1()Lscala/collection/immutable/List;)();
        Lscala/collection/immutable/List; $29$;
        if (temp228.(Lscala/collection/immutable/$colon$colon;::hd$1()Ljava/lang/Object;)().<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;))
          {
            Lscala/collection/immutable/List; $30$;
            if ((depth == 1))
              {
                $30$ = zipper;
              }
            else
              {
                $30$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::findDepth$1(Lscala/collection/immutable/List;I;)Lscala/collection/immutable/List;)(temp230, (depth - 1));
              }
            $29$ = $30$;
          }
        else
          {
            $29$ = this.(Lscala/collection/immutable/RedBlack$NonEmpty;::findDepth$1(Lscala/collection/immutable/List;I;)Lscala/collection/immutable/List;)(temp230, depth);
          }
        $28$ = $29$;
      }
    else
      {
        Lscala/runtime/Nothing$; $31$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/collection/immutable/Nil$;.MODULE$, temp227))
          {
            throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("Defect: unexpected empty zipper while computing range"));
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp227));
          }
      }
    return $28$;
  }
  
  public this(Lscala/collection/immutable/RedBlack; $outer) {
    (Lscala/collection/immutable/RedBlack$Tree;::super(Lscala/collection/immutable/RedBlack;)V;)($outer);
  }
}
