public final class Lscala/collection/immutable/HashMap$; extends Lscala/collection/generic/ImmutableMapFactory; implements Lscala/ScalaObject; {
  public static Lscala/collection/immutable/HashMap$; MODULE$ = new (Lscala/collection/immutable/HashMap$;::this()V;)();
  
  public Lscala/collection/generic/CanBuildFrom; canBuildFrom() {
    return (new (Lscala/collection/generic/MapFactory$MapCanBuildFrom;::this(Lscala/collection/generic/MapFactory;)V;)(this));
  }
  
  public Lscala/collection/immutable/HashMap; empty() {
    return Lscala/collection/immutable/HashMap$EmptyHashMap$;.MODULE$;
  }
  
  private I; bothsingle$u0020;
  
  public I; bothsingle() {
    return this.(I;)bothsingle$u0020;
  }
  
  public V; bothsingle_$eq(I; x$1) {
    this.(I;)bothsingle$u0020 = x$1;
  }
  
  private I; bothtries$u0020;
  
  public I; bothtries() {
    return this.(I;)bothtries$u0020;
  }
  
  public V; bothtries_$eq(I; x$1) {
    this.(I;)bothtries$u0020 = x$1;
  }
  
  private I; onetrie$u0020;
  
  public I; onetrie() {
    return this.(I;)onetrie$u0020;
  }
  
  public V; onetrie_$eq(I; x$1) {
    this.(I;)onetrie$u0020 = x$1;
  }
  
  private Z; check(Lscala/collection/immutable/HashMap; x, Lscala/collection/immutable/HashMap; y, Lscala/collection/immutable/HashMap; xy) {
    Lscala/runtime/ObjectRef; xs$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/immutable/Set$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/Traversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{})).<cast>(Lscala/collection/immutable/Set;)));
    x.(Lscala/collection/immutable/HashMap;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/HashMap$$anonfun$check$1;::this(Lscala/runtime/ObjectRef;)V;)(xs$1)));
    Lscala/runtime/ObjectRef; ys$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/immutable/Set$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/Traversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{})).<cast>(Lscala/collection/immutable/Set;)));
    y.(Lscala/collection/immutable/HashMap;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/HashMap$$anonfun$check$2;::this(Lscala/runtime/ObjectRef;)V;)(ys$1)));
    Lscala/runtime/ObjectRef; union$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/immutable/Set$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/Traversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{})).<cast>(Lscala/collection/immutable/Set;)));
    xy.(Lscala/collection/immutable/HashMap;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/HashMap$$anonfun$check$3;::this(Lscala/runtime/ObjectRef;)V;)(union$1)));
    Z; $2$;
    if ((xs$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/generic/Addable;::$plus$plus(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Addable;)(ys$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;)) != union$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;)))
      {
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)("Error.");
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(x.(Ljava/lang/Object;::getClass()Ljava/lang/Class;)());
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(y.(Ljava/lang/Object;::getClass()Ljava/lang/Class;)());
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(xs$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;));
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(ys$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;));
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(xs$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/generic/Addable;::$plus$plus(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Addable;)(ys$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;)));
        Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(union$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;));
        $2$ = false;
      }
    else
      {
        $2$ = true;
      }
    return $2$;
  }
  
  public Lscala/collection/Map; empty() {
    return this.(Lscala/collection/immutable/HashMap$;::empty()Lscala/collection/immutable/HashMap;)();
  }
  
  public this() {
    (Lscala/collection/generic/ImmutableMapFactory;::super()V;)();
    this.(I;)bothsingle$u0020 = 0;
    this.(I;)bothtries$u0020 = 0;
    this.(I;)onetrie$u0020 = 0;
  }
}
