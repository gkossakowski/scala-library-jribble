public abstract class Lscala/collection/immutable/Stream; extends Ljava/lang/Object; implements Lscala/collection/immutable/LinearSeq;, Lscala/collection/generic/GenericTraversableTemplate;, Lscala/collection/LinearSeqOptimized;, Lscala/ScalaObject; {
  public final static Lscala/collection/immutable/Stream; loop$5(I; x_0, I; x_1, Lscala/Function1; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::loop$5(I;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(x_0, x_1, x_2); }
  public final static Lscala/collection/immutable/Stream; make(I; x_0, Ljava/lang/Object; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::make(I;Ljava/lang/Object;)Lscala/collection/immutable/Stream;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream; const(Ljava/lang/Object; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::const(Ljava/lang/Object;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream; range(I; x_0, I; x_1, Lscala/Function1; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::range(I;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(x_0, x_1, x_2); }
  public final static Lscala/collection/immutable/Stream; concat(Lscala/collection/Iterator; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::concat(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream; concat(Lscala/collection/Iterable; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::concat(Lscala/collection/Iterable;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream; fromIterator(Lscala/collection/Iterator; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::fromIterator(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream$Cons; collectedTail(Lscala/collection/immutable/Stream; x_0, Lscala/PartialFunction; x_1, Lscala/collection/generic/CanBuildFrom; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::collectedTail(Lscala/collection/immutable/Stream;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Lscala/collection/immutable/Stream$Cons;)(x_0, x_1, x_2); }
  public final static Lscala/collection/immutable/Stream$Cons; filteredTail(Lscala/collection/immutable/Stream; x_0, Lscala/Function1; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::filteredTail(Lscala/collection/immutable/Stream;Lscala/Function1;)Lscala/collection/immutable/Stream$Cons;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream; range(Ljava/lang/Object; x_0, Ljava/lang/Object; x_1, Ljava/lang/Object; x_2, Lscala/math/Integral; x_3) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::range(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/immutable/Stream;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/immutable/Stream; tabulate(I; x_0, Lscala/Function1; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::tabulate(I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream; fill(I; x_0, Lscala/Function0; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::fill(I;Lscala/Function0;)Lscala/collection/immutable/Stream;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream; continually(Lscala/Function0; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::continually(Lscala/Function0;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream; from(I; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::from(I;)Lscala/collection/immutable/Stream;)(x_0); }
  public final static Lscala/collection/immutable/Stream; from(I; x_0, I; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::from(I;I;)Lscala/collection/immutable/Stream;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream; iterate(Ljava/lang/Object; x_0, I; x_1, Lscala/Function1; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::iterate(Ljava/lang/Object;I;Lscala/Function1;)Lscala/collection/immutable/Stream;)(x_0, x_1, x_2); }
  public final static Lscala/collection/immutable/Stream; iterate(Ljava/lang/Object; x_0, Lscala/Function1; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::iterate(Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Stream;)(x_0, x_1); }
  public final static Lscala/collection/immutable/Stream$$hash$colon$colon$; lazy_$colon$colon() { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::lazy_$colon$colon()Lscala/collection/immutable/Stream$$hash$colon$colon$;)(); }
  public final static Lscala/collection/immutable/Stream$ConsWrapper; consWrapper(Lscala/Function0; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::consWrapper(Lscala/Function0;)Lscala/collection/immutable/Stream$ConsWrapper;)(x_0); }
  public final static Lscala/collection/immutable/Stream; empty() { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)(); }
  public final static Lscala/collection/generic/CanBuildFrom; canBuildFrom() { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)(); }
  public final static Lscala/Some; unapplySeq(Lscala/collection/Seq; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/SeqFactory;::unapplySeq(Lscala/collection/Seq;)Lscala/Some;)(x_0); }
  public final static Lscala/collection/GenTraversable; iterate(Ljava/lang/Object; x_0, I; x_1, Lscala/Function1; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::iterate(Ljava/lang/Object;I;Lscala/Function1;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; range(Ljava/lang/Object; x_0, Ljava/lang/Object; x_1, Ljava/lang/Object; x_2, Lscala/math/Integral; x_3) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::range(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; range(Ljava/lang/Object; x_0, Ljava/lang/Object; x_1, Lscala/math/Integral; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::range(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, I; x_3, I; x_4, Lscala/Function5; x_5) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;I;I;Lscala/Function5;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4, x_5); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, I; x_3, Lscala/Function4; x_4) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;I;Lscala/Function4;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, Lscala/Function3; x_3) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;Lscala/Function3;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, Lscala/Function2; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;Lscala/Function2;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, Lscala/Function1; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;Lscala/Function1;)Lscala/collection/GenTraversable;)(x_0, x_1); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, I; x_3, I; x_4, Lscala/Function0; x_5) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4, x_5); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, I; x_3, Lscala/Function0; x_4) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, Lscala/Function0; x_3) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, Lscala/Function0; x_2) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, Lscala/Function0; x_1) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1); }
  public final static Lscala/collection/GenTraversable; concat(Lscala/collection/Seq; x_0) { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::concat(Lscala/collection/Seq;)Lscala/collection/GenTraversable;)(x_0); }
  public final static Lscala/collection/GenTraversable; empty() { return Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::empty()Lscala/collection/GenTraversable;)(); }
  
  
  public final Z; scala$collection$LinearSeqOptimized$$super$sameElements(Lscala/collection/GenIterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)Z;)(this, that);
  }
  
  public Ljava/lang/Object; apply(I; n) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::apply(Lscala/collection/LinearSeqOptimized;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::forall(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Z;)(this, p);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::count(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::find(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; f) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::foldRight(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, f);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::reduceRight(Lscala/collection/LinearSeqOptimized;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Ljava/lang/Object; last() {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::last(Lscala/collection/LinearSeqOptimized;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/collection/LinearSeqOptimized; dropRight(I; n) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::dropRight(Lscala/collection/LinearSeqOptimized;I;)Lscala/collection/LinearSeqOptimized;)(this, n);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::span(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Z; sameElements(Lscala/collection/GenIterable; that) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;)Z;)(this, that);
  }
  
  public I; lengthCompare(I; len) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::lengthCompare(Lscala/collection/LinearSeqOptimized;I;)I;)(this, len);
  }
  
  public Z; isDefinedAt(I; x) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::isDefinedAt(Lscala/collection/LinearSeqOptimized;I;)Z;)(this, x);
  }
  
  public I; segmentLength(Lscala/Function1; p, I; from) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::segmentLength(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, from);
  }
  
  public I; indexWhere(Lscala/Function1; p, I; from) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::indexWhere(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, from);
  }
  
  public I; lastIndexWhere(Lscala/Function1; p, I; end) {
    return Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::lastIndexWhere(Lscala/collection/LinearSeqOptimized;Lscala/Function1;I;)I;)(this, p, end);
  }
  
  public Lscala/collection/LinearSeq; thisCollection() {
    return Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::thisCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(this);
  }
  
  public Lscala/collection/LinearSeq; toCollection(Lscala/collection/LinearSeqLike; repr) {
    return Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::toCollection(Lscala/collection/LinearSeqLike;Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(this, repr);
  }
  
  public Lscala/collection/immutable/Seq; toSeq() {
    return Lscala/collection/immutable/Seq$class;.(Lscala/collection/immutable/Seq$class;::toSeq(Lscala/collection/immutable/Seq;)Lscala/collection/immutable/Seq;)(this);
  }
  
  public Lscala/collection/immutable/Seq; seq() {
    return Lscala/collection/immutable/Seq$class;.(Lscala/collection/immutable/Seq$class;::seq(Lscala/collection/immutable/Seq;)Lscala/collection/immutable/Seq;)(this);
  }
  
  public Lscala/collection/parallel/Combiner; parCombiner() {
    return Lscala/collection/immutable/Seq$class;.(Lscala/collection/immutable/Seq$class;::parCombiner(Lscala/collection/immutable/Seq;)Lscala/collection/parallel/Combiner;)(this);
  }
  
  public I; size() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::size(Lscala/collection/SeqLike;)I;)(this);
  }
  
  public I; findIndexOf(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::findIndexOf(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/collection/Iterator; permutations() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::permutations(Lscala/collection/SeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; combinations(I; n) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::combinations(Lscala/collection/SeqLike;I;)Lscala/collection/Iterator;)(this, n);
  }
  
  public Ljava/lang/Object; reverseMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reverseMap(Lscala/collection/SeqLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Lscala/collection/Iterator; reverseIterator() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reverseIterator(Lscala/collection/SeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; reversedElements() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::reversedElements(Lscala/collection/SeqLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Z; startsWith(Lscala/collection/GenSeq; that, I; offset) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::startsWith(Lscala/collection/SeqLike;Lscala/collection/GenSeq;I;)Z;)(this, that, offset);
  }
  
  public Z; startsWith(Lscala/collection/Seq; that, I; offset) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::startsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)Z;)(this, that, offset);
  }
  
  public Z; endsWith(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::endsWith(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)Z;)(this, that);
  }
  
  public Z; endsWith(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::endsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public I; indexOfSlice(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)I;)(this, that);
  }
  
  public I; indexOfSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)I;)(this, that);
  }
  
  public I; indexOfSlice(Lscala/collection/GenSeq; that, I; from) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/GenSeq;I;)I;)(this, that, from);
  }
  
  public I; indexOfSlice(Lscala/collection/Seq; that, I; from) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)I;)(this, that, from);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)I;)(this, that);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)I;)(this, that);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/GenSeq; that, I; end) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/GenSeq;I;)I;)(this, that, end);
  }
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that, I; end) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::lastIndexOfSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;I;)I;)(this, that, end);
  }
  
  public Z; containsSlice(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::containsSlice(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)Z;)(this, that);
  }
  
  public Z; containsSlice(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::containsSlice(Lscala/collection/SeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public Z; contains(Ljava/lang/Object; elem) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::contains(Lscala/collection/SeqLike;Ljava/lang/Object;)Z;)(this, elem);
  }
  
  public Ljava/lang/Object; union(Lscala/collection/GenSeq; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::union(Lscala/collection/SeqLike;Lscala/collection/GenSeq;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; diff(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::diff(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; diff(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::diff(Lscala/collection/SeqLike;Lscala/collection/Seq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; intersect(Lscala/collection/GenSeq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::intersect(Lscala/collection/SeqLike;Lscala/collection/GenSeq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; intersect(Lscala/collection/Seq; that) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::intersect(Lscala/collection/SeqLike;Lscala/collection/Seq;)Ljava/lang/Object;)(this, that);
  }
  
  public Ljava/lang/Object; patch(I; from, Lscala/collection/GenSeq; patch, I; replaced, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::patch(Lscala/collection/SeqLike;I;Lscala/collection/GenSeq;I;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, from, patch, replaced, bf);
  }
  
  public Ljava/lang/Object; patch(I; from, Lscala/collection/Seq; patch, I; replaced, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::patch(Lscala/collection/SeqLike;I;Lscala/collection/Seq;I;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, from, patch, replaced, bf);
  }
  
  public Ljava/lang/Object; updated(I; index, Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::updated(Lscala/collection/SeqLike;I;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, index, elem, bf);
  }
  
  public Ljava/lang/Object; $colon$plus(Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$colon$plus(Lscala/collection/SeqLike;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, elem, bf);
  }
  
  public Z; corresponds(Lscala/collection/GenSeq; that, Lscala/Function2; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::corresponds(Lscala/collection/SeqLike;Lscala/collection/GenSeq;Lscala/Function2;)Z;)(this, that, p);
  }
  
  public Z; corresponds(Lscala/collection/Seq; that, Lscala/Function2; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::corresponds(Lscala/collection/SeqLike;Lscala/collection/Seq;Lscala/Function2;)Z;)(this, that, p);
  }
  
  public Ljava/lang/Object; sortWith(Lscala/Function2; lt) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sortWith(Lscala/collection/SeqLike;Lscala/Function2;)Ljava/lang/Object;)(this, lt);
  }
  
  public Ljava/lang/Object; sortBy(Lscala/Function1; f, Lscala/math/Ordering; ord) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sortBy(Lscala/collection/SeqLike;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, ord);
  }
  
  public Ljava/lang/Object; sorted(Lscala/math/Ordering; ord) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;)Ljava/lang/Object;)(this, ord);
  }
  
  public Lscala/collection/immutable/Range; indices() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::indices(Lscala/collection/SeqLike;)Lscala/collection/immutable/Range;)(this);
  }
  
  public Lscala/collection/SeqView; view(I; from, I; until) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::view(Lscala/collection/SeqLike;I;I;)Lscala/collection/SeqView;)(this, from, until);
  }
  
  public I; findLastIndexOf(Lscala/Function1; p) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::findLastIndexOf(Lscala/collection/SeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public Z; equalsWith(Lscala/collection/Seq; that, Lscala/Function2; f) {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::equalsWith(Lscala/collection/SeqLike;Lscala/collection/Seq;Lscala/Function2;)Z;)(this, that, f);
  }
  
  public Lscala/collection/SeqView; projection() {
    return Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::projection(Lscala/collection/SeqLike;)Lscala/collection/SeqView;)(this);
  }
  
  public I; prefixLength(Lscala/Function1; p) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::prefixLength(Lscala/collection/GenSeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public I; indexWhere(Lscala/Function1; p) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::indexWhere(Lscala/collection/GenSeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public I; indexOf(Ljava/lang/Object; elem) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::indexOf(Lscala/collection/GenSeqLike;Ljava/lang/Object;)I;)(this, elem);
  }
  
  public I; indexOf(Ljava/lang/Object; elem, I; from) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::indexOf(Lscala/collection/GenSeqLike;Ljava/lang/Object;I;)I;)(this, elem, from);
  }
  
  public I; lastIndexOf(Ljava/lang/Object; elem) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::lastIndexOf(Lscala/collection/GenSeqLike;Ljava/lang/Object;)I;)(this, elem);
  }
  
  public I; lastIndexOf(Ljava/lang/Object; elem, I; end) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::lastIndexOf(Lscala/collection/GenSeqLike;Ljava/lang/Object;I;)I;)(this, elem, end);
  }
  
  public I; lastIndexWhere(Lscala/Function1; p) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::lastIndexWhere(Lscala/collection/GenSeqLike;Lscala/Function1;)I;)(this, p);
  }
  
  public Z; startsWith(Lscala/collection/GenSeq; that) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::startsWith(Lscala/collection/GenSeqLike;Lscala/collection/GenSeq;)Z;)(this, that);
  }
  
  public Z; startsWith(Lscala/collection/Seq; that) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::startsWith(Lscala/collection/GenSeqLike;Lscala/collection/Seq;)Z;)(this, that);
  }
  
  public Ljava/lang/Object; union(Lscala/collection/Seq; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::union(Lscala/collection/GenSeqLike;Lscala/collection/Seq;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public I; hashCode() {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::hashCode(Lscala/collection/GenSeqLike;)I;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; that) {
    return Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/PartialFunction; orElse(Lscala/PartialFunction; that) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::orElse(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;)(this, that);
  }
  
  public Lscala/PartialFunction; andThen(Lscala/Function1; k) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::andThen(Lscala/PartialFunction;Lscala/Function1;)Lscala/PartialFunction;)(this, k);
  }
  
  public Lscala/Function1; lift() {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::lift(Lscala/PartialFunction;)Lscala/Function1;)(this);
  }
  
  public Z; apply$mcZD$sp(D; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcZD$sp(Lscala/Function1;D;)Z;)(this, v1);
  }
  
  public D; apply$mcDD$sp(D; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcDD$sp(Lscala/Function1;D;)D;)(this, v1);
  }
  
  public F; apply$mcFD$sp(D; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcFD$sp(Lscala/Function1;D;)F;)(this, v1);
  }
  
  public I; apply$mcID$sp(D; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcID$sp(Lscala/Function1;D;)I;)(this, v1);
  }
  
  public J; apply$mcJD$sp(D; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcJD$sp(Lscala/Function1;D;)J;)(this, v1);
  }
  
  public V; apply$mcVD$sp(D; v1) {
    Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcVD$sp(Lscala/Function1;D;)V;)(this, v1);
  }
  
  public Z; apply$mcZF$sp(F; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcZF$sp(Lscala/Function1;F;)Z;)(this, v1);
  }
  
  public D; apply$mcDF$sp(F; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcDF$sp(Lscala/Function1;F;)D;)(this, v1);
  }
  
  public F; apply$mcFF$sp(F; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcFF$sp(Lscala/Function1;F;)F;)(this, v1);
  }
  
  public I; apply$mcIF$sp(F; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcIF$sp(Lscala/Function1;F;)I;)(this, v1);
  }
  
  public J; apply$mcJF$sp(F; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcJF$sp(Lscala/Function1;F;)J;)(this, v1);
  }
  
  public V; apply$mcVF$sp(F; v1) {
    Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcVF$sp(Lscala/Function1;F;)V;)(this, v1);
  }
  
  public Z; apply$mcZI$sp(I; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcZI$sp(Lscala/Function1;I;)Z;)(this, v1);
  }
  
  public D; apply$mcDI$sp(I; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcDI$sp(Lscala/Function1;I;)D;)(this, v1);
  }
  
  public F; apply$mcFI$sp(I; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcFI$sp(Lscala/Function1;I;)F;)(this, v1);
  }
  
  public I; apply$mcII$sp(I; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcII$sp(Lscala/Function1;I;)I;)(this, v1);
  }
  
  public J; apply$mcJI$sp(I; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcJI$sp(Lscala/Function1;I;)J;)(this, v1);
  }
  
  public V; apply$mcVI$sp(I; v1) {
    Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcVI$sp(Lscala/Function1;I;)V;)(this, v1);
  }
  
  public Z; apply$mcZJ$sp(J; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcZJ$sp(Lscala/Function1;J;)Z;)(this, v1);
  }
  
  public D; apply$mcDJ$sp(J; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcDJ$sp(Lscala/Function1;J;)D;)(this, v1);
  }
  
  public F; apply$mcFJ$sp(J; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcFJ$sp(Lscala/Function1;J;)F;)(this, v1);
  }
  
  public I; apply$mcIJ$sp(J; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcIJ$sp(Lscala/Function1;J;)I;)(this, v1);
  }
  
  public J; apply$mcJJ$sp(J; v1) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcJJ$sp(Lscala/Function1;J;)J;)(this, v1);
  }
  
  public V; apply$mcVJ$sp(J; v1) {
    Lscala/Function1$class;.(Lscala/Function1$class;::apply$mcVJ$sp(Lscala/Function1;J;)V;)(this, v1);
  }
  
  public Lscala/Function1; compose(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcZD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcZD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcDD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcDD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcFD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcFD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcID$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcID$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcJD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcJD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcVD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcVD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcZF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcZF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcDF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcDF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcFF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcFF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcIF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcIF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcJF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcJF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcVF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcVF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcZI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcZI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcDI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcDI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcFI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcFI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcII$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcII$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcJI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcJI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcVI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcVI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcZJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcZJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcDJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcDJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcFJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcFJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcIJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcIJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcJJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcJJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; compose$mcVJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose$mcVJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcZD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcZD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcDD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcDD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcFD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcFD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcID$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcID$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcJD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcJD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcVD$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcVD$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcZF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcZF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcDF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcDF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcFF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcFF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcIF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcIF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcJF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcJF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcVF$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcVF$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcZI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcZI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcDI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcDI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcFI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcFI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcII$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcII$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcJI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcJI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcVI$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcVI$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcZJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcZJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcDJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcDJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcFJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcFJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcIJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcIJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcJJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcJJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/Function1; andThen$mcVJ$sp(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::andThen$mcVJ$sp(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toIterable(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterator; grouped(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::grouped(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size, I; step) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;I;)Lscala/collection/Iterator;)(this, size, step);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/Iterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/Iterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/GenIterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/Iterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/Iterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Z; sameElements(Lscala/collection/Iterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/Iterable;)Z;)(this, that);
  }
  
  public Z; canEqual(Ljava/lang/Object; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/Iterator; elements() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::elements(Lscala/collection/IterableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; first() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::first(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; firstOption() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::firstOption(Lscala/collection/IterableLike;)Lscala/Option;)(this);
  }
  
  public final Lscala/collection/Traversable; scala$collection$Traversable$$super$flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable).<cast>(Lscala/collection/Traversable;);
  }
  
  public final Lscala/collection/Traversable; scala$collection$Traversable$$super$transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable).<cast>(Lscala/collection/Traversable;);
  }
  
  public Lscala/collection/Traversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::flatten(Lscala/collection/Traversable;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/Traversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::transpose(Lscala/collection/Traversable;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::newBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/collection/mutable/Builder; genericBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/Tuple2; unzip(Lscala/Function1; asPair) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple2;)(this, asPair);
  }
  
  public Lscala/Tuple3; unzip3(Lscala/Function1; asTriple) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip3(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple3;)(this, asTriple);
  }
  
  public Lscala/collection/GenTraversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable);
  }
  
  public Ljava/lang/Object; repr() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::repr(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/Traversable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/Traversable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; filterNot(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filterNot(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::groupBy(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; scan(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; cbf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scan(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, cbf);
  }
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanRight(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Lscala/Option; headOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::headOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; tail() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tail(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; lastOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::lastOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; sliceWithKnownDelta(I; from, I; until, I; delta) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownDelta(Lscala/collection/TraversableLike;I;I;I;)Ljava/lang/Object;)(this, from, until, delta);
  }
  
  public Ljava/lang/Object; sliceWithKnownBound(I; from, I; until) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownBound(Lscala/collection/TraversableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Lscala/collection/Iterator; tails() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tails(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; inits() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::inits(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toTraversable(Lscala/collection/TraversableLike;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toIterator(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public final Z; isTraversableAgain() {
    return Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::isTraversableAgain(Lscala/collection/GenTraversableLike;)Z;)(this);
  }
  
  public Lscala/collection/Parallel; par() {
    return Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::par(Lscala/collection/Parallelizable;)Lscala/collection/Parallel;)(this);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public Lscala/Option; collectFirst(Lscala/PartialFunction; pf) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::collectFirst(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;)(this, pf);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; reduce(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduce(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; fold(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::fold(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; aggregate(Ljava/lang/Object; z, Lscala/Function2; seqop, Lscala/Function2; combop) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::aggregate(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;)(this, z, seqop, combop);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; maxBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::maxBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public Ljava/lang/Object; minBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::minBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/List; toList() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toList(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toBuffer(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  public Ljava/lang/Object; $div$colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$div$colon$bslash(Lscala/collection/GenTraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/immutable/Stream$;.MODULE$;
  }
  
  public abstract Z; isEmpty();
  
  public abstract Ljava/lang/Object; head();
  
  protected abstract Z; tailDefined();
  
  public Lscala/collection/immutable/Stream; append(Lscala/Function0; rest$1) {
    Lscala/collection/immutable/Stream; $1$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $1$ = rest$1.(Lscala/Function0;::apply()Ljava/lang/Object;)().<cast>(Lscala/collection/GenTraversableOnce;).(Lscala/collection/GenTraversableOnce;::toStream()Lscala/collection/immutable/Stream;)();
      }
    else
      {
        $1$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$append$1;::this(Lscala/collection/immutable/Stream;Lscala/Function0;)V;)(this, rest$1)));
      }
    return $1$;
  }
  
  public Lscala/collection/immutable/Stream; force() {
    Lscala/collection/immutable/Stream; these = this;
    while$1: while(true) {
      if (!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    return this;
  }
  
  public V; print() {
    this.(Lscala/collection/immutable/Stream;::print(Ljava/lang/String;)V;)(", ");
  }
  
  public V; print(Ljava/lang/String; sep$1) {
    this.(Lscala/collection/immutable/Stream;::loop$1(Lscala/collection/immutable/Stream;Ljava/lang/String;Ljava/lang/String;)V;)(this, "", sep$1);
  }
  
  public I; length() {
    I; len = 0;
    Lscala/collection/immutable/Stream; left = this;
    while$2: while(true) {
      if (!(left.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            len = (len + 1);
            left = left.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    return len;
  }
  
  public final Ljava/lang/Object; scala$collection$immutable$Stream$$asThat(Ljava/lang/Object; x) {
    return x;
  }
  
  public final Lscala/collection/immutable/Stream; scala$collection$immutable$Stream$$asStream(Ljava/lang/Object; x) {
    return x.<cast>(Lscala/collection/immutable/Stream;);
  }
  
  public final Z; scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom; bf) {
    return bf.(Lscala/collection/generic/CanBuildFrom;::apply(Ljava/lang/Object;)Lscala/collection/mutable/Builder;)(this.(Lscala/collection/TraversableLike;::repr()Ljava/lang/Object;)()).<instanceof>(Lscala/collection/immutable/Stream$StreamBuilder;);
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return this;
  }
  
  public Z; hasDefiniteSize() {
    return this.(Lscala/collection/immutable/Stream;::loop$2(Lscala/collection/immutable/Stream;)Z;)(this);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/GenTraversableOnce; that$1, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $2$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        Ljava/lang/Object; $3$;
        if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $3$ = that$1.(Lscala/collection/GenTraversableOnce;::toStream()Lscala/collection/immutable/Stream;)();
          }
        else
          {
            $3$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$$plus$plus$1;::this(Lscala/collection/immutable/Stream;Lscala/collection/GenTraversableOnce;)V;)(this, that$1)));
          }
        $2$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)($3$);
      }
    else
      {
        $2$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that$1, bf);
      }
    return $2$;
  }
  
  public Ljava/lang/Object; $plus$colon(Ljava/lang/Object; elem, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $4$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        $4$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)(Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(elem, (new (Lscala/collection/immutable/Stream$$anonfun$$plus$colon$1;::this(Lscala/collection/immutable/Stream;)V;)(this))));
      }
    else
      {
        $4$ = Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$plus$colon(Lscala/collection/SeqLike;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, elem, bf);
      }
    return $4$;
  }
  
  public final Ljava/lang/Object; scanLeft(Ljava/lang/Object; z$1, Lscala/Function2; op$1, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $5$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        Ljava/lang/Object; $6$;
        if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $6$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/Stream;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/Object;>{z$1}));
          }
        else
          {
            $6$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(z$1, (new (Lscala/collection/immutable/Stream$$anonfun$scanLeft$1;::this(Lscala/collection/immutable/Stream;Ljava/lang/Object;Lscala/Function2;)V;)(this, z$1, op$1)));
          }
        $5$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)($6$);
      }
    else
      {
        $5$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanLeft(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z$1, op$1, bf);
      }
    return $5$;
  }
  
  public final Ljava/lang/Object; map(Lscala/Function1; f$1, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $7$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        Ljava/lang/Object; $8$;
        if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $8$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
          }
        else
          {
            $8$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(f$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()), (new (Lscala/collection/immutable/Stream$$anonfun$map$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(this, f$1)));
          }
        $7$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)($8$);
      }
    else
      {
        $7$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f$1, bf);
      }
    return $7$;
  }
  
  public final Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $9$;
    if (!(this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf)))
      {
        $9$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::collect(Lscala/collection/TraversableLike;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, pf, bf);
      }
    else
      {
        Lscala/collection/immutable/Stream; rest = this;
        while$3: while(true) {
          if ((rest.(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && !(pf.(Lscala/PartialFunction;::isDefinedAt(Ljava/lang/Object;)Z;)(rest.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
            {
              rest = rest.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
              continue while$3;
            }
          else
            {
              
            }
          break;
        }
        Ljava/lang/Object; $10$;
        if (rest.(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $10$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
          }
        else
          {
            $10$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::collectedTail(Lscala/collection/immutable/Stream;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Lscala/collection/immutable/Stream$Cons;)(rest, pf, bf);
          }
        $9$ = $10$;
      }
    return $9$;
  }
  
  public final Ljava/lang/Object; flatMap(Lscala/Function1; f$2, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $11$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        Ljava/lang/Object; $12$;
        if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $12$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
          }
        else
          {
            Lscala/runtime/ObjectRef; nonEmptyPrefix$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(this));
            Lscala/collection/immutable/Stream; prefix = f$2.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()).<cast>(Lscala/collection/GenTraversableOnce;).(Lscala/collection/GenTraversableOnce;::toStream()Lscala/collection/immutable/Stream;)();
            while$4: while(true) {
              if ((!(nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/IterableLike;::isEmpty()Z;)()) && prefix.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
                {
                  {
                    nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem = nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
                    if (!(nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/IterableLike;::isEmpty()Z;)()))
                      {
                        prefix = f$2.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()).<cast>(Lscala/collection/GenTraversableOnce;).(Lscala/collection/GenTraversableOnce;::toStream()Lscala/collection/immutable/Stream;)();
                      }
                    else
                      {
                        
                      }
                  }
                  continue while$4;
                }
              else
                {
                  
                }
              break;
            }
            Ljava/lang/Object; $13$;
            if (nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/IterableLike;::isEmpty()Z;)())
              {
                $13$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)();
              }
            else
              {
                $13$ = prefix.(Lscala/collection/immutable/Stream;::append(Lscala/Function0;)Lscala/collection/immutable/Stream;)((new (Lscala/collection/immutable/Stream$$anonfun$flatMap$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;)V;)(this, f$2, nonEmptyPrefix$1)));
              }
            $12$ = $13$;
          }
        $11$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)($12$);
      }
    else
      {
        $11$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f$2, bf);
      }
    return $11$;
  }
  
  public Lscala/collection/immutable/Stream; filter(Lscala/Function1; p) {
    Lscala/collection/immutable/Stream; rest = this;
    while$5: while(true) {
      if ((!(rest.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && !(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(rest.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)())))))
        {
          rest = rest.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          continue while$5;
        }
      else
        {
          
        }
      break;
    }
    Lscala/collection/immutable/Stream; $14$;
    if (rest.(Lscala/collection/TraversableOnce;::nonEmpty()Z;)())
      {
        $14$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::filteredTail(Lscala/collection/immutable/Stream;Lscala/Function1;)Lscala/collection/immutable/Stream$Cons;)(rest, p);
      }
    else
      {
        $14$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    return $14$;
  }
  
  public final Lscala/collection/immutable/Stream$StreamWithFilter; withFilter(Lscala/Function1; p) {
    return (new (Lscala/collection/immutable/Stream$StreamWithFilter;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(this, p));
  }
  
  public Lscala/collection/Iterator; iterator() {
    return (new (Lscala/collection/immutable/StreamIterator;::this(Lscala/collection/immutable/Stream;)V;)(this));
  }
  
  public final V; foreach(Lscala/Function1; f) {
    if (!(this.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
      {
        f.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
        this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::foreach(Lscala/Function1;)V;)(f);
      }
    else
      {
        
      }
  }
  
  public final Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    Ljava/lang/Object; $15$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $15$ = z;
      }
    else
      {
        $15$ = this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::foldLeft(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(op.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(z, this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()), op);
      }
    return $15$;
  }
  
  public final Ljava/lang/Object; reduceLeft(Lscala/Function2; f) {
    Ljava/lang/Object; $16$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        throw (new (Ljava/lang/UnsupportedOperationException;::this(Ljava/lang/String;)V;)("empty.reduceLeft"));
      }
    else
      {
        Ljava/lang/Object; reducedRes = this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)();
        Lscala/collection/immutable/Stream; left = this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
        while$6: while(true) {
          if (!(left.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
            {
              {
                reducedRes = f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(reducedRes, left.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
                left = left.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
              }
              continue while$6;
            }
          else
            {
              
            }
          break;
        }
        $16$ = reducedRes;
      }
    return $16$;
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p$2) {
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(this.(Lscala/collection/immutable/Stream;::filter(Lscala/Function1;)Lscala/collection/immutable/Stream;)((new (Lscala/collection/immutable/Stream$$anonfun$partition$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(this, p$2))), this.(Lscala/collection/TraversableLike;::filterNot(Lscala/Function1;)Ljava/lang/Object;)((new (Lscala/collection/immutable/Stream$$anonfun$partition$2;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(this, p$2)))));
  }
  
  public final Ljava/lang/Object; zip(Lscala/collection/GenIterable; that$2, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $17$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        Ljava/lang/Object; $18$;
        if ((this.(Lscala/collection/IterableLike;::isEmpty()Z;)() || that$2.(Lscala/collection/GenIterableLike;::isEmpty()Z;)()))
          {
            $18$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
          }
        else
          {
            $18$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), that$2.(Lscala/collection/GenIterableLike;::head()Ljava/lang/Object;)())), (new (Lscala/collection/immutable/Stream$$anonfun$zip$1;::this(Lscala/collection/immutable/Stream;Lscala/collection/GenIterable;)V;)(this, that$2)));
          }
        $17$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)($18$);
      }
    else
      {
        $17$ = Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that$2, bf);
      }
    return $17$;
  }
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf) {
    return this.(Lscala/collection/immutable/Stream;::zip(Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::from(I;)Lscala/collection/immutable/Stream;)(0), bf);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b$1, Ljava/lang/String; start, Ljava/lang/String; sep$2, Ljava/lang/String; end$1) {
    b$1.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(start);
    this.(Lscala/collection/immutable/Stream;::loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V;)("", this, b$1, sep$2, end$1);
    return b$1;
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return this.(Lscala/collection/immutable/Stream;::mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)("", sep, "");
  }
  
  public Ljava/lang/String; mkString() {
    return this.(Lscala/collection/immutable/Stream;::mkString(Ljava/lang/String;)Ljava/lang/String;)("");
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    this.(Lscala/collection/immutable/Stream;::force()Lscala/collection/immutable/Stream;)();
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, (this.(Lscala/collection/immutable/Stream;::stringPrefix()Ljava/lang/String;)() + "("), ", ", ")");
  }
  
  public Lscala/Tuple2; splitAt(I; n) {
    return (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(this.(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)(n), this.(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)(n)));
  }
  
  public Lscala/collection/immutable/Stream; take(I; n$1) {
    Lscala/collection/immutable/Stream; $19$;
    if (((n$1 <= 0) || this.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
      {
        $19$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)();
      }
    else
      {
        Lscala/collection/immutable/Stream; $20$;
        if ((n$1 == 1))
          {
            $20$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$take$1;::this(Lscala/collection/immutable/Stream;)V;)(this)));
          }
        else
          {
            $20$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$take$2;::this(Lscala/collection/immutable/Stream;I;)V;)(this, n$1)));
          }
        $19$ = $20$;
      }
    return $19$;
  }
  
  public final Lscala/collection/immutable/Stream; drop(I; n) {
    Lscala/collection/immutable/Stream; $21$;
    if (((n <= 0) || this.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
      {
        $21$ = this;
      }
    else
      {
        $21$ = this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)((n - 1));
      }
    return $21$;
  }
  
  public Lscala/collection/immutable/Stream; slice(I; from, I; until) {
    I; lo = Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)(from).(Lscala/runtime/RichInt;::max(I;)I;)(0);
    Lscala/collection/immutable/Stream; $22$;
    if (((until <= lo) || this.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
      {
        $22$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)();
      }
    else
      {
        $22$ = this.(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)(lo).(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)((until - lo));
      }
    return $22$;
  }
  
  public Lscala/collection/immutable/Stream; init() {
    Lscala/collection/immutable/Stream; $23$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $23$ = Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::init(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this).<cast>(Lscala/collection/immutable/Stream;);
      }
    else
      {
        Lscala/collection/immutable/Stream; $24$;
        if (this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            $24$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
          }
        else
          {
            $24$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$init$1;::this(Lscala/collection/immutable/Stream;)V;)(this)));
          }
        $23$ = $24$;
      }
    return $23$;
  }
  
  public Lscala/collection/immutable/Stream; takeRight(I; n) {
    Lscala/collection/immutable/Stream; these = this;
    Lscala/collection/immutable/Stream; lead = this.(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)(n);
    while$7: while(true) {
      if (!(lead.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
            lead = lead.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          }
          continue while$7;
        }
      else
        {
          
        }
      break;
    }
    return these;
  }
  
  public Lscala/collection/immutable/Stream; takeWhile(Lscala/Function1; p$3) {
    Lscala/collection/immutable/Stream; $25$;
    if ((!(this.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p$3.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
      {
        $25$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$takeWhile$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;)V;)(this, p$3)));
      }
    else
      {
        $25$ = Lscala/collection/immutable/Stream$Empty$;.MODULE$;
      }
    return $25$;
  }
  
  public Lscala/collection/immutable/Stream; dropWhile(Lscala/Function1; p) {
    Lscala/collection/immutable/Stream; these = this;
    while$8: while(true) {
      if ((!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()))))
        {
          these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          continue while$8;
        }
      else
        {
          
        }
      break;
    }
    return these;
  }
  
  public Lscala/collection/immutable/Stream; distinct() {
    Lscala/collection/immutable/Stream; $26$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $26$ = this;
      }
    else
      {
        $26$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$distinct$1;::this(Lscala/collection/immutable/Stream;)V;)(this)));
      }
    return $26$;
  }
  
  public Ljava/lang/Object; padTo(I; len, Ljava/lang/Object; elem$1, Lscala/collection/generic/CanBuildFrom; bf) {
    Ljava/lang/Object; $27$;
    if (this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$isStreamBuilder(Lscala/collection/generic/CanBuildFrom;)Z;)(bf))
      {
        $27$ = this.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asThat(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/immutable/Stream;::loop$4(I;Lscala/collection/immutable/Stream;Ljava/lang/Object;)Lscala/collection/immutable/Stream;)(len, this, elem$1));
      }
    else
      {
        $27$ = Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::padTo(Lscala/collection/SeqLike;I;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, len, elem$1, bf);
      }
    return $27$;
  }
  
  public Lscala/collection/immutable/Stream; reverse() {
    Lscala/runtime/ObjectRef; result$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/immutable/Stream$Empty$;.MODULE$));
    Lscala/collection/immutable/Stream; these = this;
    while$9: while(true) {
      if (!(these.(Lscala/collection/IterableLike;::isEmpty()Z;)()))
        {
          {
            Lscala/collection/immutable/Stream; r = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::consWrapper(Lscala/Function0;)Lscala/collection/immutable/Stream$ConsWrapper;)((new (Lscala/collection/immutable/Stream$$anonfun$1;::this(Lscala/collection/immutable/Stream;Lscala/runtime/ObjectRef;)V;)(this, result$1))).(Lscala/collection/immutable/Stream$ConsWrapper;::$hash$colon$colon(Ljava/lang/Object;)Lscala/collection/immutable/Stream;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
            r.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)();
            result$1.(Lscala/runtime/ObjectRef;)elem = r;
            these = these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
          }
          continue while$9;
        }
      else
        {
          
        }
      break;
    }
    return result$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;);
  }
  
  public Lscala/collection/immutable/Stream; flatten(Lscala/Function1; asTraversable$1) {
    Lscala/collection/immutable/Stream; $28$;
    if (this.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $28$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::empty()Lscala/collection/immutable/Stream;)();
      }
    else
      {
        $28$ = this.(Lscala/collection/immutable/Stream;::flatten1$1(Lscala/collection/Traversable;Lscala/Function1;)Lscala/collection/immutable/Stream;)(asTraversable$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)()).<cast>(Lscala/collection/TraversableOnce;).(Lscala/collection/TraversableOnce;::toTraversable()Lscala/collection/Traversable;)(), asTraversable$1);
      }
    return $28$;
  }
  
  public Lscala/collection/immutable/StreamView; view() {
    return (new (Lscala/collection/immutable/Stream$$anon$1;::this(Lscala/collection/immutable/Stream;)V;)(this));
  }
  
  public Ljava/lang/String; stringPrefix() {
    return "Stream";
  }
  
  public Lscala/collection/GenMap; toMap(Lscala/Predef$$less$colon$less; ev) {
    return this.(Lscala/collection/TraversableOnce;::toMap(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(ev);
  }
  
  public Lscala/collection/GenSet; toSet() {
    return this.(Lscala/collection/TraversableOnce;::toSet()Lscala/collection/immutable/Set;)();
  }
  
  public Lscala/collection/GenTraversable; toTraversable() {
    return this.(Lscala/collection/TraversableLike;::toTraversable()Lscala/collection/Traversable;)();
  }
  
  public Lscala/collection/LinearSeqOptimized; tail() {
    return this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/LinearSeqOptimized;);
  }
  
  public Lscala/collection/immutable/Stream; tail() {
    return this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;);
  }
  
  public Lscala/collection/GenMap; groupBy(Lscala/Function1; f) {
    return this.(Lscala/collection/TraversableLike;::groupBy(Lscala/Function1;)Lscala/collection/immutable/Map;)(f);
  }
  
  public Lscala/collection/GenIterable; toIterable() {
    return this.(Lscala/collection/IterableLike;::toIterable()Lscala/collection/Iterable;)();
  }
  
  public Lscala/Function1; andThen(Lscala/Function1; g) {
    return this.(Lscala/PartialFunction;::andThen(Lscala/Function1;)Lscala/PartialFunction;)(g);
  }
  
  public Lscala/collection/IterableView; projection() {
    return this.(Lscala/collection/SeqLike;::projection()Lscala/collection/SeqView;)();
  }
  
  public Lscala/collection/TraversableView; view(I; from, I; until) {
    return this.(Lscala/collection/SeqLike;::view(I;I;)Lscala/collection/SeqView;)(from, until);
  }
  
  public Lscala/collection/IterableView; view(I; from, I; until) {
    return this.(Lscala/collection/SeqLike;::view(I;I;)Lscala/collection/SeqView;)(from, until);
  }
  
  public Lscala/collection/TraversableOnce; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/Traversable; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/immutable/Traversable; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/Iterable; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/immutable/Iterable; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/Seq; seq() {
    return this.(Lscala/collection/immutable/Seq;::seq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/GenSeq; toSeq() {
    return this.(Lscala/collection/immutable/Seq;::toSeq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/Seq; toSeq() {
    return this.(Lscala/collection/immutable/Seq;::toSeq()Lscala/collection/immutable/Seq;)();
  }
  
  public Lscala/collection/Traversable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Iterable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Seq; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/LinearSeqLike;::toCollection(Lscala/collection/LinearSeqLike;)Lscala/collection/LinearSeq;)(repr.<cast>(Lscala/collection/LinearSeqLike;));
  }
  
  public Lscala/collection/Traversable; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Lscala/collection/Iterable; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Lscala/collection/Seq; thisCollection() {
    return this.(Lscala/collection/LinearSeqLike;::thisCollection()Lscala/collection/LinearSeq;)();
  }
  
  public Z; isDefinedAt(Ljava/lang/Object; x) {
    return this.(Lscala/collection/LinearSeqOptimized;::isDefinedAt(I;)Z;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(x));
  }
  
  public Ljava/lang/Object; dropRight(I; n) {
    return this.(Lscala/collection/LinearSeqOptimized;::dropRight(I;)Lscala/collection/LinearSeqOptimized;)(n);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    return this.(Lscala/collection/LinearSeqOptimized;::apply(I;)Ljava/lang/Object;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(v1));
  }
  
  public Lscala/collection/TraversableView; view() {
    return this.(Lscala/collection/immutable/Stream;::view()Lscala/collection/immutable/StreamView;)();
  }
  
  public Lscala/collection/IterableView; view() {
    return this.(Lscala/collection/immutable/Stream;::view()Lscala/collection/immutable/StreamView;)();
  }
  
  public Lscala/collection/SeqView; view() {
    return this.(Lscala/collection/immutable/Stream;::view()Lscala/collection/immutable/StreamView;)();
  }
  
  public Lscala/collection/GenTraversable; flatten(Lscala/Function1; asTraversable) {
    return this.(Lscala/collection/immutable/Stream;::flatten(Lscala/Function1;)Lscala/collection/immutable/Stream;)(asTraversable);
  }
  
  public Ljava/lang/Object; reverse() {
    return this.(Lscala/collection/immutable/Stream;::reverse()Lscala/collection/immutable/Stream;)();
  }
  
  public Ljava/lang/Object; distinct() {
    return this.(Lscala/collection/immutable/Stream;::distinct()Lscala/collection/immutable/Stream;)();
  }
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/Stream;::dropWhile(Lscala/Function1;)Lscala/collection/immutable/Stream;)(p);
  }
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/Stream;::takeWhile(Lscala/Function1;)Lscala/collection/immutable/Stream;)(p);
  }
  
  public Lscala/collection/LinearSeqOptimized; takeWhile(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/Stream;::takeWhile(Lscala/Function1;)Lscala/collection/immutable/Stream;)(p);
  }
  
  public Ljava/lang/Object; takeRight(I; n) {
    return this.(Lscala/collection/immutable/Stream;::takeRight(I;)Lscala/collection/immutable/Stream;)(n);
  }
  
  public Ljava/lang/Object; init() {
    return this.(Lscala/collection/immutable/Stream;::init()Lscala/collection/immutable/Stream;)();
  }
  
  public Ljava/lang/Object; slice(I; from, I; until) {
    return this.(Lscala/collection/immutable/Stream;::slice(I;I;)Lscala/collection/immutable/Stream;)(from, until);
  }
  
  public Lscala/collection/LinearSeqOptimized; slice(I; from, I; until) {
    return this.(Lscala/collection/immutable/Stream;::slice(I;I;)Lscala/collection/immutable/Stream;)(from, until);
  }
  
  public final Ljava/lang/Object; drop(I; n) {
    return this.(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)(n);
  }
  
  public final Lscala/collection/LinearSeqOptimized; drop(I; n) {
    return this.(Lscala/collection/immutable/Stream;::drop(I;)Lscala/collection/immutable/Stream;)(n);
  }
  
  public Ljava/lang/Object; take(I; n) {
    return this.(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)(n);
  }
  
  public Lscala/collection/LinearSeqOptimized; take(I; n) {
    return this.(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)(n);
  }
  
  public final Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/Stream;::withFilter(Lscala/Function1;)Lscala/collection/immutable/Stream$StreamWithFilter;)(p);
  }
  
  public Ljava/lang/Object; filter(Lscala/Function1; p) {
    return this.(Lscala/collection/immutable/Stream;::filter(Lscala/Function1;)Lscala/collection/immutable/Stream;)(p);
  }
  
  private final V; loop$1(Lscala/collection/immutable/Stream; these, Ljava/lang/String; start, Ljava/lang/String; sep$1) {
    Lscala/Console$;.MODULE$.(Lscala/Console$;::print(Ljava/lang/Object;)V;)(start);
    if (these.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        Lscala/Console$;.MODULE$.(Lscala/Console$;::print(Ljava/lang/Object;)V;)("empty");
      }
    else
      {
        Lscala/Console$;.MODULE$.(Lscala/Console$;::print(Ljava/lang/Object;)V;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
        this.(Lscala/collection/immutable/Stream;::loop$1(Lscala/collection/immutable/Stream;Ljava/lang/String;Ljava/lang/String;)V;)(these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;), sep$1, sep$1);
      }
  }
  
  private final Z; loop$2(Lscala/collection/immutable/Stream; s) {
    return (s.(Lscala/collection/IterableLike;::isEmpty()Z;)() || (s.(Lscala/collection/immutable/Stream;::tailDefined()Z;)() && this.(Lscala/collection/immutable/Stream;::loop$2(Lscala/collection/immutable/Stream;)Z;)(s.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;))));
  }
  
  private final V; loop$3(Ljava/lang/String; pre, Lscala/collection/immutable/Stream; these, Lscala/collection/mutable/StringBuilder; b$1, Ljava/lang/String; sep$2, Ljava/lang/String; end$1) {
    if (these.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        b$1.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(end$1);
      }
    else
      {
        b$1.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(pre).(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;)(these.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)());
        if (these.(Lscala/collection/immutable/Stream;::tailDefined()Z;)())
          {
            this.(Lscala/collection/immutable/Stream;::loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V;)(sep$2, these.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;), b$1, sep$2, end$1);
          }
        else
          {
            b$1.(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(sep$2).(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)("?").(Lscala/collection/mutable/StringBuilder;::append(Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(end$1);
          }
      }
  }
  
  public final Lscala/collection/immutable/Stream; loop$4(I; len$1, Lscala/collection/immutable/Stream; these$1, Ljava/lang/Object; elem$1) {
    Lscala/collection/immutable/Stream; $29$;
    if (these$1.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        $29$ = Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::fill(I;Lscala/Function0;)Lscala/collection/immutable/Stream;)(len$1, (new (Lscala/collection/immutable/Stream$$anonfun$loop$4$1;::this(Lscala/collection/immutable/Stream;Ljava/lang/Object;)V;)(this, elem$1)));
      }
    else
      {
        $29$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(these$1.(Lscala/collection/IterableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$loop$4$2;::this(Lscala/collection/immutable/Stream;Ljava/lang/Object;I;Lscala/collection/immutable/Stream;)V;)(this, elem$1, len$1, these$1)));
      }
    return $29$;
  }
  
  public final Lscala/collection/immutable/Stream; flatten1$1(Lscala/collection/Traversable; t$1, Lscala/Function1; asTraversable$1) {
    Lscala/collection/immutable/Stream; $30$;
    if (!(t$1.(Lscala/collection/TraversableLike;::isEmpty()Z;)()))
      {
        $30$ = Lscala/collection/immutable/Stream$cons$;.MODULE$.(Lscala/collection/immutable/Stream$cons$;::apply(Ljava/lang/Object;Lscala/Function0;)Lscala/collection/immutable/Stream$Cons;)(t$1.(Lscala/collection/TraversableLike;::head()Ljava/lang/Object;)(), (new (Lscala/collection/immutable/Stream$$anonfun$flatten1$1$1;::this(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/collection/Traversable;)V;)(this, asTraversable$1, t$1)));
      }
    else
      {
        $30$ = this.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::flatten(Lscala/Function1;)Lscala/collection/immutable/Stream;)(asTraversable$1);
      }
    return $30$;
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$init$(Lscala/collection/GenTraversableOnce;)V;)(this);
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::$init$(Lscala/collection/Parallelizable;)V;)(this);
    Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::$init$(Lscala/collection/GenTraversableLike;)V;)(this);
    Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$init$(Lscala/collection/TraversableLike;)V;)(this);
    Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::$init$(Lscala/collection/generic/GenericTraversableTemplate;)V;)(this);
    Lscala/collection/GenTraversable$class;.(Lscala/collection/GenTraversable$class;::$init$(Lscala/collection/GenTraversable;)V;)(this);
    Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::$init$(Lscala/collection/Traversable;)V;)(this);
    Lscala/collection/immutable/Traversable$class;.(Lscala/collection/immutable/Traversable$class;::$init$(Lscala/collection/immutable/Traversable;)V;)(this);
    Lscala/collection/GenIterableLike$class;.(Lscala/collection/GenIterableLike$class;::$init$(Lscala/collection/GenIterableLike;)V;)(this);
    Lscala/collection/GenIterable$class;.(Lscala/collection/GenIterable$class;::$init$(Lscala/collection/GenIterable;)V;)(this);
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::$init$(Lscala/collection/IterableLike;)V;)(this);
    Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::$init$(Lscala/collection/Iterable;)V;)(this);
    Lscala/collection/immutable/Iterable$class;.(Lscala/collection/immutable/Iterable$class;::$init$(Lscala/collection/immutable/Iterable;)V;)(this);
    Lscala/Function1$class;.(Lscala/Function1$class;::$init$(Lscala/Function1;)V;)(this);
    Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::$init$(Lscala/PartialFunction;)V;)(this);
    Lscala/collection/GenSeqLike$class;.(Lscala/collection/GenSeqLike$class;::$init$(Lscala/collection/GenSeqLike;)V;)(this);
    Lscala/collection/GenSeq$class;.(Lscala/collection/GenSeq$class;::$init$(Lscala/collection/GenSeq;)V;)(this);
    Lscala/collection/SeqLike$class;.(Lscala/collection/SeqLike$class;::$init$(Lscala/collection/SeqLike;)V;)(this);
    Lscala/collection/Seq$class;.(Lscala/collection/Seq$class;::$init$(Lscala/collection/Seq;)V;)(this);
    Lscala/collection/immutable/Seq$class;.(Lscala/collection/immutable/Seq$class;::$init$(Lscala/collection/immutable/Seq;)V;)(this);
    Lscala/collection/LinearSeqLike$class;.(Lscala/collection/LinearSeqLike$class;::$init$(Lscala/collection/LinearSeqLike;)V;)(this);
    Lscala/collection/LinearSeq$class;.(Lscala/collection/LinearSeq$class;::$init$(Lscala/collection/LinearSeq;)V;)(this);
    Lscala/collection/immutable/LinearSeq$class;.(Lscala/collection/immutable/LinearSeq$class;::$init$(Lscala/collection/immutable/LinearSeq;)V;)(this);
    Lscala/collection/LinearSeqOptimized$class;.(Lscala/collection/LinearSeqOptimized$class;::$init$(Lscala/collection/LinearSeqOptimized;)V;)(this);
  }
}
