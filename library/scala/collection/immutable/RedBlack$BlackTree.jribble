public class Lscala/collection/immutable/RedBlack$BlackTree; extends Lscala/collection/immutable/RedBlack$NonEmpty; implements Lscala/ScalaObject;, Lscala/Product;, Lscala/Serializable; {
  
  public Lscala/collection/Iterator; productIterator() {
    return Lscala/Product$class;.(Lscala/Product$class;::productIterator(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; productElements() {
    return Lscala/Product$class;.(Lscala/Product$class;::productElements(Lscala/Product;)Lscala/collection/Iterator;)(this);
  }
  
  private Ljava/lang/Object; key$u0020;
  
  public Ljava/lang/Object; key() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;)key$u0020;
  }
  
  private Ljava/lang/Object; value$u0020;
  
  public Ljava/lang/Object; value() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;)value$u0020;
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; left$u0020;
  
  public Lscala/collection/immutable/RedBlack$Tree; left() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;)left$u0020;
  }
  
  private Lscala/collection/immutable/RedBlack$Tree; right$u0020;
  
  public Lscala/collection/immutable/RedBlack$Tree; right() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;)right$u0020;
  }
  
  public Z; isBlack() {
    return true;
  }
  
  public Lscala/collection/immutable/RedBlack$BlackTree; copy(Ljava/lang/Object; key, Ljava/lang/Object; value, Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right) {
    return (new (Lscala/collection/immutable/RedBlack$BlackTree;::this(Lscala/collection/immutable/RedBlack;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)V;)(this.(Lscala/collection/immutable/RedBlack$BlackTree;::scala$collection$immutable$RedBlack$BlackTree$$$outer()Lscala/collection/immutable/RedBlack;)(), key, value, left, right));
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; copy$default$4() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; copy$default$3() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
  }
  
  public Ljava/lang/Object; copy$default$2() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;::value()Ljava/lang/Object;)();
  }
  
  public Ljava/lang/Object; copy$default$1() {
    return this.(Lscala/collection/immutable/RedBlack$BlackTree;::key()Ljava/lang/Object;)();
  }
  
  public I; hashCode() {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::_hashCode(Lscala/Product;)I;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::_toString(Lscala/Product;)Ljava/lang/String;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; x$1) {
    Ljava/lang/Object; temp250 = x$1;
    Z; $105$;
    if ((temp250.<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;) && (temp250.<cast>(Lscala/collection/immutable/RedBlack$BlackTree;).(Lscala/collection/immutable/RedBlack$BlackTree;::scala$collection$immutable$RedBlack$BlackTree$$$outer()Lscala/collection/immutable/RedBlack;)() == this.(Lscala/collection/immutable/RedBlack$BlackTree;::scala$collection$immutable$RedBlack$BlackTree$$$outer()Lscala/collection/immutable/RedBlack;)())))
      {
        Lscala/collection/immutable/RedBlack$BlackTree; temp251 = temp250.<cast>(Lscala/collection/immutable/RedBlack$BlackTree;);
        Ljava/lang/Object; temp252 = temp251.(Lscala/collection/immutable/RedBlack$BlackTree;::key()Ljava/lang/Object;)();
        Ljava/lang/Object; temp253 = temp251.(Lscala/collection/immutable/RedBlack$BlackTree;::value()Ljava/lang/Object;)();
        Lscala/collection/immutable/RedBlack$Tree; temp254 = temp251.(Lscala/collection/immutable/RedBlack$BlackTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
        Lscala/collection/immutable/RedBlack$Tree; temp255 = temp251.(Lscala/collection/immutable/RedBlack$BlackTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
        Ljava/lang/Object; key$2 = temp252;
        Ljava/lang/Object; value$2 = temp253;
        Lscala/collection/immutable/RedBlack$Tree; left$2 = temp254;
        Lscala/collection/immutable/RedBlack$Tree; right$2 = temp255;
        Z; $106$;
        if (this.(Lscala/collection/immutable/RedBlack$BlackTree;::gd4$1(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/immutable/RedBlack$Tree;Lscala/collection/immutable/RedBlack$Tree;)Z;)(key$2, value$2, left$2, right$2))
          {
            Ljava/lang/Object; $107$;
            Ljava/lang/Object; $108$;
            Lscala/collection/immutable/RedBlack$Tree; $109$;
            Lscala/collection/immutable/RedBlack$Tree; $110$;
            Z; $111$;
            body$percent021: while(true) {
              $111$ = x$1.<cast>(Lscala/collection/immutable/RedBlack$BlackTree;).(Lscala/Equals;::canEqual(Ljava/lang/Object;)Z;)(this);
              break;
            }
            $106$ = $111$;
          }
        else
          {
            $106$ = false;
          }
        $105$ = $106$;
      }
    else
      {
        $105$ = false;
      }
    return ((this == x$1) || $105$);
  }
  
  public Ljava/lang/String; productPrefix() {
    return "BlackTree";
  }
  
  public I; productArity() {
    return 4;
  }
  
  public Ljava/lang/Object; productElement(I; x$1) {
    I; temp256 = x$1;
    I; $112$ = temp256;
    Ljava/lang/Object; $113$;
    switch ($112$) {
      3: {
        $113$ = this.(Lscala/collection/immutable/RedBlack$BlackTree;::right()Lscala/collection/immutable/RedBlack$Tree;)();
        break;
      }
      
      1: {
        $113$ = this.(Lscala/collection/immutable/RedBlack$BlackTree;::value()Ljava/lang/Object;)();
        break;
      }
      
      2: {
        $113$ = this.(Lscala/collection/immutable/RedBlack$BlackTree;::left()Lscala/collection/immutable/RedBlack$Tree;)();
        break;
      }
      
      0: {
        $113$ = this.(Lscala/collection/immutable/RedBlack$BlackTree;::key()Ljava/lang/Object;)();
        break;
      }
      
      default: {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(x$1).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
        break;
      }
      
    }
    return $113$;
  }
  
  public Z; canEqual(Ljava/lang/Object; x$1) {
    return x$1.<instanceof>(Lscala/collection/immutable/RedBlack$BlackTree;);
  }
  
  public Lscala/collection/immutable/RedBlack; scala$collection$immutable$RedBlack$BlackTree$$$outer() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;)$outer$u0020;
  }
  
  private final Z; gd4$1(Ljava/lang/Object; x$1, Ljava/lang/Object; x$2, Lscala/collection/immutable/RedBlack$Tree; x$3, Lscala/collection/immutable/RedBlack$Tree; x$4) {
    return (((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$1, this.(Lscala/collection/immutable/RedBlack$BlackTree;::key()Ljava/lang/Object;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$2, this.(Lscala/collection/immutable/RedBlack$BlackTree;::value()Ljava/lang/Object;)())) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$3, this.(Lscala/collection/immutable/RedBlack$BlackTree;::left()Lscala/collection/immutable/RedBlack$Tree;)())) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x$4, this.(Lscala/collection/immutable/RedBlack$BlackTree;::right()Lscala/collection/immutable/RedBlack$Tree;)()));
  }
  
  public this(Lscala/collection/immutable/RedBlack; $outer, Ljava/lang/Object; key, Ljava/lang/Object; value, Lscala/collection/immutable/RedBlack$Tree; left, Lscala/collection/immutable/RedBlack$Tree; right) {
    this.(Lscala/collection/immutable/RedBlack$BlackTree;)key$u0020 = key;
    this.(Lscala/collection/immutable/RedBlack$BlackTree;)value$u0020 = value;
    this.(Lscala/collection/immutable/RedBlack$BlackTree;)left$u0020 = left;
    this.(Lscala/collection/immutable/RedBlack$BlackTree;)right$u0020 = right;
    (Lscala/collection/immutable/RedBlack$NonEmpty;::super(Lscala/collection/immutable/RedBlack;)V;)($outer);
    Lscala/Product$class;.(Lscala/Product$class;::$init$(Lscala/Product;)V;)(this);
  }
}
