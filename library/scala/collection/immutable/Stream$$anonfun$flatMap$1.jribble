public final class Lscala/collection/immutable/Stream$$anonfun$flatMap$1; extends Lscala/runtime/AbstractFunction0; {
  
  public final Lscala/collection/immutable/Stream; apply() {
    return this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)$outer$u0020.(Lscala/collection/immutable/Stream;::scala$collection$immutable$Stream$$asStream(Ljava/lang/Object;)Lscala/collection/immutable/Stream;)(this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)nonEmptyPrefix$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)f$2, Lscala/collection/immutable/Stream$;.MODULE$.(Lscala/collection/immutable/Stream$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()));
  }
  
  private Lscala/collection/immutable/Stream; $outer$u0020;
  
  public final Ljava/lang/Object; apply() {
    return this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;::apply()Lscala/collection/immutable/Stream;)();
  }
  
  private Lscala/Function1; f$2;
  
  private Lscala/runtime/ObjectRef; nonEmptyPrefix$1;
  
  public this(Lscala/collection/immutable/Stream; $outer, Lscala/Function1; f$2, Lscala/runtime/ObjectRef; nonEmptyPrefix$1) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)$outer$u0020 = $outer;
      }
    this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)f$2 = f$2;
    this.(Lscala/collection/immutable/Stream$$anonfun$flatMap$1;)nonEmptyPrefix$1 = nonEmptyPrefix$1;
    (Lscala/runtime/AbstractFunction0;::super()V;)();
  }
}
