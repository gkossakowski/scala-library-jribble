public abstract class Lscala/collection/immutable/RedBlack$Tree; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  public abstract Z; isEmpty();
  
  public abstract Z; isBlack();
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; lookup(Ljava/lang/Object; x);
  
  public Lscala/collection/immutable/RedBlack$Tree; update(Ljava/lang/Object; k, Ljava/lang/Object; v) {
    return this.(Lscala/collection/immutable/RedBlack$Tree;::scala$collection$immutable$RedBlack$Tree$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::scala$collection$immutable$RedBlack$$blacken(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(this.(Lscala/collection/immutable/RedBlack$Tree;::upd(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k, v));
  }
  
  public Lscala/collection/immutable/RedBlack$Tree; delete(Ljava/lang/Object; k) {
    return this.(Lscala/collection/immutable/RedBlack$Tree;::scala$collection$immutable$RedBlack$Tree$$$outer()Lscala/collection/immutable/RedBlack;)().(Lscala/collection/immutable/RedBlack;::scala$collection$immutable$RedBlack$$blacken(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;)(this.(Lscala/collection/immutable/RedBlack$Tree;::del(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;)(k));
  }
  
  public abstract V; foreach(Lscala/Function2; f);
  
  public abstract Lscala/Tuple2; visit(Ljava/lang/Object; input, Lscala/Function3; f);
  
  public abstract Lscala/collection/immutable/Stream; toStream();
  
  public abstract Lscala/collection/Iterator; iterator();
  
  public Lscala/collection/Iterator; elements() {
    return this.(Lscala/collection/immutable/RedBlack$Tree;::iterator()Lscala/collection/Iterator;)();
  }
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; upd(Ljava/lang/Object; k, Ljava/lang/Object; v);
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; del(Ljava/lang/Object; k);
  
  public abstract Lscala/collection/immutable/RedBlack$NonEmpty; smallest();
  
  public abstract Lscala/collection/immutable/RedBlack$Tree; range(Lscala/Option; from, Lscala/Option; until);
  
  public abstract Ljava/lang/Object; first();
  
  public abstract Ljava/lang/Object; last();
  
  public abstract I; count();
  
  protected Lscala/collection/immutable/RedBlack; $outer$u0020;
  
  public Lscala/collection/immutable/RedBlack; scala$collection$immutable$RedBlack$Tree$$$outer() {
    return this.(Lscala/collection/immutable/RedBlack;)$outer$u0020;
  }
  
  public this(Lscala/collection/immutable/RedBlack; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/immutable/RedBlack;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
  }
}
