public class Lscala/collection/immutable/HashMap$HashMapCollision1; extends Lscala/collection/immutable/HashMap; implements Lscala/ScalaObject; {
  
  private I; hash$u0020;
  
  public I; hash() {
    return this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)hash$u0020;
  }
  
  public V; hash_$eq(I; x$1) {
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)hash$u0020 = x$1;
  }
  
  private Lscala/collection/immutable/ListMap; kvs$u0020;
  
  public Lscala/collection/immutable/ListMap; kvs() {
    return this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)kvs$u0020;
  }
  
  public V; kvs_$eq(Lscala/collection/immutable/ListMap; x$1) {
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)kvs$u0020 = x$1;
  }
  
  public I; size() {
    return this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::size()I;)();
  }
  
  public Lscala/Option; get0(Ljava/lang/Object; key, I; hash, I; level) {
    Lscala/Option; $9$;
    if ((hash == this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::hash()I;)()))
      {
        $9$ = this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::get(Ljava/lang/Object;)Lscala/Option;)(key);
      }
    else
      {
        $9$ = Lscala/None$;.MODULE$;
      }
    return $9$;
  }
  
  public Lscala/collection/immutable/HashMap; updated0(Ljava/lang/Object; key, I; hash, I; level$1, Ljava/lang/Object; value, Lscala/Tuple2; kv, Lscala/Function2; merger$1) {
    Lscala/collection/immutable/HashMap; $10$;
    if ((hash == this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::hash()I;)()))
      {
        Lscala/collection/immutable/HashMap; $11$;
        if (((merger$1 == null) || !(this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/MapLike;::contains(Ljava/lang/Object;)Z;)(key))))
          {
            $11$ = (new (Lscala/collection/immutable/HashMap$HashMapCollision1;::this(I;Lscala/collection/immutable/ListMap;)V;)(hash, this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/ListMap;)(key, value)));
          }
        else
          {
            $11$ = (new (Lscala/collection/immutable/HashMap$HashMapCollision1;::this(I;Lscala/collection/immutable/ListMap;)V;)(hash, this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::$plus(Lscala/Tuple2;)Lscala/collection/immutable/ListMap;)(merger$1.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(key, this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/MapLike;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(key))), kv).<cast>(Lscala/Tuple2;))));
          }
        $10$ = $11$;
      }
    else
      {
        Lscala/runtime/ObjectRef; m$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)((new (Lscala/collection/immutable/HashMap$HashTrieMap;::this(I;Lscala/collection/immutable/HashMap;[I;)V;)(0, new Lscala/collection/immutable/HashMap;[0], 0))));
        this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/TraversableLike;::filter(Lscala/Function1;)Ljava/lang/Object;)((new (Lscala/collection/immutable/HashMap$HashMapCollision1$$anonfun$updated0$1;::this(Lscala/collection/immutable/HashMap$HashMapCollision1;)V;)(this))).<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/HashMap$HashMapCollision1$$anonfun$updated0$2;::this(Lscala/collection/immutable/HashMap$HashMapCollision1;I;Lscala/Function2;Lscala/runtime/ObjectRef;)V;)(this, level$1, merger$1, m$1)));
        $10$ = m$1.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/HashMap;).(Lscala/collection/immutable/HashMap;::updated0(Ljava/lang/Object;I;I;Ljava/lang/Object;Lscala/Tuple2;Lscala/Function2;)Lscala/collection/immutable/HashMap;)(key, hash, level$1, value, kv, merger$1);
      }
    return $10$;
  }
  
  public Lscala/collection/immutable/HashMap; removed0(Ljava/lang/Object; key, I; hash, I; level) {
    Lscala/collection/immutable/HashMap; $12$;
    if ((hash == this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::hash()I;)()))
      {
        Lscala/collection/immutable/ListMap; kvs1 = this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::$minus(Ljava/lang/Object;)Lscala/collection/immutable/ListMap;)(key);
        Lscala/collection/immutable/HashMap; $13$;
        if (!(kvs1.(Lscala/collection/MapLike;::isEmpty()Z;)()))
          {
            $13$ = (new (Lscala/collection/immutable/HashMap$HashMapCollision1;::this(I;Lscala/collection/immutable/ListMap;)V;)(hash, kvs1));
          }
        else
          {
            $13$ = Lscala/collection/immutable/HashMap$;.MODULE$.(Lscala/collection/immutable/HashMap$;::empty()Lscala/collection/immutable/HashMap;)();
          }
        $12$ = $13$;
      }
    else
      {
        $12$ = this;
      }
    return $12$;
  }
  
  public Lscala/collection/Iterator; iterator() {
    return this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::iterator()Lscala/collection/Iterator;)();
  }
  
  public V; foreach(Lscala/Function1; f) {
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)(f);
  }
  
  public Lscala/collection/immutable/Seq; split() {
    Lscala/Tuple2; temp7 = this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/TraversableLike;::splitAt(I;)Lscala/Tuple2;)((this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/immutable/ListMap;::size()I;)() / 2));
    Lscala/Tuple2; $14$;
    if ((temp7 != null))
      {
        $14$ = (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(temp7.(Lscala/Tuple2;::_1()Ljava/lang/Object;)(), temp7.(Lscala/Tuple2;::_2()Ljava/lang/Object;)()));
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp7));
      }
    Lscala/Tuple2; x$2 = $14$;
    Lscala/collection/immutable/ListMap; x = x$2.(Lscala/Tuple2;::_1()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/ListMap;);
    Lscala/collection/immutable/ListMap; y = x$2.(Lscala/Tuple2;::_2()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/ListMap;);
    return Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/collection/immutable/HashMap$HashMapCollision1;>{this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::newhm$1(Lscala/collection/immutable/ListMap;)Lscala/collection/immutable/HashMap$HashMapCollision1;)(x), this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::newhm$1(Lscala/collection/immutable/ListMap;)Lscala/collection/immutable/HashMap$HashMapCollision1;)(y)}.<cast>(Ljava/lang/Object;[)));
  }
  
  protected Lscala/collection/immutable/HashMap; merge0(Lscala/collection/immutable/HashMap; that, I; level$2, Lscala/Function2; merger$2) {
    Lscala/runtime/ObjectRef; m$2 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(that));
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::kvs()Lscala/collection/immutable/ListMap;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/immutable/HashMap$HashMapCollision1$$anonfun$merge0$1;::this(Lscala/collection/immutable/HashMap$HashMapCollision1;I;Lscala/Function2;Lscala/runtime/ObjectRef;)V;)(this, level$2, merger$2, m$2)));
    return m$2.(Lscala/runtime/ObjectRef;)elem.<cast>(Lscala/collection/immutable/HashMap;);
  }
  
  private final Lscala/collection/immutable/HashMap$HashMapCollision1; newhm$1(Lscala/collection/immutable/ListMap; lm) {
    return (new (Lscala/collection/immutable/HashMap$HashMapCollision1;::this(I;Lscala/collection/immutable/ListMap;)V;)(this.(Lscala/collection/immutable/HashMap$HashMapCollision1;::hash()I;)(), lm));
  }
  
  public this(I; hash, Lscala/collection/immutable/ListMap; kvs) {
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)hash$u0020 = hash;
    this.(Lscala/collection/immutable/HashMap$HashMapCollision1;)kvs$u0020 = kvs;
    (Lscala/collection/immutable/HashMap;::super()V;)();
  }
}
