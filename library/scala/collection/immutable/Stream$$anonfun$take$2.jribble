public final class Lscala/collection/immutable/Stream$$anonfun$take$2; extends Lscala/runtime/AbstractFunction0; implements Lscala/Serializable; {
  
  public final Lscala/collection/immutable/Stream; apply() {
    return this.(Lscala/collection/immutable/Stream$$anonfun$take$2;)$outer$u0020.(Lscala/collection/TraversableLike;::tail()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/Stream;).(Lscala/collection/immutable/Stream;::take(I;)Lscala/collection/immutable/Stream;)((this.(Lscala/collection/immutable/Stream$$anonfun$take$2;)n$1 - 1));
  }
  
  private Lscala/collection/immutable/Stream; $outer$u0020;
  
  public final Ljava/lang/Object; apply() {
    return this.(Lscala/collection/immutable/Stream$$anonfun$take$2;::apply()Lscala/collection/immutable/Stream;)();
  }
  
  private I; n$1;
  
  public this(Lscala/collection/immutable/Stream; $outer, I; n$1) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/immutable/Stream$$anonfun$take$2;)$outer$u0020 = $outer;
      }
    this.(Lscala/collection/immutable/Stream$$anonfun$take$2;)n$1 = n$1;
    (Lscala/runtime/AbstractFunction0;::super()V;)();
  }
}
