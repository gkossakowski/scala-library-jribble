public interface Lscala/collection/TraversableViewLike; extends Lscala/collection/Traversable;, Lscala/collection/TraversableLike;, Lscala/collection/ViewMkString;, Lscala/collection/GenTraversableViewLike;, Lscala/ScalaObject; {
  
  public Lscala/collection/mutable/Builder; newBuilder();
  
  public Ljava/lang/Object; underlying();
  
  public Ljava/lang/String; viewIdentifier();
  
  public Ljava/lang/String; viewIdString();
  
  public Ljava/lang/String; stringPrefix();
  
  public Ljava/lang/Object; force(Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/GenTraversableOnce; xs, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Lscala/collection/TraversableViewLike$Transformed; newForced(Lscala/Function0; xs);
  
  public Lscala/collection/TraversableViewLike$Transformed; newAppended(Lscala/collection/GenTraversable; that);
  
  public Lscala/collection/TraversableViewLike$Transformed; newMapped(Lscala/Function1; f);
  
  public Lscala/collection/TraversableViewLike$Transformed; newFlatMapped(Lscala/Function1; f);
  
  public Lscala/collection/TraversableViewLike$Transformed; newFiltered(Lscala/Function1; p);
  
  public Lscala/collection/TraversableViewLike$Transformed; newSliced(Lscala/collection/generic/SliceInterval; _endpoints);
  
  public Lscala/collection/TraversableViewLike$Transformed; newDroppedWhile(Lscala/Function1; p);
  
  public Lscala/collection/TraversableViewLike$Transformed; newTakenWhile(Lscala/Function1; p);
  
  public Lscala/collection/TraversableViewLike$Transformed; newTaken(I; n);
  
  public Lscala/collection/TraversableViewLike$Transformed; newDropped(I; n);
  
  public Lscala/collection/TraversableView; filter(Lscala/Function1; p);
  
  public Lscala/collection/TraversableView; withFilter(Lscala/Function1; p);
  
  public Lscala/Tuple2; partition(Lscala/Function1; p);
  
  public Lscala/collection/TraversableView; init();
  
  public Lscala/collection/TraversableView; drop(I; n);
  
  public Lscala/collection/TraversableView; take(I; n);
  
  public Lscala/collection/TraversableView; slice(I; from, I; until);
  
  public Lscala/collection/TraversableView; dropWhile(Lscala/Function1; p);
  
  public Lscala/collection/TraversableView; takeWhile(Lscala/Function1; p);
  
  public Lscala/Tuple2; span(Lscala/Function1; p);
  
  public Lscala/Tuple2; splitAt(I; n);
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f);
  
  public Ljava/lang/String; toString();
}
