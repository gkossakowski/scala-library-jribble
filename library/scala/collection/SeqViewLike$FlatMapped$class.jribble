public abstract class Lscala/collection/SeqViewLike$FlatMapped$class; {
  
  public static I;[ index(Lscala/collection/SeqViewLike$FlatMapped; $this) {
    I;[ index$1 = new I;[($this.(Lscala/collection/SeqViewLike$FlatMapped;::scala$collection$SeqViewLike$FlatMapped$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::length()I;)() + 1)];
    index$1[0] = 0;
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)(0).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range$ByOne;)($this.(Lscala/collection/SeqViewLike$FlatMapped;::scala$collection$SeqViewLike$FlatMapped$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::length()I;)()).(Lscala/collection/immutable/Range$ByOne;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/SeqViewLike$FlatMapped$$anonfun$index$1;::this(Lscala/collection/SeqViewLike$FlatMapped;I;[)V;)($this, index$1)));
    return index$1;
  }
  
  public static I; findRow(Lscala/collection/SeqViewLike$FlatMapped; $this, I; idx, I; lo, I; hi) {
    I; mid = ((lo + hi) / 2);
    I; $2$;
    if ((idx < $this.(Lscala/collection/SeqViewLike$FlatMapped;::index()I;[)()[mid]))
      {
        $2$ = $this.(Lscala/collection/SeqViewLike$FlatMapped;::findRow(I;I;I;)I;)(idx, lo, (mid - 1));
      }
    else
      {
        I; $3$;
        if ((idx >= $this.(Lscala/collection/SeqViewLike$FlatMapped;::index()I;[)()[(mid + 1)]))
          {
            $3$ = $this.(Lscala/collection/SeqViewLike$FlatMapped;::findRow(I;I;I;)I;)(idx, (mid + 1), hi);
          }
        else
          {
            $3$ = mid;
          }
        $2$ = $3$;
      }
    return $2$;
  }
  
  public static I; length(Lscala/collection/SeqViewLike$FlatMapped; $this) {
    return $this.(Lscala/collection/SeqViewLike$FlatMapped;::index()I;[)()[$this.(Lscala/collection/SeqViewLike$FlatMapped;::scala$collection$SeqViewLike$FlatMapped$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::length()I;)()];
  }
  
  public static Ljava/lang/Object; apply(Lscala/collection/SeqViewLike$FlatMapped; $this, I; idx) {
    I; row = $this.(Lscala/collection/SeqViewLike$FlatMapped;::findRow(I;I;I;)I;)(idx, 0, ($this.(Lscala/collection/SeqViewLike$FlatMapped;::scala$collection$SeqViewLike$FlatMapped$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::length()I;)() - 1));
    return $this.(Lscala/collection/TraversableViewLike$FlatMapped;::mapping()Lscala/Function1;)().(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)($this.(Lscala/collection/SeqViewLike$FlatMapped;::scala$collection$SeqViewLike$FlatMapped$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)(row)).<cast>(Lscala/collection/TraversableOnce;).(Lscala/collection/TraversableOnce;::toSeq()Lscala/collection/Seq;)().(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)((idx - $this.(Lscala/collection/SeqViewLike$FlatMapped;::index()I;[)()[row]));
  }
  
  public static V; $init$(Lscala/collection/SeqViewLike$FlatMapped; $this) {
    
  }
}
