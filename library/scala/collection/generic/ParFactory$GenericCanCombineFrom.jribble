public class Lscala/collection/generic/ParFactory$GenericCanCombineFrom; extends Lscala/collection/generic/GenTraversableFactory$GenericCanBuildFrom; implements Lscala/collection/generic/CanCombineFrom;, Lscala/ScalaObject; {
  
  public Lscala/collection/parallel/Combiner; apply(Lscala/collection/parallel/ParIterable; from) {
    return from.(Lscala/collection/generic/GenericParTemplate;::genericCombiner()Lscala/collection/parallel/Combiner;)();
  }
  
  public Lscala/collection/parallel/Combiner; apply() {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;::scala$collection$generic$ParFactory$GenericCanCombineFrom$$$outer()Lscala/collection/generic/ParFactory;)().(Lscala/collection/generic/GenericParCompanion;::newBuilder()Lscala/collection/parallel/Combiner;)();
  }
  
  protected Lscala/collection/generic/ParFactory; $outer$u0020;
  
  public Lscala/collection/generic/ParFactory; scala$collection$generic$ParFactory$GenericCanCombineFrom$$$outer() {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;)$outer$u0020;
  }
  
  public Lscala/collection/mutable/Builder; apply() {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;::apply()Lscala/collection/parallel/Combiner;)();
  }
  
  public Lscala/collection/mutable/Builder; apply(Ljava/lang/Object; from) {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParIterable;));
  }
  
  public Lscala/collection/parallel/Combiner; apply(Ljava/lang/Object; from) {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParIterable;));
  }
  
  public Lscala/collection/mutable/Builder; apply(Lscala/collection/GenTraversable; from) {
    return this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParIterable;));
  }
  
  public this(Lscala/collection/generic/ParFactory; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/generic/ParFactory$GenericCanCombineFrom;)$outer$u0020 = $outer;
      }
    (Lscala/collection/generic/GenTraversableFactory$GenericCanBuildFrom;::super(Lscala/collection/generic/GenTraversableFactory;)V;)($outer);
  }
}
