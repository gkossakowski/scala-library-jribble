public abstract class Lscala/collection/generic/AtomicIndexFlag$class; {
  
  public static I; indexFlag(Lscala/collection/generic/AtomicIndexFlag; $this) {
    return $this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::get()I;)();
  }
  
  public static V; setIndexFlag(Lscala/collection/generic/AtomicIndexFlag; $this, I; f) {
    $this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::set(I;)V;)(f);
  }
  
  public static V; setIndexFlagIfGreater(Lscala/collection/generic/AtomicIndexFlag; $this, I; f) {
    Z; loop = true;
    doWhile$1: while(true) {
      {
        I; old = $this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::get()I;)();
        if ((f <= old))
          {
            loop = false;
          }
        else
          {
            if ($this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::compareAndSet(I;I;)Z;)(old, f))
              {
                loop = false;
              }
            else
              {
                
              }
          }
      }
      if (loop)
        {
          continue doWhile$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; setIndexFlagIfLesser(Lscala/collection/generic/AtomicIndexFlag; $this, I; f) {
    Z; loop = true;
    doWhile$2: while(true) {
      {
        I; old = $this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::get()I;)();
        if ((f >= old))
          {
            loop = false;
          }
        else
          {
            if ($this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$$intflag()Ljava/util/concurrent/atomic/AtomicInteger;)().(Ljava/util/concurrent/atomic/AtomicInteger;::compareAndSet(I;I;)Z;)(old, f))
              {
                loop = false;
              }
            else
              {
                
              }
          }
      }
      if (loop)
        {
          continue doWhile$2;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; $init$(Lscala/collection/generic/AtomicIndexFlag; $this) {
    $this.(Lscala/collection/generic/AtomicIndexFlag;::scala$collection$generic$AtomicIndexFlag$_setter_$scala$collection$generic$AtomicIndexFlag$$intflag_$eq(Ljava/util/concurrent/atomic/AtomicInteger;)V;)((new (Ljava/util/concurrent/atomic/AtomicInteger;::this(I;)V;)(-1)));
  }
}
