public class Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom; extends Lscala/collection/generic/TraversableFactory$GenericCanBuildFrom; implements Lscala/collection/generic/CanCombineFrom;, Lscala/ScalaObject; {
  
  public Lscala/collection/parallel/Combiner; apply(Lscala/collection/parallel/ParallelIterable; from) {
    return from.(Lscala/collection/generic/GenericParallelTemplate;::genericCombiner()Lscala/collection/parallel/Combiner;)();
  }
  
  public Lscala/collection/parallel/Combiner; apply() {
    return this.(Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom;::scala$collection$generic$ParallelFactory$GenericCanCombineFrom$$$outer()Lscala/collection/generic/ParallelFactory;)().(Lscala/collection/generic/GenericParallelCompanion;::newBuilder()Lscala/collection/parallel/Combiner;)();
  }
  
  protected Lscala/collection/generic/ParallelFactory; $outer$u0020;
  
  public Lscala/collection/generic/ParallelFactory; scala$collection$generic$ParallelFactory$GenericCanCombineFrom$$$outer() {
    return this.(Lscala/collection/generic/ParallelFactory;)$outer$u0020;
  }
  
  public Lscala/collection/mutable/Builder; apply() {
    return this.(Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom;::apply()Lscala/collection/parallel/Combiner;)();
  }
  
  public Lscala/collection/mutable/Builder; apply(Ljava/lang/Object; from) {
    return this.(Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParallelIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParallelIterable;));
  }
  
  public Lscala/collection/parallel/Combiner; apply(Ljava/lang/Object; from) {
    return this.(Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParallelIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParallelIterable;));
  }
  
  public Lscala/collection/mutable/Builder; apply(Lscala/collection/Traversable; from) {
    return this.(Lscala/collection/generic/ParallelFactory$GenericCanCombineFrom;::apply(Lscala/collection/parallel/ParallelIterable;)Lscala/collection/parallel/Combiner;)(from.<cast>(Lscala/collection/parallel/ParallelIterable;));
  }
  
  public this(Lscala/collection/generic/ParallelFactory; $outer) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/generic/ParallelFactory;)$outer$u0020 = $outer;
      }
    (Lscala/collection/generic/TraversableFactory$GenericCanBuildFrom;::super(Lscala/collection/generic/TraversableFactory;)V;)($outer);
  }
}
