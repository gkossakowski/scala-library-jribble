public interface Lscala/collection/generic/TraversableFactory; extends Lscala/collection/generic/GenericSeqCompanion;, Lscala/ScalaObject; {
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$concat(Lscala/collection/Seq; xss);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$fill(I; n, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$fill(I; n1, I; n2, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$fill(I; n1, I; n2, I; n3, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$fill(I; n1, I; n2, I; n3, I; n4, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$fill(I; n1, I; n2, I; n3, I; n4, I; n5, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$tabulate(I; n, Lscala/Function1; f);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$tabulate(I; n1, I; n2, Lscala/Function2; f);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$tabulate(I; n1, I; n2, I; n3, Lscala/Function3; f);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$tabulate(I; n1, I; n2, I; n3, I; n4, Lscala/Function4; f);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$tabulate(I; n1, I; n2, I; n3, I; n4, I; n5, Lscala/Function5; f);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$range(Ljava/lang/Object; start, Ljava/lang/Object; end, Lscala/math/Integral; evidence$1);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$range(Ljava/lang/Object; start, Ljava/lang/Object; end, Ljava/lang/Object; step, Lscala/math/Integral; evidence$2);
  
  public Lscala/collection/Traversable; scala$collection$generic$TraversableFactory$$super$iterate(Ljava/lang/Object; start, I; len, Lscala/Function1; f);
  
  public Lscala/collection/Traversable; concat(Lscala/collection/Seq; xss);
  
  public Lscala/collection/Traversable; fill(I; n, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; fill(I; n1, I; n2, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; fill(I; n1, I; n2, I; n3, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; fill(I; n1, I; n2, I; n3, I; n4, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; fill(I; n1, I; n2, I; n3, I; n4, I; n5, Lscala/Function0; elem);
  
  public Lscala/collection/Traversable; tabulate(I; n, Lscala/Function1; f);
  
  public Lscala/collection/Traversable; tabulate(I; n1, I; n2, Lscala/Function2; f);
  
  public Lscala/collection/Traversable; tabulate(I; n1, I; n2, I; n3, Lscala/Function3; f);
  
  public Lscala/collection/Traversable; tabulate(I; n1, I; n2, I; n3, I; n4, Lscala/Function4; f);
  
  public Lscala/collection/Traversable; tabulate(I; n1, I; n2, I; n3, I; n4, I; n5, Lscala/Function5; f);
  
  public Lscala/collection/Traversable; range(Ljava/lang/Object; start, Ljava/lang/Object; end, Lscala/math/Integral; evidence$1);
  
  public Lscala/collection/Traversable; range(Ljava/lang/Object; start, Ljava/lang/Object; end, Ljava/lang/Object; step, Lscala/math/Integral; evidence$2);
  
  public Lscala/collection/Traversable; iterate(Ljava/lang/Object; start, I; len, Lscala/Function1; f);
}
