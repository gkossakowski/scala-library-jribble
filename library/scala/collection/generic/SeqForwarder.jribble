public interface Lscala/collection/generic/SeqForwarder; extends Lscala/collection/Seq;, Lscala/collection/generic/IterableForwarder;, Lscala/ScalaObject; {
  
  public Lscala/collection/Seq; underlying();
  
  public I; length();
  
  public Ljava/lang/Object; apply(I; idx);
  
  public I; lengthCompare(I; len);
  
  public Z; isDefinedAt(I; x);
  
  public I; segmentLength(Lscala/Function1; p, I; from);
  
  public I; prefixLength(Lscala/Function1; p);
  
  public I; indexWhere(Lscala/Function1; p);
  
  public I; indexWhere(Lscala/Function1; p, I; from);
  
  public I; findIndexOf(Lscala/Function1; p);
  
  public I; indexOf(Ljava/lang/Object; elem);
  
  public I; indexOf(Ljava/lang/Object; elem, I; from);
  
  public I; lastIndexOf(Ljava/lang/Object; elem);
  
  public I; lastIndexOf(Ljava/lang/Object; elem, I; end);
  
  public I; lastIndexWhere(Lscala/Function1; p);
  
  public I; lastIndexWhere(Lscala/Function1; p, I; end);
  
  public Lscala/collection/Iterator; reverseIterator();
  
  public Z; startsWith(Lscala/collection/Seq; that, I; offset);
  
  public Z; startsWith(Lscala/collection/Seq; that);
  
  public Z; endsWith(Lscala/collection/Seq; that);
  
  public I; indexOfSlice(Lscala/collection/Seq; that);
  
  public I; indexOfSlice(Lscala/collection/Seq; that, I; from);
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that);
  
  public I; lastIndexOfSlice(Lscala/collection/Seq; that, I; end);
  
  public Z; containsSlice(Lscala/collection/Seq; that);
  
  public Z; contains(Ljava/lang/Object; elem);
  
  public Z; corresponds(Lscala/collection/Seq; that, Lscala/Function2; p);
  
  public Lscala/collection/immutable/Range; indices();
}
