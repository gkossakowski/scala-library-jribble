public interface Lscala/collection/IndexedSeqOptimized; extends Lscala/collection/IndexedSeqLike;, Lscala/ScalaObject; {
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2; op);
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$reduceRight(Lscala/Function2; op);
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$zip(Lscala/collection/GenIterable; that, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$head();
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$tail();
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$last();
  
  public Ljava/lang/Object; scala$collection$IndexedSeqOptimized$$super$init();
  
  public Z; scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable; that);
  
  public Z; scala$collection$IndexedSeqOptimized$$super$endsWith(Lscala/collection/GenSeq; that);
  
  public Z; isEmpty();
  
  public V; foreach(Lscala/Function1; f);
  
  public Z; forall(Lscala/Function1; p);
  
  public Z; exists(Lscala/Function1; p);
  
  public Lscala/Option; find(Lscala/Function1; p);
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op);
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op);
  
  public Ljava/lang/Object; zip(Lscala/collection/GenIterable; that, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; slice(I; from, I; until);
  
  public Ljava/lang/Object; head();
  
  public Ljava/lang/Object; tail();
  
  public Ljava/lang/Object; last();
  
  public Ljava/lang/Object; init();
  
  public Ljava/lang/Object; take(I; n);
  
  public Ljava/lang/Object; drop(I; n);
  
  public Ljava/lang/Object; takeRight(I; n);
  
  public Ljava/lang/Object; dropRight(I; n);
  
  public Lscala/Tuple2; splitAt(I; n);
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p);
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p);
  
  public Lscala/Tuple2; span(Lscala/Function1; p);
  
  public Z; sameElements(Lscala/collection/GenIterable; that);
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len);
  
  public I; lengthCompare(I; len);
  
  public I; segmentLength(Lscala/Function1; p, I; from);
  
  public I; indexWhere(Lscala/Function1; p, I; from);
  
  public I; lastIndexWhere(Lscala/Function1; p, I; end);
  
  public Ljava/lang/Object; reverse();
  
  public Lscala/collection/Iterator; reverseIterator();
  
  public Z; startsWith(Lscala/collection/GenSeq; that, I; offset);
  
  public Z; endsWith(Lscala/collection/GenSeq; that);
}
