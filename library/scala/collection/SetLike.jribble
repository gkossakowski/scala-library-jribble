public interface Lscala/collection/SetLike; extends Lscala/collection/IterableLike;, Lscala/collection/generic/Addable;, Lscala/collection/generic/Subtractable;, Lscala/ScalaObject; {
  
  public Lscala/collection/Set; empty();
  
  public Lscala/collection/mutable/Builder; newBuilder();
  
  public Z; contains(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; $plus(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; $minus(Ljava/lang/Object; elem);
  
  public Z; isEmpty();
  
  public Z; apply(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; intersect(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $amp(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $times$times(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; union(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $bar(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; diff(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $amp$tilde(Lscala/collection/Set; that);
  
  public Z; subsetOf(Lscala/collection/Set; that);
  
  public Ljava/lang/String; stringPrefix();
  
  public Ljava/lang/String; toString();
  
  public I; hashCode();
  
  public Z; equals(Ljava/lang/Object; that);
}
