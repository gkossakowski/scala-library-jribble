public final class Lscala/collection/mutable/OpenHashMap$$anonfun$clone$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final V; apply(Lscala/collection/mutable/OpenHashMap$OpenEntry; entry) {
    this.(Lscala/collection/mutable/OpenHashMap;)it$1.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$put(Ljava/lang/Object;I;Ljava/lang/Object;)Lscala/Option;)(entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::key()Ljava/lang/Object;)(), entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::hash()I;)(), entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)().(Lscala/Option;::get()Ljava/lang/Object;)());
  }
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    this.(Lscala/collection/mutable/OpenHashMap$$anonfun$clone$1;::apply(Lscala/collection/mutable/OpenHashMap$OpenEntry;)V;)(v1.<cast>(Lscala/collection/mutable/OpenHashMap$OpenEntry;));
    return Lscala/runtime/BoxedUnit;.MODULE$.(Lscala/runtime/BoxedUnit;)UNIT;
  }
  
  private Lscala/collection/mutable/OpenHashMap; it$1;
  
  public this(Lscala/collection/mutable/OpenHashMap; $outer, Lscala/collection/mutable/OpenHashMap; it$1) {
    this.(Lscala/collection/mutable/OpenHashMap;)it$1 = it$1;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
