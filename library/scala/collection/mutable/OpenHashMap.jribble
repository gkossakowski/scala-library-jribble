public class Lscala/collection/mutable/OpenHashMap; extends Ljava/lang/Object; implements Lscala/collection/mutable/Map;, Lscala/collection/mutable/MapLike;, Lscala/ScalaObject; {
  public final static I; nextPowerOfTwo(I; x_0) { return Lscala/collection/mutable/OpenHashMap$;.MODULE$.(Lscala/collection/mutable/OpenHashMap$;::nextPowerOfTwo(I;)I;)(x_0); }
  
  
  public Lscala/collection/mutable/Map; seq() {
    return Lscala/collection/mutable/Map$class;.(Lscala/collection/mutable/Map$class;::seq(Lscala/collection/mutable/Map;)Lscala/collection/mutable/Map;)(this);
  }
  
  public Lscala/collection/mutable/Map; withDefault(Lscala/Function1; d) {
    return Lscala/collection/mutable/Map$class;.(Lscala/collection/mutable/Map$class;::withDefault(Lscala/collection/mutable/Map;Lscala/Function1;)Lscala/collection/mutable/Map;)(this, d);
  }
  
  public Lscala/collection/mutable/Map; withDefaultValue(Ljava/lang/Object; d) {
    return Lscala/collection/mutable/Map$class;.(Lscala/collection/mutable/Map$class;::withDefaultValue(Lscala/collection/mutable/Map;Ljava/lang/Object;)Lscala/collection/mutable/Map;)(this, d);
  }
  
  public Lscala/collection/mutable/Builder; newBuilder() {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::newBuilder(Lscala/collection/mutable/MapLike;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/collection/parallel/Combiner; parCombiner() {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::parCombiner(Lscala/collection/mutable/MapLike;)Lscala/collection/parallel/Combiner;)(this);
  }
  
  public Lscala/collection/mutable/Map; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::updated(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/mutable/Map;)(this, key, value);
  }
  
  public Lscala/collection/mutable/Map; $plus(Lscala/Tuple2; kv) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$plus(Lscala/collection/mutable/MapLike;Lscala/Tuple2;)Lscala/collection/mutable/Map;)(this, kv);
  }
  
  public Lscala/collection/mutable/Map; $plus(Lscala/Tuple2; elem1, Lscala/Tuple2; elem2, Lscala/collection/Seq; elems) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$plus(Lscala/collection/mutable/MapLike;Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/mutable/Map;)(this, elem1, elem2, elems);
  }
  
  public Lscala/collection/mutable/Map; $plus$plus(Lscala/collection/GenTraversableOnce; xs) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$plus$plus(Lscala/collection/mutable/MapLike;Lscala/collection/GenTraversableOnce;)Lscala/collection/mutable/Map;)(this, xs);
  }
  
  public Lscala/collection/mutable/Map; $plus$plus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$plus$plus(Lscala/collection/mutable/MapLike;Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Map;)(this, xs);
  }
  
  public Lscala/collection/mutable/Map; $minus(Ljava/lang/Object; key) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$minus(Lscala/collection/mutable/MapLike;Ljava/lang/Object;)Lscala/collection/mutable/Map;)(this, key);
  }
  
  public Lscala/Option; removeKey(Ljava/lang/Object; key) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::removeKey(Lscala/collection/mutable/MapLike;Ljava/lang/Object;)Lscala/Option;)(this, key);
  }
  
  public V; clear() {
    Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::clear(Lscala/collection/mutable/MapLike;)V;)(this);
  }
  
  public Ljava/lang/Object; getOrElseUpdate(Ljava/lang/Object; key, Lscala/Function0; op) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::getOrElseUpdate(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;)(this, key, op);
  }
  
  public Lscala/collection/mutable/Map; result() {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::result(Lscala/collection/mutable/MapLike;)Lscala/collection/mutable/Map;)(this);
  }
  
  public Lscala/collection/mutable/Map; $minus(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$minus(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/mutable/Map;)(this, elem1, elem2, elems);
  }
  
  public Lscala/collection/mutable/Map; $minus$minus(Lscala/collection/GenTraversableOnce; xs) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$minus$minus(Lscala/collection/mutable/MapLike;Lscala/collection/GenTraversableOnce;)Lscala/collection/mutable/Map;)(this, xs);
  }
  
  public Lscala/collection/mutable/Map; $minus$minus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$minus$minus(Lscala/collection/mutable/MapLike;Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Map;)(this, xs);
  }
  
  public final Ljava/lang/Object; scala$collection$mutable$Cloneable$$super$clone() {
    return super.(Ljava/lang/Object;::clone()Ljava/lang/Object;)();
  }
  
  public Lscala/collection/generic/Shrinkable; $minus$eq(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems) {
    return Lscala/collection/generic/Shrinkable$class;.(Lscala/collection/generic/Shrinkable$class;::$minus$eq(Lscala/collection/generic/Shrinkable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/generic/Shrinkable;)(this, elem1, elem2, elems);
  }
  
  public Lscala/collection/generic/Shrinkable; $minus$minus$eq(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/generic/Shrinkable$class;.(Lscala/collection/generic/Shrinkable$class;::$minus$minus$eq(Lscala/collection/generic/Shrinkable;Lscala/collection/TraversableOnce;)Lscala/collection/generic/Shrinkable;)(this, xs);
  }
  
  public V; sizeHint(I; size) {
    Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::sizeHint(Lscala/collection/mutable/Builder;I;)V;)(this, size);
  }
  
  public V; sizeHint(Lscala/collection/TraversableLike; coll, I; delta) {
    Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I;)V;)(this, coll, delta);
  }
  
  public V; sizeHintBounded(I; size, Lscala/collection/TraversableLike; boundingColl) {
    Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::sizeHintBounded(Lscala/collection/mutable/Builder;I;Lscala/collection/TraversableLike;)V;)(this, size, boundingColl);
  }
  
  public Lscala/collection/mutable/Builder; mapResult(Lscala/Function1; f) {
    return Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)Lscala/collection/mutable/Builder;)(this, f);
  }
  
  public I; sizeHint$default$2() {
    return Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::sizeHint$default$2(Lscala/collection/mutable/Builder;)I;)(this);
  }
  
  public Lscala/collection/generic/Growable; $plus$eq(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems) {
    return Lscala/collection/generic/Growable$class;.(Lscala/collection/generic/Growable$class;::$plus$eq(Lscala/collection/generic/Growable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/generic/Growable;)(this, elem1, elem2, elems);
  }
  
  public Lscala/collection/generic/Growable; $plus$plus$eq(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/generic/Growable$class;.(Lscala/collection/generic/Growable$class;::$plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(this, xs);
  }
  
  public Z; isEmpty() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::isEmpty(Lscala/collection/MapLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; getOrElse(Ljava/lang/Object; key, Lscala/Function0; `default`) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;)(this, key, `default`);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::apply(Lscala/collection/MapLike;Ljava/lang/Object;)Ljava/lang/Object;)(this, key);
  }
  
  public Z; contains(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::contains(Lscala/collection/MapLike;Ljava/lang/Object;)Z;)(this, key);
  }
  
  public Z; isDefinedAt(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::isDefinedAt(Lscala/collection/MapLike;Ljava/lang/Object;)Z;)(this, key);
  }
  
  public Lscala/collection/Set; keySet() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::keySet(Lscala/collection/MapLike;)Lscala/collection/Set;)(this);
  }
  
  public Lscala/collection/Iterator; keysIterator() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::keysIterator(Lscala/collection/MapLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterable; keys() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::keys(Lscala/collection/MapLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; values() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::values(Lscala/collection/MapLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterator; valuesIterator() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::valuesIterator(Lscala/collection/MapLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; `default`(Ljava/lang/Object; key) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::`default`(Lscala/collection/MapLike;Ljava/lang/Object;)Ljava/lang/Object;)(this, key);
  }
  
  public Lscala/collection/Map; filterKeys(Lscala/Function1; p) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::filterKeys(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, p);
  }
  
  public Lscala/collection/Map; mapValues(Lscala/Function1; f) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::mapValues(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, f);
  }
  
  public Lscala/collection/Map; mapElements(Lscala/Function1; f) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::mapElements(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, f);
  }
  
  public Lscala/collection/Map; $plus$plus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::$plus$plus(Lscala/collection/MapLike;Lscala/collection/TraversableOnce;)Lscala/collection/Map;)(this, xs);
  }
  
  public Lscala/collection/Map; filterNot(Lscala/Function1; p) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::filterNot(Lscala/collection/MapLike;Lscala/Function1;)Lscala/collection/Map;)(this, p);
  }
  
  public Lscala/collection/Seq; toSeq() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::toSeq(Lscala/collection/MapLike;)Lscala/collection/Seq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::toBuffer(Lscala/collection/MapLike;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, start, sep, end);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::toString(Lscala/collection/MapLike;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/generic/Subtractable; $minus$minus(Lscala/collection/TraversableOnce; xs) {
    return Lscala/collection/generic/Subtractable$class;.(Lscala/collection/generic/Subtractable$class;::$minus$minus(Lscala/collection/generic/Subtractable;Lscala/collection/TraversableOnce;)Lscala/collection/generic/Subtractable;)(this, xs);
  }
  
  public Lscala/PartialFunction; orElse(Lscala/PartialFunction; that) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::orElse(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;)(this, that);
  }
  
  public Lscala/PartialFunction; andThen(Lscala/Function1; k) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::andThen(Lscala/PartialFunction;Lscala/Function1;)Lscala/PartialFunction;)(this, k);
  }
  
  public Lscala/Function1; lift() {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::lift(Lscala/PartialFunction;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; compose(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public I; hashCode() {
    return Lscala/collection/GenMapLike$class;.(Lscala/collection/GenMapLike$class;::hashCode(Lscala/collection/GenMapLike;)I;)(this);
  }
  
  public Z; equals(Ljava/lang/Object; that) {
    return Lscala/collection/GenMapLike$class;.(Lscala/collection/GenMapLike$class;::equals(Lscala/collection/GenMapLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/mutable/Iterable$class;.(Lscala/collection/mutable/Iterable$class;::companion(Lscala/collection/mutable/Iterable;)Lscala/collection/generic/GenericCompanion;)(this);
  }
  
  public Lscala/collection/Iterable; thisCollection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::thisCollection(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Iterable; toCollection(Ljava/lang/Object; repr) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toCollection(Lscala/collection/IterableLike;Ljava/lang/Object;)Lscala/collection/Iterable;)(this, repr);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::forall(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::exists(Lscala/collection/IterableLike;Lscala/Function1;)Z;)(this, p);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::find(Lscala/collection/IterableLike;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::foldRight(Lscala/collection/IterableLike;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::reduceRight(Lscala/collection/IterableLike;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toIterable(Lscala/collection/IterableLike;)Lscala/collection/Iterable;)(this);
  }
  
  public Ljava/lang/Object; head() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::head(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; slice(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::slice(Lscala/collection/IterableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Ljava/lang/Object; take(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::take(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; drop(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::drop(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; takeWhile(Lscala/Function1; p) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeWhile(Lscala/collection/IterableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/collection/Iterator; grouped(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::grouped(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;)Lscala/collection/Iterator;)(this, size);
  }
  
  public Lscala/collection/Iterator; sliding(I; size, I; step) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sliding(Lscala/collection/IterableLike;I;I;)Lscala/collection/Iterator;)(this, size, step);
  }
  
  public Ljava/lang/Object; takeRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::takeRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public Ljava/lang/Object; dropRight(I; n) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::dropRight(Lscala/collection/IterableLike;I;)Ljava/lang/Object;)(this, n);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/GenIterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zip(Lscala/collection/Iterable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zip(Lscala/collection/IterableLike;Lscala/collection/Iterable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/GenIterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/GenIterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipAll(Lscala/collection/Iterable; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipAll(Lscala/collection/IterableLike;Lscala/collection/Iterable;Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, thisElem, thatElem, bf);
  }
  
  public Ljava/lang/Object; zipWithIndex(Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::zipWithIndex(Lscala/collection/IterableLike;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, bf);
  }
  
  public Z; sameElements(Lscala/collection/GenIterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)Z;)(this, that);
  }
  
  public Z; sameElements(Lscala/collection/Iterable; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::sameElements(Lscala/collection/IterableLike;Lscala/collection/Iterable;)Z;)(this, that);
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::toStream(Lscala/collection/IterableLike;)Lscala/collection/immutable/Stream;)(this);
  }
  
  public Z; canEqual(Ljava/lang/Object; that) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)Z;)(this, that);
  }
  
  public Lscala/collection/IterableView; view() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public Lscala/collection/IterableView; view(I; from, I; until) {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::view(Lscala/collection/IterableLike;I;I;)Lscala/collection/IterableView;)(this, from, until);
  }
  
  public Lscala/collection/Iterator; elements() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::elements(Lscala/collection/IterableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Ljava/lang/Object; first() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::first(Lscala/collection/IterableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; firstOption() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::firstOption(Lscala/collection/IterableLike;)Lscala/Option;)(this);
  }
  
  public Lscala/collection/IterableView; projection() {
    return Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::projection(Lscala/collection/IterableLike;)Lscala/collection/IterableView;)(this);
  }
  
  public final Lscala/collection/Traversable; scala$collection$Traversable$$super$flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable).<cast>(Lscala/collection/Traversable;);
  }
  
  public final Lscala/collection/Traversable; scala$collection$Traversable$$super$transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable).<cast>(Lscala/collection/Traversable;);
  }
  
  public Lscala/collection/Traversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::flatten(Lscala/collection/Traversable;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/Traversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::transpose(Lscala/collection/Traversable;Lscala/Function1;)Lscala/collection/Traversable;)(this, asTraversable);
  }
  
  public Lscala/collection/mutable/Builder; genericBuilder() {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)Lscala/collection/mutable/Builder;)(this);
  }
  
  public Lscala/Tuple2; unzip(Lscala/Function1; asPair) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple2;)(this, asPair);
  }
  
  public Lscala/Tuple3; unzip3(Lscala/Function1; asTriple) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::unzip3(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/Tuple3;)(this, asTriple);
  }
  
  public Lscala/collection/GenTraversable; flatten(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::flatten(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable);
  }
  
  public Lscala/collection/GenTraversable; transpose(Lscala/Function1; asTraversable) {
    return Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::transpose(Lscala/collection/generic/GenericTraversableTemplate;Lscala/Function1;)Lscala/collection/GenTraversable;)(this, asTraversable);
  }
  
  public Ljava/lang/Object; repr() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::repr(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Z; hasDefiniteSize() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::hasDefiniteSize(Lscala/collection/TraversableLike;)Z;)(this);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/GenTraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/Traversable; that, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$plus$plus$colon(Lscala/collection/TraversableLike;Lscala/collection/Traversable;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, that, bf);
  }
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, f, bf);
  }
  
  public Ljava/lang/Object; filter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::filter(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::collect(Lscala/collection/TraversableLike;Lscala/PartialFunction;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, pf, bf);
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::partition(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/collection/immutable/Map; groupBy(Lscala/Function1; f) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::groupBy(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/immutable/Map;)(this, f);
  }
  
  public Ljava/lang/Object; scan(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; cbf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scan(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, cbf);
  }
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanLeft(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::scanRight(Lscala/collection/TraversableLike;Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(this, z, op, bf);
  }
  
  public Lscala/Option; headOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::headOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; tail() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tail(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; last() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::last(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Lscala/Option; lastOption() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::lastOption(Lscala/collection/TraversableLike;)Lscala/Option;)(this);
  }
  
  public Ljava/lang/Object; init() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::init(Lscala/collection/TraversableLike;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; sliceWithKnownDelta(I; from, I; until, I; delta) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownDelta(Lscala/collection/TraversableLike;I;I;I;)Ljava/lang/Object;)(this, from, until, delta);
  }
  
  public Ljava/lang/Object; sliceWithKnownBound(I; from, I; until) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::sliceWithKnownBound(Lscala/collection/TraversableLike;I;I;)Ljava/lang/Object;)(this, from, until);
  }
  
  public Ljava/lang/Object; dropWhile(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::dropWhile(Lscala/collection/TraversableLike;Lscala/Function1;)Ljava/lang/Object;)(this, p);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::span(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/Tuple2; splitAt(I; n) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::splitAt(Lscala/collection/TraversableLike;I;)Lscala/Tuple2;)(this, n);
  }
  
  public Lscala/collection/Iterator; tails() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::tails(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; inits() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::inits(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toTraversable(Lscala/collection/TraversableLike;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::toIterator(Lscala/collection/TraversableLike;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p) {
    return Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::withFilter(Lscala/collection/TraversableLike;Lscala/Function1;)Lscala/collection/generic/FilterMonadic;)(this, p);
  }
  
  public final Z; isTraversableAgain() {
    return Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::isTraversableAgain(Lscala/collection/GenTraversableLike;)Z;)(this);
  }
  
  public Lscala/collection/Parallel; par() {
    return Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::par(Lscala/collection/Parallelizable;)Lscala/collection/Parallel;)(this);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::count(Lscala/collection/TraversableOnce;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/Option; collectFirst(Lscala/PartialFunction; pf) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::collectFirst(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;)(this, pf);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; reduce(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduce(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; fold(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::fold(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; aggregate(Ljava/lang/Object; z, Lscala/Function2; seqop, Lscala/Function2; combop) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::aggregate(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;)(this, z, seqop, combop);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; maxBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::maxBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public Ljava/lang/Object; minBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::minBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/List; toList() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toList(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;)(this, sep);
  }
  
  public Ljava/lang/String; mkString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  public Ljava/lang/Object; $div$colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$div$colon$bslash(Lscala/collection/GenTraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Lscala/collection/mutable/OpenHashMap; empty() {
    return Lscala/collection/mutable/OpenHashMap$;.MODULE$.(Lscala/collection/mutable/OpenHashMap$;::empty()Lscala/collection/mutable/OpenHashMap;)();
  }
  
  private I; actualInitialSize;
  
  private I; scala$collection$mutable$OpenHashMap$$mask$u0020;
  
  public final I; scala$collection$mutable$OpenHashMap$$mask() {
    return this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$mask$u0020;
  }
  
  private V; scala$collection$mutable$OpenHashMap$$mask_$eq(I; x$1) {
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$mask$u0020 = x$1;
  }
  
  private Lscala/collection/mutable/OpenHashMap$OpenEntry;[ scala$collection$mutable$OpenHashMap$$table$u0020;
  
  public final Lscala/collection/mutable/OpenHashMap$OpenEntry;[ scala$collection$mutable$OpenHashMap$$table() {
    return this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$table$u0020;
  }
  
  private V; scala$collection$mutable$OpenHashMap$$table_$eq(Lscala/collection/mutable/OpenHashMap$OpenEntry;[ x$1) {
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$table$u0020 = x$1;
  }
  
  private I; _size$u0020;
  
  private I; _size() {
    return this.(Lscala/collection/mutable/OpenHashMap;)_size$u0020;
  }
  
  private V; _size_$eq(I; x$1) {
    this.(Lscala/collection/mutable/OpenHashMap;)_size$u0020 = x$1;
  }
  
  private I; scala$collection$mutable$OpenHashMap$$deleted$u0020;
  
  public final I; scala$collection$mutable$OpenHashMap$$deleted() {
    return this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$deleted$u0020;
  }
  
  public final V; scala$collection$mutable$OpenHashMap$$deleted_$eq(I; x$1) {
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$deleted$u0020 = x$1;
  }
  
  public I; scala$collection$mutable$OpenHashMap$$modCount;
  
  public I; size() {
    return this.(Lscala/collection/mutable/OpenHashMap;::_size()I;)();
  }
  
  public final V; scala$collection$mutable$OpenHashMap$$size_$eq(I; s) {
    this.(Lscala/collection/mutable/OpenHashMap;::_size_$eq(I;)V;)(s);
  }
  
  protected I; hashOf(Ljava/lang/Object; key) {
    I; h = Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::hash(Ljava/lang/Object;)I;)(key);
    h = (h ^ ((h >> 20) ^ (h >> 12)));
    return ((h ^ (h >> 7)) ^ (h >> 4));
  }
  
  private V; growTable() {
    I; oldSize = (this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)() + 1);
    I; newSize = (4 * oldSize);
    Lscala/collection/mutable/OpenHashMap$OpenEntry;[ oldTable = this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)();
    this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table_$eq(Lscala/collection/mutable/OpenHashMap$OpenEntry;[)V;)(new Lscala/collection/mutable/OpenHashMap$OpenEntry;[newSize]);
    this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask_$eq(I;)V;)((newSize - 1));
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(oldTable.<cast>(Ljava/lang/Object;[)).(Lscala/collection/IndexedSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$growTable$1;::this(Lscala/collection/mutable/OpenHashMap;)V;)(this)));
    this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$deleted_$eq(I;)V;)(0);
  }
  
  private I; findIndex(Ljava/lang/Object; key) {
    return this.(Lscala/collection/mutable/OpenHashMap;::findIndex(Ljava/lang/Object;I;)I;)(key, this.(Lscala/collection/mutable/OpenHashMap;::hashOf(Ljava/lang/Object;)I;)(key));
  }
  
  private I; findIndex(Ljava/lang/Object; key, I; hash) {
    I; j = hash;
    I; index = (hash & this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)());
    I; perturb = index;
    while$1: while(true) {
      if (((this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index] != null) && !(((this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index].(Lscala/collection/mutable/OpenHashMap$OpenEntry;::hash()I;)() == hash) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index].(Lscala/collection/mutable/OpenHashMap$OpenEntry;::key()Ljava/lang/Object;)(), key)))))
        {
          {
            j = (((5 * j) + 1) + perturb);
            perturb = (perturb >>> 5);
            index = (j & this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)());
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    return index;
  }
  
  public final V; scala$collection$mutable$OpenHashMap$$addEntry(Lscala/collection/mutable/OpenHashMap$OpenEntry; entry) {
    if ((entry != null))
      {
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[this.(Lscala/collection/mutable/OpenHashMap;::findIndex(Ljava/lang/Object;I;)I;)(entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::key()Ljava/lang/Object;)(), entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::hash()I;)())] = entry;
      }
    else
      {
        
      }
  }
  
  public V; update(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$put(Ljava/lang/Object;I;Ljava/lang/Object;)Lscala/Option;)(key, this.(Lscala/collection/mutable/OpenHashMap;::hashOf(Ljava/lang/Object;)I;)(key), value);
  }
  
  public Lscala/collection/mutable/OpenHashMap; $plus$eq(Lscala/Tuple2; kv) {
    this.(Lscala/collection/mutable/OpenHashMap;::put(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;)(kv.(Lscala/Tuple2;::_1()Ljava/lang/Object;)(), kv.(Lscala/Tuple2;::_2()Ljava/lang/Object;)());
    return this;
  }
  
  public Lscala/collection/mutable/OpenHashMap; $minus$eq(Ljava/lang/Object; key) {
    this.(Lscala/collection/mutable/OpenHashMap;::remove(Ljava/lang/Object;)Lscala/Option;)(key);
    return this;
  }
  
  public Lscala/Option; put(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$put(Ljava/lang/Object;I;Ljava/lang/Object;)Lscala/Option;)(key, this.(Lscala/collection/mutable/OpenHashMap;::hashOf(Ljava/lang/Object;)I;)(key), value);
  }
  
  public final Lscala/Option; scala$collection$mutable$OpenHashMap$$put(Ljava/lang/Object; key, I; hash, Ljava/lang/Object; value) {
    if (((2 * (this.(Lscala/collection/mutable/OpenHashMap;::size()I;)() + this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$deleted()I;)())) > this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)()))
      {
        this.(Lscala/collection/mutable/OpenHashMap;::growTable()V;)();
      }
    else
      {
        
      }
    I; index = this.(Lscala/collection/mutable/OpenHashMap;::findIndex(Ljava/lang/Object;I;)I;)(key, hash);
    Lscala/collection/mutable/OpenHashMap$OpenEntry; entry = this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index];
    Lscala/Option; $1$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(entry, null))
      {
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index] = (new (Lscala/collection/mutable/OpenHashMap$OpenEntry;::this(Ljava/lang/Object;I;Lscala/Option;)V;)(key, hash, (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(value))));
        this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount = (this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount + 1);
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$size_$eq(I;)V;)((this.(Lscala/collection/mutable/OpenHashMap;::size()I;)() + 1));
        $1$ = Lscala/None$;.MODULE$;
      }
    else
      {
        Lscala/Option; res = entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)();
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)(), Lscala/None$;.MODULE$))
          {
            this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$size_$eq(I;)V;)((this.(Lscala/collection/mutable/OpenHashMap;::size()I;)() + 1));
            this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount = (this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount + 1);
          }
        else
          {
            
          }
        entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value_$eq(Lscala/Option;)V;)((new (Lscala/Some;::this(Ljava/lang/Object;)V;)(value)));
        $1$ = res;
      }
    return $1$;
  }
  
  public Lscala/Option; remove(Ljava/lang/Object; key) {
    I; index = this.(Lscala/collection/mutable/OpenHashMap;::findIndex(Ljava/lang/Object;)I;)(key);
    Lscala/Option; $2$;
    if (((this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index] != null) && (this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index].(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)() != Lscala/None$;.MODULE$)))
      {
        Lscala/Option; res = this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index].(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)();
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index].(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value_$eq(Lscala/Option;)V;)(Lscala/None$;.MODULE$);
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$size_$eq(I;)V;)((this.(Lscala/collection/mutable/OpenHashMap;::size()I;)() - 1));
        this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$deleted_$eq(I;)V;)((this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$deleted()I;)() + 1));
        $2$ = res;
      }
    else
      {
        $2$ = Lscala/None$;.MODULE$;
      }
    return $2$;
  }
  
  public Lscala/Option; get(Ljava/lang/Object; key) {
    I; hash = this.(Lscala/collection/mutable/OpenHashMap;::hashOf(Ljava/lang/Object;)I;)(key);
    I; j = hash;
    I; index = (hash & this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)());
    I; perturb = index;
    Lscala/collection/mutable/OpenHashMap$OpenEntry; entry = this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index];
    while$2: while(true) {
      if ((entry != null))
        {
          {
            if (((entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::hash()I;)() == hash) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::key()Ljava/lang/Object;)(), key)))
              {
                return entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)();
              }
            else
              {
                
              }
            j = (((5 * j) + 1) + perturb);
            perturb = (perturb >>> 5);
            index = (j & this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$mask()I;)());
            entry = this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)()[index];
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    return Lscala/None$;.MODULE$;
  }
  
  public Lscala/collection/Iterator; iterator() {
    return (new (Lscala/collection/mutable/OpenHashMap$$anon$1;::this(Lscala/collection/mutable/OpenHashMap;)V;)(this));
  }
  
  public Lscala/collection/mutable/OpenHashMap; clone() {
    Lscala/collection/mutable/OpenHashMap; it$1 = (new (Lscala/collection/mutable/OpenHashMap;::this()V;)());
    this.(Lscala/collection/mutable/OpenHashMap;::foreachUndeletedEntry(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$clone$1;::this(Lscala/collection/mutable/OpenHashMap;Lscala/collection/mutable/OpenHashMap;)V;)(this, it$1)));
    return it$1;
  }
  
  public V; foreach(Lscala/Function1; f$2) {
    I; startModCount$1 = this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount;
    this.(Lscala/collection/mutable/OpenHashMap;::foreachUndeletedEntry(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;::this(Lscala/collection/mutable/OpenHashMap;Lscala/Function1;I;)V;)(this, f$2, startModCount$1)));
  }
  
  private V; foreachUndeletedEntry(Lscala/Function1; f$1) {
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)(this.(Lscala/collection/mutable/OpenHashMap;::scala$collection$mutable$OpenHashMap$$table()Lscala/collection/mutable/OpenHashMap$OpenEntry;[)().<cast>(Ljava/lang/Object;[)).(Lscala/collection/IndexedSeqOptimized;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$foreachUndeletedEntry$1;::this(Lscala/collection/mutable/OpenHashMap;Lscala/Function1;)V;)(this, f$1)));
  }
  
  public Lscala/collection/mutable/OpenHashMap; transform(Lscala/Function2; f$3) {
    this.(Lscala/collection/mutable/OpenHashMap;::foreachUndeletedEntry(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$transform$1;::this(Lscala/collection/mutable/OpenHashMap;Lscala/Function2;)V;)(this, f$3)));
    return this;
  }
  
  public Lscala/collection/mutable/OpenHashMap; retain(Lscala/Function2; f$4) {
    this.(Lscala/collection/mutable/OpenHashMap;::foreachUndeletedEntry(Lscala/Function1;)V;)((new (Lscala/collection/mutable/OpenHashMap$$anonfun$retain$1;::this(Lscala/collection/mutable/OpenHashMap;Lscala/Function2;)V;)(this, f$4)));
    return this;
  }
  
  public Ljava/lang/String; stringPrefix() {
    return "OpenHashMap";
  }
  
  public Lscala/collection/GenMap; toMap(Lscala/Predef$$less$colon$less; ev) {
    return this.(Lscala/collection/TraversableOnce;::toMap(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(ev);
  }
  
  public Lscala/collection/GenSet; toSet() {
    return this.(Lscala/collection/TraversableOnce;::toSet()Lscala/collection/immutable/Set;)();
  }
  
  public Lscala/collection/GenTraversable; toTraversable() {
    return this.(Lscala/collection/TraversableLike;::toTraversable()Lscala/collection/Traversable;)();
  }
  
  public Lscala/collection/GenMap; groupBy(Lscala/Function1; f) {
    return this.(Lscala/collection/TraversableLike;::groupBy(Lscala/Function1;)Lscala/collection/immutable/Map;)(f);
  }
  
  public Lscala/collection/generic/Subtractable; repr() {
    return this.(Lscala/collection/TraversableLike;::repr()Ljava/lang/Object;)().<cast>(Lscala/collection/generic/Subtractable;);
  }
  
  public Lscala/collection/TraversableView; view(I; from, I; until) {
    return this.(Lscala/collection/IterableLike;::view(I;I;)Lscala/collection/IterableView;)(from, until);
  }
  
  public Lscala/collection/TraversableView; view() {
    return this.(Lscala/collection/IterableLike;::view()Lscala/collection/IterableView;)();
  }
  
  public Lscala/collection/GenIterable; toIterable() {
    return this.(Lscala/collection/IterableLike;::toIterable()Lscala/collection/Iterable;)();
  }
  
  public Lscala/collection/Traversable; toCollection(Ljava/lang/Object; repr) {
    return this.(Lscala/collection/IterableLike;::toCollection(Ljava/lang/Object;)Lscala/collection/Iterable;)(repr);
  }
  
  public Lscala/collection/Traversable; thisCollection() {
    return this.(Lscala/collection/IterableLike;::thisCollection()Lscala/collection/Iterable;)();
  }
  
  public Lscala/Function1; andThen(Lscala/Function1; g) {
    return this.(Lscala/PartialFunction;::andThen(Lscala/Function1;)Lscala/PartialFunction;)(g);
  }
  
  public Lscala/collection/GenSeq; toSeq() {
    return this.(Lscala/collection/MapLike;::toSeq()Lscala/collection/Seq;)();
  }
  
  public Ljava/lang/Object; filterNot(Lscala/Function1; p) {
    return this.(Lscala/collection/MapLike;::filterNot(Lscala/Function1;)Lscala/collection/Map;)(p);
  }
  
  public Lscala/collection/generic/Subtractable; $minus$minus(Lscala/collection/GenTraversableOnce; xs) {
    return this.(Lscala/collection/mutable/MapLike;::$minus$minus(Lscala/collection/GenTraversableOnce;)Lscala/collection/mutable/Map;)(xs);
  }
  
  public Lscala/collection/generic/Subtractable; $minus(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems) {
    return this.(Lscala/collection/mutable/MapLike;::$minus(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/mutable/Map;)(elem1, elem2, elems);
  }
  
  public Ljava/lang/Object; result() {
    return this.(Lscala/collection/mutable/MapLike;::result()Lscala/collection/mutable/Map;)();
  }
  
  public Ljava/lang/Object; $minus(Ljava/lang/Object; key) {
    return this.(Lscala/collection/mutable/MapLike;::$minus(Ljava/lang/Object;)Lscala/collection/mutable/Map;)(key);
  }
  
  public Lscala/collection/generic/Subtractable; $minus(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/MapLike;::$minus(Ljava/lang/Object;)Lscala/collection/mutable/Map;)(elem);
  }
  
  public Lscala/collection/Map; $minus(Ljava/lang/Object; key) {
    return this.(Lscala/collection/mutable/MapLike;::$minus(Ljava/lang/Object;)Lscala/collection/mutable/Map;)(key);
  }
  
  public Lscala/collection/Map; $plus$plus(Lscala/collection/GenTraversableOnce; xs) {
    return this.(Lscala/collection/mutable/MapLike;::$plus$plus(Lscala/collection/GenTraversableOnce;)Lscala/collection/mutable/Map;)(xs);
  }
  
  public Lscala/collection/Map; $plus(Lscala/Tuple2; kv1, Lscala/Tuple2; kv2, Lscala/collection/Seq; kvs) {
    return this.(Lscala/collection/mutable/MapLike;::$plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)Lscala/collection/mutable/Map;)(kv1, kv2, kvs);
  }
  
  public Lscala/collection/GenMap; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/mutable/MapLike;::$plus(Lscala/Tuple2;)Lscala/collection/mutable/Map;)(kv);
  }
  
  public Lscala/collection/Map; $plus(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/mutable/MapLike;::$plus(Lscala/Tuple2;)Lscala/collection/mutable/Map;)(kv);
  }
  
  public Lscala/collection/Map; updated(Ljava/lang/Object; key, Ljava/lang/Object; value) {
    return this.(Lscala/collection/mutable/MapLike;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/mutable/Map;)(key, value);
  }
  
  public Lscala/collection/TraversableOnce; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/Traversable; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/mutable/Traversable; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/Iterable; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/mutable/Iterable; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/Map; seq() {
    return this.(Lscala/collection/mutable/Map;::seq()Lscala/collection/mutable/Map;)();
  }
  
  public Lscala/collection/mutable/MapLike; retain(Lscala/Function2; p) {
    return this.(Lscala/collection/mutable/OpenHashMap;::retain(Lscala/Function2;)Lscala/collection/mutable/OpenHashMap;)(p);
  }
  
  public Lscala/collection/mutable/MapLike; transform(Lscala/Function2; f) {
    return this.(Lscala/collection/mutable/OpenHashMap;::transform(Lscala/Function2;)Lscala/collection/mutable/OpenHashMap;)(f);
  }
  
  public Ljava/lang/Object; clone() {
    return this.(Lscala/collection/mutable/OpenHashMap;::clone()Lscala/collection/mutable/OpenHashMap;)();
  }
  
  public Lscala/collection/mutable/Map; clone() {
    return this.(Lscala/collection/mutable/OpenHashMap;::clone()Lscala/collection/mutable/OpenHashMap;)();
  }
  
  public Lscala/collection/generic/Shrinkable; $minus$eq(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/OpenHashMap;::$minus$eq(Ljava/lang/Object;)Lscala/collection/mutable/OpenHashMap;)(elem);
  }
  
  public Lscala/collection/mutable/MapLike; $minus$eq(Ljava/lang/Object; key) {
    return this.(Lscala/collection/mutable/OpenHashMap;::$minus$eq(Ljava/lang/Object;)Lscala/collection/mutable/OpenHashMap;)(key);
  }
  
  public Lscala/collection/generic/Growable; $plus$eq(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/OpenHashMap;::$plus$eq(Lscala/Tuple2;)Lscala/collection/mutable/OpenHashMap;)(elem.<cast>(Lscala/Tuple2;));
  }
  
  public Lscala/collection/mutable/Builder; $plus$eq(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/OpenHashMap;::$plus$eq(Lscala/Tuple2;)Lscala/collection/mutable/OpenHashMap;)(elem.<cast>(Lscala/Tuple2;));
  }
  
  public Lscala/collection/mutable/MapLike; $plus$eq(Lscala/Tuple2; kv) {
    return this.(Lscala/collection/mutable/OpenHashMap;::$plus$eq(Lscala/Tuple2;)Lscala/collection/mutable/OpenHashMap;)(kv);
  }
  
  public Lscala/collection/Map; empty() {
    return this.(Lscala/collection/mutable/OpenHashMap;::empty()Lscala/collection/mutable/OpenHashMap;)();
  }
  
  public Lscala/collection/mutable/Map; empty() {
    return this.(Lscala/collection/mutable/OpenHashMap;::empty()Lscala/collection/mutable/OpenHashMap;)();
  }
  
  public this(I; initialSize) {
    (Ljava/lang/Object;::super()V;)();
    Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$init$(Lscala/collection/GenTraversableOnce;)V;)(this);
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/Parallelizable$class;.(Lscala/collection/Parallelizable$class;::$init$(Lscala/collection/Parallelizable;)V;)(this);
    Lscala/collection/GenTraversableLike$class;.(Lscala/collection/GenTraversableLike$class;::$init$(Lscala/collection/GenTraversableLike;)V;)(this);
    Lscala/collection/TraversableLike$class;.(Lscala/collection/TraversableLike$class;::$init$(Lscala/collection/TraversableLike;)V;)(this);
    Lscala/collection/generic/GenericTraversableTemplate$class;.(Lscala/collection/generic/GenericTraversableTemplate$class;::$init$(Lscala/collection/generic/GenericTraversableTemplate;)V;)(this);
    Lscala/collection/GenTraversable$class;.(Lscala/collection/GenTraversable$class;::$init$(Lscala/collection/GenTraversable;)V;)(this);
    Lscala/collection/Traversable$class;.(Lscala/collection/Traversable$class;::$init$(Lscala/collection/Traversable;)V;)(this);
    Lscala/collection/mutable/Traversable$class;.(Lscala/collection/mutable/Traversable$class;::$init$(Lscala/collection/mutable/Traversable;)V;)(this);
    Lscala/collection/GenIterableLike$class;.(Lscala/collection/GenIterableLike$class;::$init$(Lscala/collection/GenIterableLike;)V;)(this);
    Lscala/collection/GenIterable$class;.(Lscala/collection/GenIterable$class;::$init$(Lscala/collection/GenIterable;)V;)(this);
    Lscala/collection/IterableLike$class;.(Lscala/collection/IterableLike$class;::$init$(Lscala/collection/IterableLike;)V;)(this);
    Lscala/collection/Iterable$class;.(Lscala/collection/Iterable$class;::$init$(Lscala/collection/Iterable;)V;)(this);
    Lscala/collection/mutable/Iterable$class;.(Lscala/collection/mutable/Iterable$class;::$init$(Lscala/collection/mutable/Iterable;)V;)(this);
    Lscala/collection/GenMapLike$class;.(Lscala/collection/GenMapLike$class;::$init$(Lscala/collection/GenMapLike;)V;)(this);
    Lscala/Function1$class;.(Lscala/Function1$class;::$init$(Lscala/Function1;)V;)(this);
    Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::$init$(Lscala/PartialFunction;)V;)(this);
    Lscala/collection/generic/Subtractable$class;.(Lscala/collection/generic/Subtractable$class;::$init$(Lscala/collection/generic/Subtractable;)V;)(this);
    Lscala/collection/MapLike$class;.(Lscala/collection/MapLike$class;::$init$(Lscala/collection/MapLike;)V;)(this);
    Lscala/collection/Map$class;.(Lscala/collection/Map$class;::$init$(Lscala/collection/Map;)V;)(this);
    Lscala/collection/generic/Growable$class;.(Lscala/collection/generic/Growable$class;::$init$(Lscala/collection/generic/Growable;)V;)(this);
    Lscala/collection/mutable/Builder$class;.(Lscala/collection/mutable/Builder$class;::$init$(Lscala/collection/mutable/Builder;)V;)(this);
    Lscala/collection/generic/Shrinkable$class;.(Lscala/collection/generic/Shrinkable$class;::$init$(Lscala/collection/generic/Shrinkable;)V;)(this);
    Lscala/collection/mutable/Cloneable$class;.(Lscala/collection/mutable/Cloneable$class;::$init$(Lscala/collection/mutable/Cloneable;)V;)(this);
    Lscala/collection/mutable/MapLike$class;.(Lscala/collection/mutable/MapLike$class;::$init$(Lscala/collection/mutable/MapLike;)V;)(this);
    Lscala/collection/mutable/Map$class;.(Lscala/collection/mutable/Map$class;::$init$(Lscala/collection/mutable/Map;)V;)(this);
    this.(Lscala/collection/mutable/OpenHashMap;)actualInitialSize = Lscala/collection/mutable/OpenHashMap$;.MODULE$.(Lscala/collection/mutable/OpenHashMap$;::nextPowerOfTwo(I;)I;)(initialSize);
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$mask$u0020 = (this.(Lscala/collection/mutable/OpenHashMap;)actualInitialSize - 1);
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$table$u0020 = new Lscala/collection/mutable/OpenHashMap$OpenEntry;[this.(Lscala/collection/mutable/OpenHashMap;)actualInitialSize];
    this.(Lscala/collection/mutable/OpenHashMap;)_size$u0020 = 0;
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$deleted$u0020 = 0;
    this.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount = 0;
  }
  
  public this() {
    (Lscala/collection/mutable/OpenHashMap;::this(I;)V;)(8);
  }
}
