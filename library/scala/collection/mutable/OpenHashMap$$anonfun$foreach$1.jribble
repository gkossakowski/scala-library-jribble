public final class Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1; extends Lscala/runtime/AbstractFunction1; implements Lscala/Serializable; {
  
  public final V; apply(Lscala/collection/mutable/OpenHashMap$OpenEntry; entry) {
    if ((this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)$outer$u0020.(Lscala/collection/mutable/OpenHashMap;)scala$collection$mutable$OpenHashMap$$modCount != this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)startModCount$1))
      {
        throw (new (Ljava/lang/RuntimeException;::this(Ljava/lang/String;)V;)("Concurrent Modification"));
      }
    else
      {
        
      }
    this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)f$2.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)((new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::key()Ljava/lang/Object;)(), entry.(Lscala/collection/mutable/OpenHashMap$OpenEntry;::value()Lscala/Option;)().(Lscala/Option;::get()Ljava/lang/Object;)())));
  }
  
  private Lscala/collection/mutable/OpenHashMap; $outer$u0020;
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;::apply(Lscala/collection/mutable/OpenHashMap$OpenEntry;)V;)(v1.<cast>(Lscala/collection/mutable/OpenHashMap$OpenEntry;));
    return Lscala/runtime/BoxedUnit;.UNIT;
  }
  
  private Lscala/Function1; f$2;
  
  private I; startModCount$1;
  
  public this(Lscala/collection/mutable/OpenHashMap; $outer, Lscala/Function1; f$2, I; startModCount$1) {
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)$outer$u0020 = $outer;
      }
    this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)f$2 = f$2;
    this.(Lscala/collection/mutable/OpenHashMap$$anonfun$foreach$1;)startModCount$1 = startModCount$1;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
