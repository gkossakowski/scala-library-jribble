public abstract class Lscala/collection/mutable/ResizableArray$class; {
  
  public static Lscala/collection/generic/GenericCompanion; companion(Lscala/collection/mutable/ResizableArray; $this) {
    return Lscala/collection/mutable/ResizableArray$;.MODULE$;
  }
  
  public static I; initialSize(Lscala/collection/mutable/ResizableArray; $this) {
    return 16;
  }
  
  public static I; length(Lscala/collection/mutable/ResizableArray; $this) {
    return $this.(Lscala/collection/mutable/ResizableArray;::size0()I;)();
  }
  
  public static Ljava/lang/Object; apply(Lscala/collection/mutable/ResizableArray; $this, I; idx) {
    if ((idx >= $this.(Lscala/collection/mutable/ResizableArray;::size0()I;)()))
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(idx).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    else
      {
        
      }
    return $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[idx];
  }
  
  public static V; update(Lscala/collection/mutable/ResizableArray; $this, I; idx, Ljava/lang/Object; elem) {
    if ((idx >= $this.(Lscala/collection/mutable/ResizableArray;::size0()I;)()))
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(idx).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    else
      {
        
      }
    $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[idx] = elem;
  }
  
  public static V; foreach(Lscala/collection/mutable/ResizableArray; $this, Lscala/Function1; f) {
    I; i = 0;
    while$1: while(true) {
      if ((i < $this.(Lscala/collection/SeqLike;::size()I;)()))
        {
          {
            f.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)($this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[i]);
            i = (i + 1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; copyToArray(Lscala/collection/mutable/ResizableArray; $this, Ljava/lang/Object; xs, I; start, I; len) {
    I; len1 = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)(len).(Lscala/runtime/RichInt;::min(I;)I;)((Lscala/runtime/ScalaRunTime$;.MODULE$.(Lscala/runtime/ScalaRunTime$;::array_length(Ljava/lang/Object;)I;)(xs) - start))).(Lscala/runtime/RichInt;::min(I;)I;)($this.(Lscala/collection/mutable/ResizableArray;::length()I;)());
    Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)($this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)(), 0, xs, start, len1);
  }
  
  public static V; reduceToSize(Lscala/collection/mutable/ResizableArray; $this, I; sz) {
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::require(Z;)V;)((sz <= $this.(Lscala/collection/mutable/ResizableArray;::size0()I;)()));
    while$2: while(true) {
      if (($this.(Lscala/collection/mutable/ResizableArray;::size0()I;)() > sz))
        {
          {
            $this.(Lscala/collection/mutable/ResizableArray;::size0_$eq(I;)V;)(($this.(Lscala/collection/mutable/ResizableArray;::size0()I;)() - 1));
            $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[$this.(Lscala/collection/mutable/ResizableArray;::size0()I;)()] = null;
          }
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; ensureSize(Lscala/collection/mutable/ResizableArray; $this, I; n) {
    if ((n > $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)().<length>))
      {
        I; newsize = ($this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)().<length> * 2);
        while$3: while(true) {
          if ((n > newsize))
            {
              newsize = (newsize * 2);
              continue while$3;
            }
          else
            {
              
            }
          break;
        }
        Ljava/lang/Object;[ newar = new Ljava/lang/Object;[newsize];
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)($this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)(), 0, newar, 0, $this.(Lscala/collection/mutable/ResizableArray;::size0()I;)());
        $this.(Lscala/collection/mutable/ResizableArray;::array_$eq(Ljava/lang/Object;[)V;)(newar);
      }
    else
      {
        
      }
  }
  
  public static V; swap(Lscala/collection/mutable/ResizableArray; $this, I; a, I; b) {
    Ljava/lang/Object; h = $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[a];
    $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[a] = $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[b];
    $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)()[b] = h;
  }
  
  public static V; copy(Lscala/collection/mutable/ResizableArray; $this, I; m, I; n, I; len) {
    Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)($this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)(), m, $this.(Lscala/collection/mutable/ResizableArray;::array()Ljava/lang/Object;[)(), n, len);
  }
  
  public static V; $init$(Lscala/collection/mutable/ResizableArray; $this) {
    $this.(Lscala/collection/mutable/ResizableArray;::array_$eq(Ljava/lang/Object;[)V;)(new Ljava/lang/Object;[Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)($this.(Lscala/collection/mutable/ResizableArray;::initialSize()I;)()).(Lscala/runtime/RichInt;::max(I;)I;)(1)]);
    $this.(Lscala/collection/mutable/ResizableArray;::size0_$eq(I;)V;)(0);
  }
}
