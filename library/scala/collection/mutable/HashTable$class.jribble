public abstract class Lscala/collection/mutable/HashTable$class; {
  
  public static I; initialSize(Lscala/collection/mutable/HashTable; $this) {
    return Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::initialSize()I;)();
  }
  
  public static V; init(Lscala/collection/mutable/HashTable; $this, Ljava/io/ObjectInputStream; in, Lscala/Function2; f) {
    in.(Ljava/io/ObjectInputStream;::defaultReadObject()V;)();
    $this.(Lscala/collection/mutable/HashTable;::_loadFactor_$eq(I;)V;)(in.(Ljava/io/ObjectInputStream;::readInt()I;)());
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)(($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)() > 0));
    I; size = in.(Ljava/io/ObjectInputStream;::readInt()I;)();
    $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(0);
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::assert(Z;)V;)((size >= 0));
    Z; smDefined = in.(Ljava/io/ObjectInputStream;::readBoolean()Z;)();
    $this.(Lscala/collection/mutable/HashTable;::table_$eq(Lscala/collection/mutable/HashEntry;[)V;)(new Lscala/collection/mutable/HashEntry;[Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::capacity(I;)I;)(Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::sizeForThreshold(I;I;)I;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)(), size))]);
    $this.(Lscala/collection/mutable/HashTable;::threshold_$eq(I;)V;)(Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::newThreshold(I;I;)I;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)(), Lscala/Predef$;.MODULE$.(Lscala/Predef$;::refArrayOps(Ljava/lang/Object;[)Lscala/collection/mutable/ArrayOps;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<cast>(Ljava/lang/Object;[)).(Lscala/collection/SeqLike;::size()I;)()));
    if (smDefined)
      {
        $this.(Lscala/collection/mutable/HashTable;::sizeMapInit(I;)V;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length>);
      }
    else
      {
        $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(null);
      }
    I; index = 0;
    while$1: while(true) {
      if ((index < size))
        {
          {
            $this.(Lscala/collection/mutable/HashTable;::addEntry(Lscala/collection/mutable/HashEntry;)V;)(f.(Lscala/Function2;::apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(in.(Ljava/io/ObjectInputStream;::readObject()Ljava/lang/Object;)(), in.(Ljava/io/ObjectInputStream;::readObject()Ljava/lang/Object;)()).<cast>(Lscala/collection/mutable/HashEntry;));
            index = (index + 1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; serializeTo(Lscala/collection/mutable/HashTable; $this, Ljava/io/ObjectOutputStream; out$1, Lscala/Function1; value$1) {
    out$1.(Ljava/io/ObjectOutputStream;::defaultWriteObject()V;)();
    out$1.(Ljava/io/ObjectOutputStream;::writeInt(I;)V;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)());
    out$1.(Ljava/io/ObjectOutputStream;::writeInt(I;)V;)($this.(Lscala/collection/mutable/HashTable;::tableSize()I;)());
    out$1.(Ljava/io/ObjectOutputStream;::writeBoolean(Z;)V;)($this.(Lscala/collection/mutable/HashTable;::isSizeMapDefined()Z;)());
    $this.(Lscala/collection/mutable/HashTable;::foreachEntry(Lscala/Function1;)V;)((new (Lscala/collection/mutable/HashTable$$anonfun$serializeTo$1;::this(Lscala/collection/mutable/HashTable;Ljava/io/ObjectOutputStream;Lscala/Function1;)V;)($this, out$1, value$1)));
  }
  
  public static Lscala/collection/mutable/HashEntry; findEntry(Lscala/collection/mutable/HashTable; $this, Ljava/lang/Object; key) {
    I; h = $this.(Lscala/collection/mutable/HashTable;::index(I;)I;)($this.(Lscala/collection/mutable/HashTable$HashUtils;::elemHashCode(Ljava/lang/Object;)I;)(key));
    Lscala/collection/mutable/HashEntry; e = $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h];
    while$2: while(true) {
      if (((e != null) && !($this.(Lscala/collection/mutable/HashTable;::elemEquals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(e.(Lscala/collection/mutable/HashEntry;::key()Ljava/lang/Object;)(), key))))
        {
          e = e.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
          continue while$2;
        }
      else
        {
          
        }
      break;
    }
    return e;
  }
  
  public static V; addEntry(Lscala/collection/mutable/HashTable; $this, Lscala/collection/mutable/HashEntry; e) {
    I; h = $this.(Lscala/collection/mutable/HashTable;::index(I;)I;)($this.(Lscala/collection/mutable/HashTable$HashUtils;::elemHashCode(Ljava/lang/Object;)I;)(e.(Lscala/collection/mutable/HashEntry;::key()Ljava/lang/Object;)()));
    e.(Lscala/collection/mutable/HashEntry;::next_$eq(Ljava/lang/Object;)V;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h]);
    $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h] = e;
    $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(($this.(Lscala/collection/mutable/HashTable;::tableSize()I;)() + 1));
    $this.(Lscala/collection/mutable/HashTable;::nnSizeMapAdd(I;)V;)(h);
    if (($this.(Lscala/collection/mutable/HashTable;::tableSize()I;)() > $this.(Lscala/collection/mutable/HashTable;::threshold()I;)()))
      {
        Lscala/collection/mutable/HashTable$class;.(Lscala/collection/mutable/HashTable$class;::resize(Lscala/collection/mutable/HashTable;I;)V;)($this, (2 * $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length>));
      }
    else
      {
        
      }
  }
  
  public static Lscala/collection/mutable/HashEntry; removeEntry(Lscala/collection/mutable/HashTable; $this, Ljava/lang/Object; key) {
    I; h = $this.(Lscala/collection/mutable/HashTable;::index(I;)I;)($this.(Lscala/collection/mutable/HashTable$HashUtils;::elemHashCode(Ljava/lang/Object;)I;)(key));
    Lscala/collection/mutable/HashEntry; e = $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h];
    if ((e != null))
      {
        if ($this.(Lscala/collection/mutable/HashTable;::elemEquals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(e.(Lscala/collection/mutable/HashEntry;::key()Ljava/lang/Object;)(), key))
          {
            $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h] = e.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
            $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(($this.(Lscala/collection/mutable/HashTable;::tableSize()I;)() - 1));
            $this.(Lscala/collection/mutable/HashTable;::nnSizeMapRemove(I;)V;)(h);
            return e;
          }
        else
          {
            Lscala/collection/mutable/HashEntry; e1 = e.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
            while$3: while(true) {
              if (((e1 != null) && !($this.(Lscala/collection/mutable/HashTable;::elemEquals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(e1.(Lscala/collection/mutable/HashEntry;::key()Ljava/lang/Object;)(), key))))
                {
                  {
                    e = e1;
                    e1 = e1.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
                  }
                  continue while$3;
                }
              else
                {
                  
                }
              break;
            }
            if ((e1 != null))
              {
                e.(Lscala/collection/mutable/HashEntry;::next_$eq(Ljava/lang/Object;)V;)(e1.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)());
                $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(($this.(Lscala/collection/mutable/HashTable;::tableSize()I;)() - 1));
                $this.(Lscala/collection/mutable/HashTable;::nnSizeMapRemove(I;)V;)(h);
                return e1;
              }
            else
              {
                
              }
          }
      }
    else
      {
        
      }
    return null;
  }
  
  public static Lscala/collection/Iterator; entriesIterator(Lscala/collection/mutable/HashTable; $this) {
    return (new (Lscala/collection/mutable/HashTable$$anon$1;::this(Lscala/collection/mutable/HashTable;)V;)($this));
  }
  
  public static final V; foreachEntry(Lscala/collection/mutable/HashTable; $this, Lscala/Function1; f) {
    $this.(Lscala/collection/mutable/HashTable;::entriesIterator()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::foreach(Lscala/Function1;)V;)(f);
  }
  
  public static Lscala/collection/Iterator; entries(Lscala/collection/mutable/HashTable; $this) {
    return $this.(Lscala/collection/mutable/HashTable;::entriesIterator()Lscala/collection/Iterator;)();
  }
  
  public static V; clearTable(Lscala/collection/mutable/HashTable; $this) {
    I; i = ($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length> - 1);
    while$5: while(true) {
      if ((i >= 0))
        {
          {
            $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[i] = null;
            i = (i - 1);
          }
          continue while$5;
        }
      else
        {
          
        }
      break;
    }
    $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(0);
    $this.(Lscala/collection/mutable/HashTable;::nnSizeMapReset(I;)V;)(0);
  }
  
  private static V; resize(Lscala/collection/mutable/HashTable; $this, I; newSize) {
    Lscala/collection/mutable/HashEntry;[ oldTable = $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)();
    $this.(Lscala/collection/mutable/HashTable;::table_$eq(Lscala/collection/mutable/HashEntry;[)V;)(new Lscala/collection/mutable/HashEntry;[newSize]);
    $this.(Lscala/collection/mutable/HashTable;::nnSizeMapReset(I;)V;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length>);
    I; i = (oldTable.<length> - 1);
    while$6: while(true) {
      if ((i >= 0))
        {
          {
            Lscala/collection/mutable/HashEntry; e = oldTable[i];
            while$7: while(true) {
              if ((e != null))
                {
                  {
                    I; h = $this.(Lscala/collection/mutable/HashTable;::index(I;)I;)($this.(Lscala/collection/mutable/HashTable$HashUtils;::elemHashCode(Ljava/lang/Object;)I;)(e.(Lscala/collection/mutable/HashEntry;::key()Ljava/lang/Object;)()));
                    Lscala/collection/mutable/HashEntry; e1 = e.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
                    e.(Lscala/collection/mutable/HashEntry;::next_$eq(Ljava/lang/Object;)V;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h]);
                    $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)()[h] = e;
                    e = e1;
                    $this.(Lscala/collection/mutable/HashTable;::nnSizeMapAdd(I;)V;)(h);
                  }
                  continue while$7;
                }
              else
                {
                  
                }
              break;
            }
            i = (i - 1);
          }
          continue while$6;
        }
      else
        {
          
        }
      break;
    }
    $this.(Lscala/collection/mutable/HashTable;::threshold_$eq(I;)V;)(Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::newThreshold(I;I;)I;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)(), newSize));
  }
  
  public static V; nnSizeMapAdd(Lscala/collection/mutable/HashTable; $this, I; h) {
    if (($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)() != null))
      {
        I;[ ev$1 = $this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)();
        I; ev$2 = (h >>> $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketBitSize()I;)());
        ev$1[ev$2] = (ev$1[ev$2] + 1);
      }
    else
      {
        
      }
  }
  
  public static V; nnSizeMapRemove(Lscala/collection/mutable/HashTable; $this, I; h) {
    if (($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)() != null))
      {
        I;[ ev$3 = $this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)();
        I; ev$4 = (h >>> $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketBitSize()I;)());
        ev$3[ev$4] = (ev$3[ev$4] - 1);
      }
    else
      {
        
      }
  }
  
  public static V; nnSizeMapReset(Lscala/collection/mutable/HashTable; $this, I; tableLength) {
    if (($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)() != null))
      {
        I; nsize = $this.(Lscala/collection/mutable/HashTable;::calcSizeMapSize(I;)I;)(tableLength);
        if (($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)().<length> != nsize))
          {
            $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(new I;[nsize]);
          }
        else
          {
            Ljava/util/Arrays;.(Ljava/util/Arrays;::fill(I;[I;)V;)($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)(), 0);
          }
      }
    else
      {
        
      }
  }
  
  public static final I; totalSizeMapBuckets(Lscala/collection/mutable/HashTable; $this) {
    I; $2$;
    if (($this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketSize()I;)() < $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length>))
      {
        $2$ = 1;
      }
    else
      {
        $2$ = ($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length> / $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketSize()I;)());
      }
    return $2$;
  }
  
  public static I; calcSizeMapSize(Lscala/collection/mutable/HashTable; $this, I; tableLength) {
    return ((tableLength >>> $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketBitSize()I;)()) + 1);
  }
  
  public static V; sizeMapInit(Lscala/collection/mutable/HashTable; $this, I; tableLength) {
    $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(new I;[$this.(Lscala/collection/mutable/HashTable;::calcSizeMapSize(I;)I;)(tableLength)]);
  }
  
  public static V; sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable; $this) {
    $this.(Lscala/collection/mutable/HashTable;::sizeMapInit(I;)V;)($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length>);
    I; tableidx = 0;
    I; bucketidx = 0;
    Lscala/collection/mutable/HashEntry;[ tbl = $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)();
    I; tableuntil = 0;
    if ((tbl.<length> < $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketSize()I;)()))
      {
        tableuntil = tbl.<length>;
      }
    else
      {
        tableuntil = $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketSize()I;)();
      }
    I; totalbuckets = $this.(Lscala/collection/mutable/HashTable;::totalSizeMapBuckets()I;)();
    while$8: while(true) {
      if ((bucketidx < totalbuckets))
        {
          {
            I; currbucketsize = 0;
            while$9: while(true) {
              if ((tableidx < tableuntil))
                {
                  {
                    Lscala/collection/mutable/HashEntry; e = tbl[tableidx];
                    while$10: while(true) {
                      if ((e != null))
                        {
                          {
                            currbucketsize = (currbucketsize + 1);
                            e = e.(Lscala/collection/mutable/HashEntry;::next()Ljava/lang/Object;)().<cast>(Lscala/collection/mutable/HashEntry;);
                          }
                          continue while$10;
                        }
                      else
                        {
                          
                        }
                      break;
                    }
                    tableidx = (tableidx + 1);
                  }
                  continue while$9;
                }
              else
                {
                  
                }
              break;
            }
            $this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)()[bucketidx] = currbucketsize;
            tableuntil = (tableuntil + $this.(Lscala/collection/mutable/HashTable$HashUtils;::sizeMapBucketSize()I;)());
            bucketidx = (bucketidx + 1);
          }
          continue while$8;
        }
      else
        {
          
        }
      break;
    }
  }
  
  public static V; printSizeMap(Lscala/collection/mutable/HashTable; $this) {
    Lscala/Predef$;.MODULE$.(Lscala/Predef$;::println(Ljava/lang/Object;)V;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intArrayOps(I;[)Lscala/collection/mutable/ArrayOps;)($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)()).(Lscala/collection/TraversableOnce;::toList()Lscala/collection/immutable/List;)());
  }
  
  public static V; sizeMapDisable(Lscala/collection/mutable/HashTable; $this) {
    $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(null);
  }
  
  public static Z; isSizeMapDefined(Lscala/collection/mutable/HashTable; $this) {
    return ($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)() != null);
  }
  
  public static Z; alwaysInitSizeMap(Lscala/collection/mutable/HashTable; $this) {
    return false;
  }
  
  public static Z; elemEquals(Lscala/collection/mutable/HashTable; $this, Ljava/lang/Object; key1, Ljava/lang/Object; key2) {
    return Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(key1, key2);
  }
  
  public static final I; index(Lscala/collection/mutable/HashTable; $this, I; hcode) {
    I; ones = ($this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)().<length> - 1);
    I; improved = $this.(Lscala/collection/mutable/HashTable$HashUtils;::improve(I;)I;)(hcode);
    I; shifted = ((improved >>> (32 - Ljava/lang/Integer;.(Ljava/lang/Integer;::bitCount(I;)I;)(ones))) & ones);
    return shifted;
  }
  
  public static V; initWithContents(Lscala/collection/mutable/HashTable; $this, Lscala/collection/mutable/HashTable$Contents; c) {
    if ((c != null))
      {
        $this.(Lscala/collection/mutable/HashTable;::_loadFactor_$eq(I;)V;)(c.(Lscala/collection/mutable/HashTable$Contents;::loadFactor()I;)());
        $this.(Lscala/collection/mutable/HashTable;::table_$eq(Lscala/collection/mutable/HashEntry;[)V;)(c.(Lscala/collection/mutable/HashTable$Contents;::table()Lscala/collection/mutable/HashEntry;[)());
        $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(c.(Lscala/collection/mutable/HashTable$Contents;::tableSize()I;)());
        $this.(Lscala/collection/mutable/HashTable;::threshold_$eq(I;)V;)(c.(Lscala/collection/mutable/HashTable$Contents;::threshold()I;)());
        $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(c.(Lscala/collection/mutable/HashTable$Contents;::sizemap()I;[)());
      }
    else
      {
        
      }
    if (($this.(Lscala/collection/mutable/HashTable;::alwaysInitSizeMap()Z;)() && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)($this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)(), null)))
      {
        $this.(Lscala/collection/mutable/HashTable;::sizeMapInitAndRebuild()V;)();
      }
    else
      {
        
      }
  }
  
  public static Lscala/collection/mutable/HashTable$Contents; hashTableContents(Lscala/collection/mutable/HashTable; $this) {
    return (new (Lscala/collection/mutable/HashTable$Contents;::this(I;Lscala/collection/mutable/HashEntry;[I;I;I;[)V;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)(), $this.(Lscala/collection/mutable/HashTable;::table()Lscala/collection/mutable/HashEntry;[)(), $this.(Lscala/collection/mutable/HashTable;::tableSize()I;)(), $this.(Lscala/collection/mutable/HashTable;::threshold()I;)(), $this.(Lscala/collection/mutable/HashTable;::sizemap()I;[)()));
  }
  
  public static V; $init$(Lscala/collection/mutable/HashTable; $this) {
    $this.(Lscala/collection/mutable/HashTable;::_loadFactor_$eq(I;)V;)(Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::defaultLoadFactor()I;)());
    $this.(Lscala/collection/mutable/HashTable;::table_$eq(Lscala/collection/mutable/HashEntry;[)V;)(new Lscala/collection/mutable/HashEntry;[Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::initialCapacity()I;)()]);
    $this.(Lscala/collection/mutable/HashTable;::tableSize_$eq(I;)V;)(0);
    $this.(Lscala/collection/mutable/HashTable;::threshold_$eq(I;)V;)(Lscala/collection/mutable/HashTable$;.MODULE$.(Lscala/collection/mutable/HashTable$;::initialThreshold(I;)I;)($this.(Lscala/collection/mutable/HashTable;::_loadFactor()I;)()));
    $this.(Lscala/collection/mutable/HashTable;::sizemap_$eq(I;[)V;)(null);
  }
}
