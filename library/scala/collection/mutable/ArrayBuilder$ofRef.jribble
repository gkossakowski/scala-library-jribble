public class Lscala/collection/mutable/ArrayBuilder$ofRef; extends Lscala/collection/mutable/ArrayBuilder; implements Lscala/ScalaObject; {
  
  private Lscala/reflect/ClassManifest; evidence$2;
  
  private Ljava/lang/Object;[ elems$u0020;
  
  private Ljava/lang/Object;[ elems() {
    return this.(Ljava/lang/Object;[)elems$u0020;
  }
  
  private V; elems_$eq(Ljava/lang/Object;[ x$1) {
    this.(Ljava/lang/Object;[)elems$u0020 = x$1;
  }
  
  private I; capacity$u0020;
  
  private I; capacity() {
    return this.(I;)capacity$u0020;
  }
  
  private V; capacity_$eq(I; x$1) {
    this.(I;)capacity$u0020 = x$1;
  }
  
  private I; size$u0020;
  
  private I; size() {
    return this.(I;)size$u0020;
  }
  
  private V; size_$eq(I; x$1) {
    this.(I;)size$u0020 = x$1;
  }
  
  private Ljava/lang/Object;[ mkArray(I; size) {
    Ljava/lang/Object;[ newelems = this.(Lscala/reflect/ClassManifest;)evidence$2.(Lscala/reflect/ClassManifest;::newArray(I;)Ljava/lang/Object;)(size).<cast>(Ljava/lang/Object;[);
    if ((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() > 0))
      {
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)(), 0, newelems, 0, this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)());
      }
    else
      {
        
      }
    return newelems;
  }
  
  private V; resize(I; size) {
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems_$eq(Ljava/lang/Object;[)V;)(this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::mkArray(I;)Ljava/lang/Object;[)(size));
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity_$eq(I;)V;)(size);
  }
  
  public V; sizeHint(I; size) {
    if ((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() < size))
      {
        this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::resize(I;)V;)(size);
      }
    else
      {
        
      }
  }
  
  private V; ensureSize(I; size) {
    if ((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() == 0))
      {
        this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::resize(I;)V;)(16);
      }
    else
      {
        
      }
    if ((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() < size))
      {
        I; newsize = (this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() * 2);
        while$1: while(true) {
          if ((newsize < size))
            {
              newsize = (newsize * 2);
              continue while$1;
            }
          else
            {
              
            }
          break;
        }
        this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::resize(I;)V;)(newsize);
      }
    else
      {
        
      }
  }
  
  public Lscala/collection/mutable/ArrayBuilder$ofRef; $plus$eq(Ljava/lang/Object; elem) {
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::ensureSize(I;)V;)((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() + 1));
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)()[this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)()] = elem;
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size_$eq(I;)V;)((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() + 1));
    return this;
  }
  
  public Lscala/collection/mutable/ArrayBuilder$ofRef; $plus$plus$eq(Lscala/collection/TraversableOnce; xs) {
    Ljava/lang/Object; temp1 = xs;
    Lscala/collection/mutable/ArrayBuilder$ofRef; $1$;
    if (temp1.<instanceof>(Lscala/collection/mutable/WrappedArray$ofRef;))
      {
        Lscala/collection/mutable/WrappedArray$ofRef; temp2 = temp1.<cast>(Lscala/collection/mutable/WrappedArray$ofRef;);
        Lscala/collection/mutable/WrappedArray$ofRef; xs = temp2;
        this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::ensureSize(I;)V;)((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() + xs.(Lscala/collection/mutable/WrappedArray$ofRef;::length()I;)()));
        Lscala/Array$;.MODULE$.(Lscala/Array$;::copy(Ljava/lang/Object;I;Ljava/lang/Object;I;I;)V;)(xs.(Lscala/collection/mutable/WrappedArray$ofRef;::array()Ljava/lang/Object;[)(), 0, this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)(), this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)(), xs.(Lscala/collection/mutable/WrappedArray$ofRef;::length()I;)());
        this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size_$eq(I;)V;)((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() + xs.(Lscala/collection/mutable/WrappedArray$ofRef;::length()I;)()));
        $1$ = this;
      }
    else
      {
        $1$ = Lscala/collection/generic/Growable$class;.(Lscala/collection/generic/Growable$class;::$plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(this, xs).<cast>(Lscala/collection/mutable/ArrayBuilder$ofRef;);
      }
    return $1$;
  }
  
  public V; clear() {
    this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size_$eq(I;)V;)(0);
  }
  
  public Ljava/lang/Object;[ result() {
    Ljava/lang/Object;[ $2$;
    if (((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() != 0) && (this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::capacity()I;)() == this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)())))
      {
        $2$ = this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)();
      }
    else
      {
        $2$ = this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::mkArray(I;)Ljava/lang/Object;[)(this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)());
      }
    return $2$;
  }
  
  public Z; equals(Ljava/lang/Object; other) {
    Ljava/lang/Object; temp3 = other;
    Z; $3$;
    if (temp3.<instanceof>(Lscala/collection/mutable/ArrayBuilder$ofRef;))
      {
        Lscala/collection/mutable/ArrayBuilder$ofRef; temp4 = temp3.<cast>(Lscala/collection/mutable/ArrayBuilder$ofRef;);
        Lscala/collection/mutable/ArrayBuilder$ofRef; x = temp4;
        $3$ = ((this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)() == x.(Lscala/collection/mutable/ArrayBuilder$ofRef;::size()I;)()) && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)(), x.(Lscala/collection/mutable/ArrayBuilder$ofRef;::elems()Ljava/lang/Object;[)()));
      }
    else
      {
        $3$ = false;
      }
    return $3$;
  }
  
  public Ljava/lang/String; toString() {
    return "ArrayBuilder.ofRef";
  }
  
  public Ljava/lang/Object; result() {
    return this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::result()Ljava/lang/Object;[)();
  }
  
  public Lscala/collection/generic/Growable; $plus$plus$eq(Lscala/collection/TraversableOnce; xs) {
    return this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/ArrayBuilder$ofRef;)(xs);
  }
  
  public Lscala/collection/generic/Growable; $plus$eq(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;)(elem);
  }
  
  public Lscala/collection/mutable/Builder; $plus$eq(Ljava/lang/Object; elem) {
    return this.(Lscala/collection/mutable/ArrayBuilder$ofRef;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;)(elem);
  }
  
  public this(Lscala/reflect/ClassManifest; evidence$2) {
    this.(Lscala/reflect/ClassManifest;)evidence$2 = evidence$2;
    (Lscala/collection/mutable/ArrayBuilder;::super()V;)();
    this.(I;)capacity$u0020 = 0;
    this.(I;)size$u0020 = 0;
  }
}
