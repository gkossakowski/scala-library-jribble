public class Lscala/collection/mutable/Queue; extends Lscala/collection/mutable/MutableList; implements Lscala/collection/generic/GenericTraversableTemplate;, Lscala/collection/mutable/Cloneable;, Lscala/Serializable;, Lscala/ScalaObject; {
  public final static Lscala/collection/generic/CanBuildFrom; canBuildFrom() { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/mutable/Queue$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)(); }
  public final static Lscala/Some; unapplySeq(Lscala/collection/Seq; x_0) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/SeqFactory;::unapplySeq(Lscala/collection/Seq;)Lscala/Some;)(x_0); }
  public final static Lscala/collection/GenTraversable; iterate(Ljava/lang/Object; x_0, I; x_1, Lscala/Function1; x_2) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::iterate(Ljava/lang/Object;I;Lscala/Function1;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; range(Ljava/lang/Object; x_0, Ljava/lang/Object; x_1, Ljava/lang/Object; x_2, Lscala/math/Integral; x_3) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::range(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; range(Ljava/lang/Object; x_0, Ljava/lang/Object; x_1, Lscala/math/Integral; x_2) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::range(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, I; x_3, I; x_4, Lscala/Function5; x_5) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;I;I;Lscala/Function5;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4, x_5); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, I; x_3, Lscala/Function4; x_4) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;I;Lscala/Function4;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, I; x_2, Lscala/Function3; x_3) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;I;Lscala/Function3;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, I; x_1, Lscala/Function2; x_2) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;I;Lscala/Function2;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; tabulate(I; x_0, Lscala/Function1; x_1) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::tabulate(I;Lscala/Function1;)Lscala/collection/GenTraversable;)(x_0, x_1); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, I; x_3, I; x_4, Lscala/Function0; x_5) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4, x_5); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, I; x_3, Lscala/Function0; x_4) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3, x_4); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, I; x_2, Lscala/Function0; x_3) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2, x_3); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, I; x_1, Lscala/Function0; x_2) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1, x_2); }
  public final static Lscala/collection/GenTraversable; fill(I; x_0, Lscala/Function0; x_1) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::fill(I;Lscala/Function0;)Lscala/collection/GenTraversable;)(x_0, x_1); }
  public final static Lscala/collection/GenTraversable; concat(Lscala/collection/Seq; x_0) { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::concat(Lscala/collection/Seq;)Lscala/collection/GenTraversable;)(x_0); }
  public final static Lscala/collection/generic/GenTraversableFactory$GenericCanBuildFrom; ReusableCBF() { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenTraversableFactory;::ReusableCBF()Lscala/collection/generic/GenTraversableFactory$GenericCanBuildFrom;)(); }
  public final static Lscala/collection/GenTraversable; empty() { return Lscala/collection/mutable/Queue$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::empty()Lscala/collection/GenTraversable;)(); }
  
  
  public Lscala/collection/generic/GenericCompanion; companion() {
    return Lscala/collection/mutable/Queue$;.MODULE$;
  }
  
  protected Lscala/collection/mutable/Builder; newBuilder() {
    return this.(Lscala/collection/mutable/Queue;::companion()Lscala/collection/generic/GenericCompanion;)().(Lscala/collection/generic/GenericCompanion;::newBuilder()Lscala/collection/mutable/Builder;)();
  }
  
  public V; enqueue(Lscala/collection/Seq; elems) {
    this.(Lscala/collection/generic/Growable;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(elems);
  }
  
  public Ljava/lang/Object; dequeue() {
    Ljava/lang/Object; $1$;
    if (this.(Lscala/collection/mutable/MutableList;::isEmpty()Z;)())
      {
        throw (new (Ljava/util/NoSuchElementException;::this(Ljava/lang/String;)V;)("queue empty"));
      }
    else
      {
        Ljava/lang/Object; res = this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)();
        this.(Lscala/collection/mutable/MutableList;::first0_$eq(Lscala/collection/mutable/LinkedList;)V;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;));
        this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
        $1$ = res;
      }
    return $1$;
  }
  
  public Lscala/Option; dequeueFirst(Lscala/Function1; p) {
    Lscala/Option; $2$;
    if (this.(Lscala/collection/mutable/MutableList;::isEmpty()Z;)())
      {
        $2$ = Lscala/None$;.MODULE$;
      }
    else
      {
        Lscala/Option; $3$;
        if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)())))
          {
            Lscala/Option; res = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)()));
            this.(Lscala/collection/mutable/MutableList;::first0_$eq(Lscala/collection/mutable/LinkedList;)V;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;));
            this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
            $3$ = res;
          }
        else
          {
            Lscala/Option; optElem = this.(Lscala/collection/mutable/Queue;::removeFromList(Lscala/Function1;)Lscala/Option;)(p);
            if ((optElem != Lscala/None$;.MODULE$))
              {
                this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
              }
            else
              {
                
              }
            $3$ = optElem;
          }
        $2$ = $3$;
      }
    return $2$;
  }
  
  private Lscala/Option; removeFromList(Lscala/Function1; p) {
    Lscala/collection/mutable/LinkedList; leftlst = this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)();
    Lscala/Option; res = Lscala/None$;.MODULE$;
    while$1: while(true) {
      if ((leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && !(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)())))))
        {
          leftlst = leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;);
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    if (leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)())
      {
        res = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)()));
        if ((leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)() == this.(Lscala/collection/mutable/MutableList;::last0()Lscala/collection/mutable/LinkedList;)()))
          {
            this.(Lscala/collection/mutable/MutableList;::last0_$eq(Lscala/collection/mutable/LinkedList;)V;)(leftlst);
          }
        else
          {
            
          }
        leftlst.(Lscala/collection/mutable/LinkedListLike;::next_$eq(Lscala/collection/mutable/Seq;)V;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)());
      }
    else
      {
        
      }
    return res;
  }
  
  public Lscala/collection/mutable/Seq; dequeueAll(Lscala/Function1; p) {
    Lscala/collection/mutable/Seq; $4$;
    if (this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::isEmpty()Z;)())
      {
        $4$ = Lscala/collection/mutable/Seq$;.MODULE$.(Lscala/collection/generic/GenericCompanion;::empty()Lscala/collection/GenTraversable;)().<cast>(Lscala/collection/mutable/Seq;);
      }
    else
      {
        Lscala/collection/mutable/ArrayBuffer; res = (new (Lscala/collection/mutable/ArrayBuffer;::this()V;)());
        while$2: while(true) {
          if ((this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)()))))
            {
              {
                res.(Lscala/collection/mutable/ArrayBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)());
                this.(Lscala/collection/mutable/MutableList;::first0_$eq(Lscala/collection/mutable/LinkedList;)V;)(this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;));
                this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
              }
              continue while$2;
            }
          else
            {
              
            }
          break;
        }
        Lscala/collection/mutable/Seq; $5$;
        if (this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)().(Lscala/collection/mutable/LinkedListLike;::isEmpty()Z;)())
          {
            $5$ = res;
          }
        else
          {
            $5$ = this.(Lscala/collection/mutable/Queue;::removeAllFromList(Lscala/Function1;Lscala/collection/mutable/ArrayBuffer;)Lscala/collection/mutable/ArrayBuffer;)(p, res);
          }
        $4$ = $5$;
      }
    return $4$;
  }
  
  private Lscala/collection/mutable/ArrayBuffer; removeAllFromList(Lscala/Function1; p, Lscala/collection/mutable/ArrayBuffer; res) {
    Lscala/collection/mutable/LinkedList; leftlst = this.(Lscala/collection/mutable/MutableList;::first0()Lscala/collection/mutable/LinkedList;)();
    while$3: while(true) {
      if (leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)())
        {
          if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)())))
            {
              res.(Lscala/collection/mutable/ArrayBuffer;::$plus$eq(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuffer;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)());
              if ((leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)() == this.(Lscala/collection/mutable/MutableList;::last0()Lscala/collection/mutable/LinkedList;)()))
                {
                  this.(Lscala/collection/mutable/MutableList;::last0_$eq(Lscala/collection/mutable/LinkedList;)V;)(leftlst);
                }
              else
                {
                  
                }
              leftlst.(Lscala/collection/mutable/LinkedListLike;::next_$eq(Lscala/collection/mutable/Seq;)V;)(leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)());
              this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
            }
          else
            {
              leftlst = leftlst.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;);
            }
          continue while$3;
        }
      else
        {
          
        }
      break;
    }
    return res;
  }
  
  public Lscala/Option; extractFirst(Lscala/collection/mutable/LinkedList; start, Lscala/Function1; p) {
    Lscala/Option; $6$;
    if (this.(Lscala/collection/mutable/MutableList;::isEmpty()Z;)())
      {
        $6$ = Lscala/None$;.MODULE$;
      }
    else
      {
        Lscala/collection/mutable/LinkedList; cell = start;
        while$4: while(true) {
          if ((cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().(Lscala/collection/TraversableOnce;::nonEmpty()Z;)() && !(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToBoolean(Ljava/lang/Object;)Z;)(p.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::elem()Ljava/lang/Object;)())))))
            {
              cell = cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedList;);
              continue while$4;
            }
          else
            {
              
            }
          break;
        }
        Lscala/Option; $7$;
        if (cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::isEmpty()Z;)())
          {
            $7$ = Lscala/None$;.MODULE$;
          }
        else
          {
            Lscala/Option; res = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)()));
            cell.(Lscala/collection/mutable/LinkedListLike;::next_$eq(Lscala/collection/mutable/Seq;)V;)(cell.(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)().<cast>(Lscala/collection/mutable/LinkedListLike;).(Lscala/collection/mutable/LinkedListLike;::next()Lscala/collection/mutable/Seq;)());
            this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)((this.(Lscala/collection/mutable/MutableList;::len()I;)() - 1));
            $7$ = res;
          }
        $6$ = $7$;
      }
    return $6$;
  }
  
  public Ljava/lang/Object; front() {
    return this.(Lscala/collection/mutable/MutableList;::head()Ljava/lang/Object;)();
  }
  
  public this() {
    (Lscala/collection/mutable/MutableList;::super()V;)();
  }
  
  public this(Lscala/collection/mutable/LinkedList; fst, Lscala/collection/mutable/LinkedList; lst, I; lng) {
    (Lscala/collection/mutable/Queue;::this()V;)();
    this.(Lscala/collection/mutable/MutableList;::first0_$eq(Lscala/collection/mutable/LinkedList;)V;)(fst);
    this.(Lscala/collection/mutable/MutableList;::last0_$eq(Lscala/collection/mutable/LinkedList;)V;)(lst);
    this.(Lscala/collection/mutable/MutableList;::len_$eq(I;)V;)(lng);
  }
}
