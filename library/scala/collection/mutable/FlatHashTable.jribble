public interface Lscala/collection/mutable/FlatHashTable; extends Lscala/collection/mutable/FlatHashTable$HashUtils;, Lscala/ScalaObject; {
  
  public Z; scala$collection$mutable$FlatHashTable$$tableDebug();
  
  public I; _loadFactor();
  
  public V; _loadFactor_$eq(I; x$1);
  
  public Ljava/lang/Object;[ table();
  
  public V; table_$eq(Ljava/lang/Object;[ x$1);
  
  public I; tableSize();
  
  public V; tableSize_$eq(I; x$1);
  
  public I; threshold();
  
  public V; threshold_$eq(I; x$1);
  
  public I;[ sizemap();
  
  public V; sizemap_$eq(I;[ x$1);
  
  public I; capacity(I; expectedSize);
  
  public Lscala/Option; findEntry(Ljava/lang/Object; elem);
  
  public Z; containsEntry(Ljava/lang/Object; elem);
  
  public Z; addEntry(Ljava/lang/Object; elem);
  
  public Lscala/Option; removeEntry(Ljava/lang/Object; elem);
  
  public Lscala/collection/Iterator; iterator();
  
  public V; nnSizeMapAdd(I; h);
  
  public V; nnSizeMapRemove(I; h);
  
  public V; nnSizeMapReset(I; tableLength);
  
  public I; totalSizeMapBuckets();
  
  public I; calcSizeMapSize(I; tableLength);
  
  public V; sizeMapInit(I; tableLength);
  
  public V; sizeMapInitAndRebuild();
  
  public V; printSizeMap();
  
  public V; sizeMapDisable();
  
  public Z; isSizeMapDefined();
  
  public Z; alwaysInitSizeMap();
  
  public I; index(I; hcode);
  
  public V; clearTable();
  
  public Lscala/collection/mutable/FlatHashTable$Contents; hashTableContents();
  
  public V; initWithContents(Lscala/collection/mutable/FlatHashTable$Contents; c);
}
