public interface Lscala/collection/interfaces/TraversableMethods; extends Lscala/collection/interfaces/TraversableOnceMethods; {
  
  public Ljava/lang/Object; flatMap(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; map(Lscala/Function1; f, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; collect(Lscala/PartialFunction; pf, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; scanRight(Ljava/lang/Object; z, Lscala/Function2; op, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; $plus$plus$colon(Lscala/collection/TraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; $plus$plus(Lscala/collection/GenTraversableOnce; that, Lscala/collection/generic/CanBuildFrom; bf);
  
  public Ljava/lang/Object; head();
  
  public Lscala/Option; headOption();
  
  public Ljava/lang/Object; last();
  
  public Lscala/Option; lastOption();
  
  public Lscala/collection/Traversable; drop(I; n);
  
  public Lscala/collection/Traversable; dropWhile(Lscala/Function1; p);
  
  public Lscala/collection/Traversable; filter(Lscala/Function1; p);
  
  public Lscala/collection/Traversable; filterNot(Lscala/Function1; p);
  
  public Lscala/collection/Traversable; init();
  
  public Lscala/collection/Iterator; inits();
  
  public Lscala/collection/Traversable; slice(I; from, I; until);
  
  public Lscala/collection/Traversable; tail();
  
  public Lscala/collection/Iterator; tails();
  
  public Lscala/collection/Traversable; take(I; n);
  
  public Lscala/collection/Traversable; takeWhile(Lscala/Function1; p);
  
  public Lscala/collection/generic/FilterMonadic; withFilter(Lscala/Function1; p);
  
  public Lscala/collection/Map; groupBy(Lscala/Function1; f);
  
  public Lscala/Tuple2; partition(Lscala/Function1; p);
  
  public Lscala/Tuple2; span(Lscala/Function1; p);
  
  public Lscala/Tuple2; splitAt(I; n);
  
  public Ljava/lang/String; stringPrefix();
  
  public Lscala/collection/TraversableView; view();
  
  public Lscala/collection/TraversableView; view(I; from, I; until);
}
