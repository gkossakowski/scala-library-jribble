public interface Lscala/collection/interfaces/SetMethods; extends Lscala/collection/interfaces/IterableMethods;, Lscala/collection/interfaces/SubtractableMethods; {
  
  public Lscala/collection/Set; empty();
  
  public Z; contains(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; $plus(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; $minus(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; $amp(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $amp$tilde(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $plus(Ljava/lang/Object; elem1, Ljava/lang/Object; elem2, Lscala/collection/Seq; elems);
  
  public Z; apply(Ljava/lang/Object; elem);
  
  public Lscala/collection/Set; diff(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; intersect(Lscala/collection/Set; that);
  
  public Z; subsetOf(Lscala/collection/Set; that);
  
  public Lscala/collection/Iterator; subsets(I; len);
  
  public Lscala/collection/Iterator; subsets();
  
  public Lscala/collection/Set; union(Lscala/collection/Set; that);
  
  public Lscala/collection/Set; $bar(Lscala/collection/Set; that);
}
