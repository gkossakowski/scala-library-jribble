public interface Lscala/collection/interfaces/TraversableOnceMethods; {
  
  public V; foreach(Lscala/Function1; f);
  
  public I; size();
  
  public Lscala/collection/TraversableOnce; reversed();
  
  public Z; hasDefiniteSize();
  
  public Z; isEmpty();
  
  public Z; isTraversableAgain();
  
  public Z; nonEmpty();
  
  public Lscala/Option; collectFirst(Lscala/PartialFunction; pf);
  
  public I; count(Lscala/Function1; p);
  
  public Z; exists(Lscala/Function1; p);
  
  public Lscala/Option; find(Lscala/Function1; p);
  
  public Z; forall(Lscala/Function1; p);
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op);
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op);
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op);
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op);
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op);
  
  public V; copyToArray(Ljava/lang/Object; xs);
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start);
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len);
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest);
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1);
  
  public Lscala/collection/mutable/Buffer; toBuffer();
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq();
  
  public Lscala/collection/Iterable; toIterable();
  
  public Lscala/collection/Iterator; toIterator();
  
  public Lscala/collection/immutable/List; toList();
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev);
  
  public Lscala/collection/Seq; toSeq();
  
  public Lscala/collection/immutable/Set; toSet();
  
  public Lscala/collection/immutable/Stream; toStream();
  
  public Lscala/collection/Traversable; toTraversable();
  
  public Ljava/lang/Object; maxBy(Lscala/Function1; f, Lscala/math/Ordering; cmp);
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp);
  
  public Ljava/lang/Object; minBy(Lscala/Function1; f, Lscala/math/Ordering; cmp);
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp);
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num);
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num);
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end);
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep);
  
  public Ljava/lang/String; mkString();
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; buf, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end);
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; buf, Ljava/lang/String; sep);
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; buf);
}
