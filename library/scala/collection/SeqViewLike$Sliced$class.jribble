public abstract class Lscala/collection/SeqViewLike$Sliced$class; {
  
  public static I; length(Lscala/collection/SeqViewLike$Sliced; $this) {
    return Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)((Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intWrapper(I;)Lscala/runtime/RichInt;)($this.(Lscala/collection/TraversableViewLike$Sliced;::until()I;)()).(Lscala/runtime/RichInt;::min(I;)I;)($this.(Lscala/collection/SeqViewLike$Sliced;::scala$collection$SeqViewLike$Sliced$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::length()I;)()) - $this.(Lscala/collection/TraversableViewLike$Sliced;::from()I;)())).(Lscala/runtime/RichInt;::max(I;)I;)(0);
  }
  
  public static Ljava/lang/Object; apply(Lscala/collection/SeqViewLike$Sliced; $this, I; idx) {
    Ljava/lang/Object; $1$;
    if (((idx + $this.(Lscala/collection/TraversableViewLike$Sliced;::from()I;)()) < $this.(Lscala/collection/TraversableViewLike$Sliced;::until()I;)()))
      {
        $1$ = $this.(Lscala/collection/SeqViewLike$Sliced;::scala$collection$SeqViewLike$Sliced$$$outer()Lscala/collection/SeqViewLike;)().(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)((idx + $this.(Lscala/collection/TraversableViewLike$Sliced;::from()I;)()));
      }
    else
      {
        throw (new (Ljava/lang/IndexOutOfBoundsException;::this(Ljava/lang/String;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(idx).(Ljava/lang/Object;::toString()Ljava/lang/String;)()));
      }
    return $1$;
  }
  
  public static V; $init$(Lscala/collection/SeqViewLike$Sliced; $this) {
    
  }
}
