public final class Lscala/collection/SeqLike$; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  public static Lscala/collection/SeqLike$; MODULE$ = new (Lscala/collection/SeqLike$;::this()V;)();
  
  private Lscala/Option; KMP(Lscala/collection/Seq; S, Lscala/collection/Seq; W) {
    if (W.(Lscala/collection/IterableLike;::isEmpty()Z;)())
      {
        return (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(0)));
      }
    else
      {
        if (W.(Lscala/collection/IterableLike;::drop(I;)Ljava/lang/Object;)(1).<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::isEmpty()Z;)())
          {
            I; temp20 = S.(Lscala/collection/GenSeqLike;::indexOf(Ljava/lang/Object;)I;)(W.(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)(0));
            Lscala/Option; $1$;
            if ((temp20 == -1))
              {
                $1$ = Lscala/None$;.MODULE$;
              }
            else
              {
                $1$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(temp20)));
              }
            return $1$;
          }
        else
          {
            
          }
      }
    I;[ arr = new I;[W.(Lscala/collection/SeqLike;::length()I;)()];
    I; pos = 2;
    I; cnd = 0;
    arr[0] = -1;
    arr[1] = 0;
    while$14: while(true) {
      if ((pos < W.(Lscala/collection/SeqLike;::length()I;)()))
        {
          if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(W.(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)((pos - 1)), W.(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)(cnd)))
            {
              arr[pos] = (cnd + 1);
              pos = (pos + 1);
              cnd = (cnd + 1);
            }
          else
            {
              if ((cnd > 0))
                {
                  cnd = arr[cnd];
                }
              else
                {
                  arr[pos] = 0;
                  pos = (pos + 1);
                }
            }
          continue while$14;
        }
      else
        {
          
        }
      break;
    }
    I;[ T = arr;
    Lscala/runtime/IntRef; m$3 = (new (Lscala/runtime/IntRef;::this(I;)V;)(0));
    Lscala/runtime/IntRef; i$2 = (new (Lscala/runtime/IntRef;::this(I;)V;)(0));
    while$15: while(true) {
      if ((this.(Lscala/collection/SeqLike$;::mi$1(Lscala/runtime/IntRef;Lscala/runtime/IntRef;)I;)(m$3, i$2) < S.(Lscala/collection/SeqLike;::length()I;)()))
        {
          if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(W.(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)(i$2.(Lscala/runtime/IntRef;)elem), S.(Lscala/collection/SeqLike;::apply(I;)Ljava/lang/Object;)(this.(Lscala/collection/SeqLike$;::mi$1(Lscala/runtime/IntRef;Lscala/runtime/IntRef;)I;)(m$3, i$2))))
            {
              i$2.(Lscala/runtime/IntRef;)elem = (i$2.(Lscala/runtime/IntRef;)elem + 1);
              if ((i$2.(Lscala/runtime/IntRef;)elem == W.(Lscala/collection/SeqLike;::length()I;)()))
                {
                  return (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(m$3.(Lscala/runtime/IntRef;)elem)));
                }
              else
                {
                  
                }
            }
          else
            {
              m$3.(Lscala/runtime/IntRef;)elem = (this.(Lscala/collection/SeqLike$;::mi$1(Lscala/runtime/IntRef;Lscala/runtime/IntRef;)I;)(m$3, i$2) - T[i$2.(Lscala/runtime/IntRef;)elem]);
              if ((i$2.(Lscala/runtime/IntRef;)elem > 0))
                {
                  i$2.(Lscala/runtime/IntRef;)elem = T[i$2.(Lscala/runtime/IntRef;)elem];
                }
              else
                {
                  
                }
            }
          continue while$15;
        }
      else
        {
          
        }
      break;
    }
    return Lscala/None$;.MODULE$;
  }
  
  public I; indexOf(Lscala/collection/Seq; source, I; sourceOffset, I; sourceCount, Lscala/collection/Seq; target, I; targetOffset, I; targetCount, I; fromIndex) {
    I; toDrop = Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)(fromIndex).(Lscala/runtime/RichInt;::max(I;)I;)(0);
    Lscala/collection/Seq; src = source.(Lscala/collection/IterableLike;::slice(I;I;)Ljava/lang/Object;)(sourceOffset, sourceCount).<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::drop(I;)Ljava/lang/Object;)(toDrop).<cast>(Lscala/collection/Seq;);
    Lscala/collection/Seq; tgt = target.(Lscala/collection/IterableLike;::slice(I;I;)Ljava/lang/Object;)(targetOffset, targetCount).<cast>(Lscala/collection/Seq;);
    Lscala/Option; temp21 = this.(Lscala/collection/SeqLike$;::KMP(Lscala/collection/Seq;Lscala/collection/Seq;)Lscala/Option;)(src, tgt);
    I; $2$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/None$;.MODULE$, temp21))
      {
        $2$ = -1;
      }
    else
      {
        I; $3$;
        if (temp21.<instanceof>(Lscala/Some;))
          {
            $3$ = (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(temp21.<cast>(Lscala/Some;).(Lscala/Some;::x()Ljava/lang/Object;)()) + toDrop);
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp21));
          }
        $2$ = $3$;
      }
    return $2$;
  }
  
  public I; lastIndexOf(Lscala/collection/Seq; source, I; sourceOffset, I; sourceCount, Lscala/collection/Seq; target, I; targetOffset, I; targetCount, I; fromIndex) {
    if ((fromIndex < 0))
      {
        return -1;
      }
    else
      {
        
      }
    I; toTake = Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)((fromIndex + targetCount)).(Lscala/runtime/RichInt;::min(I;)I;)(sourceCount);
    Lscala/collection/Seq; src = source.(Lscala/collection/IterableLike;::slice(I;I;)Ljava/lang/Object;)(sourceOffset, sourceCount).<cast>(Lscala/collection/IterableLike;).(Lscala/collection/IterableLike;::take(I;)Ljava/lang/Object;)(toTake).<cast>(Lscala/collection/SeqLike;).(Lscala/collection/SeqLike;::reverse()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
    Lscala/collection/Seq; tgt = target.(Lscala/collection/IterableLike;::slice(I;I;)Ljava/lang/Object;)(targetOffset, targetCount).<cast>(Lscala/collection/SeqLike;).(Lscala/collection/SeqLike;::reverse()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
    Lscala/Option; temp25 = this.(Lscala/collection/SeqLike$;::KMP(Lscala/collection/Seq;Lscala/collection/Seq;)Lscala/Option;)(src, tgt);
    I; $4$;
    if (Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::equals(Ljava/lang/Object;Ljava/lang/Object;)Z;)(Lscala/None$;.MODULE$, temp25))
      {
        $4$ = -1;
      }
    else
      {
        I; $5$;
        if (temp25.<instanceof>(Lscala/Some;))
          {
            $5$ = ((src.(Lscala/collection/SeqLike;::length()I;)() - Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(temp25.<cast>(Lscala/Some;).(Lscala/Some;::x()Ljava/lang/Object;)())) - targetCount);
          }
        else
          {
            throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp25));
          }
        $4$ = $5$;
      }
    return $4$;
  }
  
  private final I; mi$1(Lscala/runtime/IntRef; m$3, Lscala/runtime/IntRef; i$2) {
    return (m$3.(Lscala/runtime/IntRef;)elem + i$2.(Lscala/runtime/IntRef;)elem);
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
  }
}
