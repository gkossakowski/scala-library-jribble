public class Lscala/collection/SeqLike$CombinationsItr; extends Ljava/lang/Object; implements Lscala/collection/Iterator;, Lscala/ScalaObject; {
  
  public Lscala/collection/Iterator; seq() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::seq(Lscala/collection/Iterator;)Lscala/collection/Iterator;)(this);
  }
  
  public Z; isEmpty() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::isEmpty(Lscala/collection/Iterator;)Z;)(this);
  }
  
  public Z; isTraversableAgain() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::isTraversableAgain(Lscala/collection/Iterator;)Z;)(this);
  }
  
  public Z; hasDefiniteSize() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::hasDefiniteSize(Lscala/collection/Iterator;)Z;)(this);
  }
  
  public Lscala/collection/Iterator; take(I; n) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::take(Lscala/collection/Iterator;I;)Lscala/collection/Iterator;)(this, n);
  }
  
  public Lscala/collection/Iterator; drop(I; n) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::drop(Lscala/collection/Iterator;I;)Lscala/collection/Iterator;)(this, n);
  }
  
  public Lscala/collection/Iterator; slice(I; from, I; until) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::slice(Lscala/collection/Iterator;I;I;)Lscala/collection/Iterator;)(this, from, until);
  }
  
  public Lscala/collection/Iterator; map(Lscala/Function1; f) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::map(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, f);
  }
  
  public Lscala/collection/Iterator; $plus$plus(Lscala/Function0; that) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::$plus$plus(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;)(this, that);
  }
  
  public Lscala/collection/Iterator; flatMap(Lscala/Function1; f) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::flatMap(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, f);
  }
  
  public Lscala/collection/Iterator; filter(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::filter(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, p);
  }
  
  public Lscala/collection/Iterator; withFilter(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::withFilter(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, p);
  }
  
  public Lscala/collection/Iterator; filterNot(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::filterNot(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, p);
  }
  
  public Lscala/collection/Iterator; collect(Lscala/PartialFunction; pf) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::collect(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;)(this, pf);
  }
  
  public Lscala/collection/Iterator; scanLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::scanLeft(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;)(this, z, op);
  }
  
  public Lscala/collection/Iterator; scanRight(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::scanRight(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;)(this, z, op);
  }
  
  public Lscala/collection/Iterator; takeWhile(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::takeWhile(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, p);
  }
  
  public Lscala/Tuple2; partition(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::partition(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/Tuple2; span(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::span(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;)(this, p);
  }
  
  public Lscala/collection/Iterator; dropWhile(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::dropWhile(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;)(this, p);
  }
  
  public Lscala/collection/Iterator; zip(Lscala/collection/Iterator; that) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::zip(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;)(this, that);
  }
  
  public Lscala/collection/Iterator; padTo(I; len, Ljava/lang/Object; elem) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::padTo(Lscala/collection/Iterator;I;Ljava/lang/Object;)Lscala/collection/Iterator;)(this, len, elem);
  }
  
  public Lscala/collection/Iterator; zipWithIndex() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::zipWithIndex(Lscala/collection/Iterator;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/Iterator; zipAll(Lscala/collection/Iterator; that, Ljava/lang/Object; thisElem, Ljava/lang/Object; thatElem) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::zipAll(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;)(this, that, thisElem, thatElem);
  }
  
  public V; foreach(Lscala/Function1; f) {
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::foreach(Lscala/collection/Iterator;Lscala/Function1;)V;)(this, f);
  }
  
  public Z; forall(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::forall(Lscala/collection/Iterator;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; exists(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::exists(Lscala/collection/Iterator;Lscala/Function1;)Z;)(this, p);
  }
  
  public Z; contains(Ljava/lang/Object; elem) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::contains(Lscala/collection/Iterator;Ljava/lang/Object;)Z;)(this, elem);
  }
  
  public Lscala/Option; find(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::find(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;)(this, p);
  }
  
  public I; indexWhere(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::indexWhere(Lscala/collection/Iterator;Lscala/Function1;)I;)(this, p);
  }
  
  public I; indexOf(Ljava/lang/Object; elem) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::indexOf(Lscala/collection/Iterator;Ljava/lang/Object;)I;)(this, elem);
  }
  
  public Lscala/collection/BufferedIterator; buffered() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::buffered(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;)(this);
  }
  
  public Lscala/collection/Iterator$GroupedIterator; grouped(I; size) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::grouped(Lscala/collection/Iterator;I;)Lscala/collection/Iterator$GroupedIterator;)(this, size);
  }
  
  public Lscala/collection/Iterator$GroupedIterator; sliding(I; size, I; step) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::sliding(Lscala/collection/Iterator;I;I;)Lscala/collection/Iterator$GroupedIterator;)(this, size, step);
  }
  
  public I; length() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::length(Lscala/collection/Iterator;)I;)(this);
  }
  
  public Lscala/Tuple2; duplicate() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::duplicate(Lscala/collection/Iterator;)Lscala/Tuple2;)(this);
  }
  
  public Lscala/collection/Iterator; patch(I; from, Lscala/collection/Iterator; patchElems, I; replaced) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::patch(Lscala/collection/Iterator;I;Lscala/collection/Iterator;I;)Lscala/collection/Iterator;)(this, from, patchElems, replaced);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start, I; len) {
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;I;I;)V;)(this, xs, start, len);
  }
  
  public Z; sameElements(Lscala/collection/Iterator; that) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::sameElements(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z;)(this, that);
  }
  
  public Lscala/collection/Traversable; toTraversable() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::toTraversable(Lscala/collection/Iterator;)Lscala/collection/Traversable;)(this);
  }
  
  public Lscala/collection/Iterator; toIterator() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::toIterator(Lscala/collection/Iterator;)Lscala/collection/Iterator;)(this);
  }
  
  public Lscala/collection/immutable/Stream; toStream() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::toStream(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;)(this);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::toString(Lscala/collection/Iterator;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/Iterator; append(Lscala/collection/Iterator; that) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::append(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;)(this, that);
  }
  
  public I; findIndexOf(Lscala/Function1; p) {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::findIndexOf(Lscala/collection/Iterator;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/CountedIterator; counted() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::counted(Lscala/collection/Iterator;)Lscala/CountedIterator;)(this);
  }
  
  public V; readInto(Ljava/lang/Object; xs, I; start, I; sz) {
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::readInto(Lscala/collection/Iterator;Ljava/lang/Object;I;I;)V;)(this, xs, start, sz);
  }
  
  public V; readInto(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::readInto(Lscala/collection/Iterator;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; readInto(Ljava/lang/Object; xs) {
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::readInto(Lscala/collection/Iterator;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public I; sliding$default$2() {
    return Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::sliding$default$2(Lscala/collection/Iterator;)I;)(this);
  }
  
  public Lscala/collection/immutable/List; reversed() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reversed(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public I; size() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::size(Lscala/collection/TraversableOnce;)I;)(this);
  }
  
  public Z; nonEmpty() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::nonEmpty(Lscala/collection/TraversableOnce;)Z;)(this);
  }
  
  public I; count(Lscala/Function1; p) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::count(Lscala/collection/TraversableOnce;Lscala/Function1;)I;)(this, p);
  }
  
  public Lscala/Option; collectFirst(Lscala/PartialFunction; pf) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::collectFirst(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;)(this, pf);
  }
  
  public Ljava/lang/Object; $div$colon(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; $colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$colon$bslash(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; foldLeft(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; foldRight(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::foldRight(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; reduceLeft(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Ljava/lang/Object; reduceRight(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRight(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceLeftOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceLeftOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Lscala/Option; reduceRightOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceRightOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; reduce(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduce(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;)(this, op);
  }
  
  public Lscala/Option; reduceOption(Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::reduceOption(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;)(this, op);
  }
  
  public Ljava/lang/Object; fold(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::fold(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  public Ljava/lang/Object; aggregate(Ljava/lang/Object; z, Lscala/Function2; seqop, Lscala/Function2; combop) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::aggregate(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;)(this, z, seqop, combop);
  }
  
  public Ljava/lang/Object; sum(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::sum(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; product(Lscala/math/Numeric; num) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::product(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;)(this, num);
  }
  
  public Ljava/lang/Object; min(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::min(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; max(Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;)(this, cmp);
  }
  
  public Ljava/lang/Object; maxBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::maxBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public Ljava/lang/Object; minBy(Lscala/Function1; f, Lscala/math/Ordering; cmp) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::minBy(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)(this, f, cmp);
  }
  
  public V; copyToBuffer(Lscala/collection/mutable/Buffer; dest) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V;)(this, dest);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs, I; start) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I;)V;)(this, xs, start);
  }
  
  public V; copyToArray(Ljava/lang/Object; xs) {
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V;)(this, xs);
  }
  
  public Ljava/lang/Object; toArray(Lscala/reflect/ClassManifest; evidence$1) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassManifest;)Ljava/lang/Object;)(this, evidence$1);
  }
  
  public Lscala/collection/immutable/List; toList() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toList(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;)(this);
  }
  
  public Lscala/collection/Iterable; toIterable() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIterable(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;)(this);
  }
  
  public Lscala/collection/Seq; toSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSeq(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;)(this);
  }
  
  public Lscala/collection/immutable/IndexedSeq; toIndexedSeq() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toIndexedSeq(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;)(this);
  }
  
  public Lscala/collection/mutable/Buffer; toBuffer() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toBuffer(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;)(this);
  }
  
  public Lscala/collection/immutable/Set; toSet() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toSet(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;)(this);
  }
  
  public Lscala/collection/immutable/Map; toMap(Lscala/Predef$$less$colon$less; ev) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::toMap(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(this, ev);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;)(this, start, sep, end);
  }
  
  public Ljava/lang/String; mkString(Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;)(this, sep);
  }
  
  public Ljava/lang/String; mkString() {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::mkString(Lscala/collection/TraversableOnce;)Ljava/lang/String;)(this);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; start, Ljava/lang/String; sep, Ljava/lang/String; end) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, start, sep, end);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b, Ljava/lang/String; sep) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;)(this, b, sep);
  }
  
  public Lscala/collection/mutable/StringBuilder; addString(Lscala/collection/mutable/StringBuilder; b) {
    return Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;)(this, b);
  }
  
  public Ljava/lang/Object; $div$colon$bslash(Ljava/lang/Object; z, Lscala/Function2; op) {
    return Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$div$colon$bslash(Lscala/collection/GenTraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;)(this, z, op);
  }
  
  private I; n;
  
  private Lscala/Tuple3; x$4;
  
  private Lscala/collection/IndexedSeq; scala$collection$SeqLike$CombinationsItr$$elms$u0020;
  
  public final Lscala/collection/IndexedSeq; scala$collection$SeqLike$CombinationsItr$$elms() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$elms$u0020;
  }
  
  private I;[ scala$collection$SeqLike$CombinationsItr$$cnts$u0020;
  
  public final I;[ scala$collection$SeqLike$CombinationsItr$$cnts() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$cnts$u0020;
  }
  
  private I;[ scala$collection$SeqLike$CombinationsItr$$nums$u0020;
  
  public final I;[ scala$collection$SeqLike$CombinationsItr$$nums() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$nums$u0020;
  }
  
  private I;[ scala$collection$SeqLike$CombinationsItr$$offs$u0020;
  
  public final I;[ scala$collection$SeqLike$CombinationsItr$$offs() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$offs$u0020;
  }
  
  private Z; _hasNext$u0020;
  
  private Z; _hasNext() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)_hasNext$u0020;
  }
  
  private V; _hasNext_$eq(Z; x$1) {
    this.(Lscala/collection/SeqLike$CombinationsItr;)_hasNext$u0020 = x$1;
  }
  
  public Z; hasNext() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;::_hasNext()Z;)();
  }
  
  public Ljava/lang/Object; next() {
    if (!(this.(Lscala/collection/SeqLike$CombinationsItr;::hasNext()Z;)()))
      {
        Lscala/collection/Iterator$;.MODULE$.(Lscala/collection/Iterator$;::empty()Lscala/collection/Iterator;)().(Lscala/collection/Iterator;::next()Ljava/lang/Object;)();
      }
    else
      {
        
      }
    Lscala/collection/mutable/Builder; buf$1 = this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$$outer()Lscala/collection/SeqLike;)().(Lscala/collection/TraversableLike;::newBuilder()Lscala/collection/mutable/Builder;)();
    Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)(0).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range;)(this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)().<length>).(Lscala/collection/immutable/Range;::foreach$mVc$sp(Lscala/Function1;)V;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$next$1;::this(Lscala/collection/SeqLike$CombinationsItr;Lscala/collection/mutable/Builder;)V;)(this, buf$1)));
    Ljava/lang/Object; res = buf$1.(Lscala/collection/mutable/Builder;::result()Ljava/lang/Object;)();
    I; idx = (this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)().<length> - 1);
    while$8: while(true) {
      if (((idx >= 0) && (this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)()[idx] == this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$cnts()I;[)()[idx])))
        {
          idx = (idx - 1);
          continue while$8;
        }
      else
        {
          
        }
      break;
    }
    idx = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intArrayOps(I;[)Lscala/collection/mutable/ArrayOps;)(this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)()).(Lscala/collection/IndexedSeqOptimized;::lastIndexWhere(Lscala/Function1;I;)I;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$next$2;::this(Lscala/collection/SeqLike$CombinationsItr;)V;)(this)), (idx - 1));
    if ((idx < 0))
      {
        this.(Lscala/collection/SeqLike$CombinationsItr;::_hasNext_$eq(Z;)V;)(false);
      }
    else
      {
        Lscala/runtime/IntRef; sum$1 = (new (Lscala/runtime/IntRef;::this(I;)V;)((Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intArrayOps(I;[)Lscala/collection/mutable/ArrayOps;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intArrayOps(I;[)Lscala/collection/mutable/ArrayOps;)(this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)()).(Lscala/collection/IndexedSeqOptimized;::slice(I;I;)Ljava/lang/Object;)((idx + 1), this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)().<length>).<cast>(I;[)).(Lscala/collection/TraversableOnce;::sum(Lscala/math/Numeric;)Ljava/lang/Object;)(Lscala/math/Numeric$IntIsIntegral$;.MODULE$)) + 1)));
        {
          I; ev$1 = idx;
          this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)()[ev$1] = (this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)()[ev$1] - 1);
        }
        Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)((idx + 1)).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range;)(this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$nums()I;[)().<length>).(Lscala/collection/immutable/Range;::foreach$mVc$sp(Lscala/Function1;)V;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$next$3;::this(Lscala/collection/SeqLike$CombinationsItr;Lscala/runtime/IntRef;)V;)(this, sum$1)));
      }
    return res;
  }
  
  private Lscala/Tuple3; init() {
    Lscala/collection/mutable/HashMap; m$2 = Lscala/collection/mutable/HashMap$;.MODULE$.(Lscala/collection/generic/GenMapFactory;::apply(Lscala/collection/Seq;)Lscala/collection/GenMap;)(Lscala/collection/immutable/Nil$;.MODULE$).<cast>(Lscala/collection/mutable/HashMap;);
    Lscala/Tuple2; temp11 = this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$$outer()Lscala/collection/SeqLike;)().(Lscala/collection/SeqLike;::thisCollection()Lscala/collection/Seq;)().(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$4;::this(Lscala/collection/SeqLike$CombinationsItr;Lscala/collection/mutable/HashMap;)V;)(this, m$2)), Lscala/collection/Seq$;.MODULE$.(Lscala/collection/Seq$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/SeqLike;).(Lscala/collection/SeqLike;::sortBy(Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$5;::this(Lscala/collection/SeqLike$CombinationsItr;)V;)(this)), Lscala/math/Ordering$Int$;.MODULE$).<cast>(Lscala/collection/generic/GenericTraversableTemplate;).(Lscala/collection/generic/GenericTraversableTemplate;::unzip(Lscala/Function1;)Lscala/Tuple2;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::conforms()Lscala/Predef$$less$colon$less;)());
    Lscala/Tuple2; $13$;
    if ((temp11 != null))
      {
        $13$ = (new (Lscala/Tuple2;::this(Ljava/lang/Object;Ljava/lang/Object;)V;)(temp11.(Lscala/Tuple2;::_1()Ljava/lang/Object;)(), temp11.(Lscala/Tuple2;::_2()Ljava/lang/Object;)()));
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp11));
      }
    Lscala/Tuple2; x$9 = $13$;
    Lscala/collection/Seq; es = x$9.(Lscala/Tuple2;::_1()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
    Lscala/collection/Seq; is = x$9.(Lscala/Tuple2;::_2()Ljava/lang/Object;)().<cast>(Lscala/collection/Seq;);
    I;[ cs$1 = new I;[m$2.(Lscala/collection/mutable/HashMap;::size()I;)()];
    is.(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$init$1;::this(Lscala/collection/SeqLike$CombinationsItr;I;[)V;)(this, cs$1)));
    I;[ ns$1 = new I;[cs$1.<length>];
    Lscala/runtime/IntRef; r$1 = (new (Lscala/runtime/IntRef;::this(I;)V;)(this.(Lscala/collection/SeqLike$CombinationsItr;)n));
    Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::intWrapper(I;)Lscala/runtime/RichInt;)(0).(Lscala/runtime/RichInt;::until(I;)Lscala/collection/immutable/Range;)(ns$1.<length>).(Lscala/collection/immutable/Range;::foreach$mVc$sp(Lscala/Function1;)V;)((new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$init$2;::this(Lscala/collection/SeqLike$CombinationsItr;I;[I;[Lscala/runtime/IntRef;)V;)(this, cs$1, ns$1, r$1)));
    return (new (Lscala/Tuple3;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(es.(Lscala/collection/TraversableOnce;::toIndexedSeq()Lscala/collection/immutable/IndexedSeq;)(), cs$1, ns$1));
  }
  
  protected Lscala/collection/SeqLike; $outer$u0020;
  
  public Lscala/collection/SeqLike; scala$collection$SeqLike$CombinationsItr$$$outer() {
    return this.(Lscala/collection/SeqLike$CombinationsItr;)$outer$u0020;
  }
  
  public Lscala/collection/GenMap; toMap(Lscala/Predef$$less$colon$less; ev) {
    return this.(Lscala/collection/TraversableOnce;::toMap(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;)(ev);
  }
  
  public Lscala/collection/GenSet; toSet() {
    return this.(Lscala/collection/TraversableOnce;::toSet()Lscala/collection/immutable/Set;)();
  }
  
  public Lscala/collection/GenSeq; toSeq() {
    return this.(Lscala/collection/TraversableOnce;::toSeq()Lscala/collection/Seq;)();
  }
  
  public Lscala/collection/GenIterable; toIterable() {
    return this.(Lscala/collection/TraversableOnce;::toIterable()Lscala/collection/Iterable;)();
  }
  
  public Lscala/collection/GenTraversable; toTraversable() {
    return this.(Lscala/collection/Iterator;::toTraversable()Lscala/collection/Traversable;)();
  }
  
  public Lscala/collection/TraversableOnce; seq() {
    return this.(Lscala/collection/Iterator;::seq()Lscala/collection/Iterator;)();
  }
  
  public this(Lscala/collection/SeqLike; $outer, I; n) {
    this.(Lscala/collection/SeqLike$CombinationsItr;)n = n;
    if (($outer == null))
      {
        throw (new (Ljava/lang/NullPointerException;::this()V;)());
      }
    else
      {
        this.(Lscala/collection/SeqLike$CombinationsItr;)$outer$u0020 = $outer;
      }
    (Ljava/lang/Object;::super()V;)();
    Lscala/collection/GenTraversableOnce$class;.(Lscala/collection/GenTraversableOnce$class;::$init$(Lscala/collection/GenTraversableOnce;)V;)(this);
    Lscala/collection/TraversableOnce$class;.(Lscala/collection/TraversableOnce$class;::$init$(Lscala/collection/TraversableOnce;)V;)(this);
    Lscala/collection/Iterator$class;.(Lscala/collection/Iterator$class;::$init$(Lscala/collection/Iterator;)V;)(this);
    Lscala/Tuple3; temp7 = this.(Lscala/collection/SeqLike$CombinationsItr;::init()Lscala/Tuple3;)();
    Lscala/Tuple3; $14$;
    if ((temp7 != null))
      {
        $14$ = (new (Lscala/Tuple3;::this(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;)(temp7.(Lscala/Tuple3;::_1()Ljava/lang/Object;)(), temp7.(Lscala/Tuple3;::_2()Ljava/lang/Object;)(), temp7.(Lscala/Tuple3;::_3()Ljava/lang/Object;)()));
      }
    else
      {
        throw (new (Lscala/MatchError;::this(Ljava/lang/Object;)V;)(temp7));
      }
    this.(Lscala/collection/SeqLike$CombinationsItr;)x$4 = $14$;
    this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$elms$u0020 = this.(Lscala/collection/SeqLike$CombinationsItr;)x$4.(Lscala/Tuple3;::_1()Ljava/lang/Object;)().<cast>(Lscala/collection/IndexedSeq;);
    this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$cnts$u0020 = this.(Lscala/collection/SeqLike$CombinationsItr;)x$4.(Lscala/Tuple3;::_2()Ljava/lang/Object;)().<cast>(I;[);
    this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$nums$u0020 = this.(Lscala/collection/SeqLike$CombinationsItr;)x$4.(Lscala/Tuple3;::_3()Ljava/lang/Object;)().<cast>(I;[);
    this.(Lscala/collection/SeqLike$CombinationsItr;)scala$collection$SeqLike$CombinationsItr$$offs$u0020 = Lscala/Predef$;.MODULE$.(Lscala/Predef$;::intArrayOps(I;[)Lscala/collection/mutable/ArrayOps;)(this.(Lscala/collection/SeqLike$CombinationsItr;::scala$collection$SeqLike$CombinationsItr$$cnts()I;[)()).(Lscala/collection/TraversableLike;::scanLeft(Ljava/lang/Object;Lscala/Function2;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(0), (new (Lscala/collection/SeqLike$CombinationsItr$$anonfun$1;::this(Lscala/collection/SeqLike$CombinationsItr;)V;)(this)), Lscala/Array$;.MODULE$.(Lscala/Array$;::canBuildFrom(Lscala/reflect/ClassManifest;)Lscala/collection/generic/CanBuildFrom;)(Lscala/reflect/Manifest$;.MODULE$.(Lscala/reflect/Manifest$;::Int()Lscala/reflect/AnyValManifest;)())).<cast>(I;[);
    this.(Lscala/collection/SeqLike$CombinationsItr;)_hasNext$u0020 = true;
  }
}
