public abstract class Lscala/math/Numeric$ShortIsIntegral$class; {
  
  public static S; plus(Lscala/math/Numeric$ShortIsIntegral; $this, S; x, S; y) {
    return (x + y).<cast>(S;);
  }
  
  public static S; minus(Lscala/math/Numeric$ShortIsIntegral; $this, S; x, S; y) {
    return (x - y).<cast>(S;);
  }
  
  public static S; times(Lscala/math/Numeric$ShortIsIntegral; $this, S; x, S; y) {
    return (x * y).<cast>(S;);
  }
  
  public static S; quot(Lscala/math/Numeric$ShortIsIntegral; $this, S; x, S; y) {
    return (x / y).<cast>(S;);
  }
  
  public static S; rem(Lscala/math/Numeric$ShortIsIntegral; $this, S; x, S; y) {
    return (x % y).<cast>(S;);
  }
  
  public static S; negate(Lscala/math/Numeric$ShortIsIntegral; $this, S; x) {
    return -(x).<cast>(S;);
  }
  
  public static S; fromInt(Lscala/math/Numeric$ShortIsIntegral; $this, I; x) {
    return x.<cast>(S;);
  }
  
  public static I; toInt(Lscala/math/Numeric$ShortIsIntegral; $this, S; x) {
    return x.<cast>(I;);
  }
  
  public static J; toLong(Lscala/math/Numeric$ShortIsIntegral; $this, S; x) {
    return x.<cast>(J;);
  }
  
  public static F; toFloat(Lscala/math/Numeric$ShortIsIntegral; $this, S; x) {
    return x.<cast>(F;);
  }
  
  public static D; toDouble(Lscala/math/Numeric$ShortIsIntegral; $this, S; x) {
    return x.<cast>(D;);
  }
  
  public static V; $init$(Lscala/math/Numeric$ShortIsIntegral; $this) {
    
  }
}
