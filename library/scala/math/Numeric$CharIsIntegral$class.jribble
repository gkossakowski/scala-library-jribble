public abstract class Lscala/math/Numeric$CharIsIntegral$class; {
  
  public static C; plus(Lscala/math/Numeric$CharIsIntegral; $this, C; x, C; y) {
    return (x + y).<cast>(C;);
  }
  
  public static C; minus(Lscala/math/Numeric$CharIsIntegral; $this, C; x, C; y) {
    return (x - y).<cast>(C;);
  }
  
  public static C; times(Lscala/math/Numeric$CharIsIntegral; $this, C; x, C; y) {
    return (x * y).<cast>(C;);
  }
  
  public static C; quot(Lscala/math/Numeric$CharIsIntegral; $this, C; x, C; y) {
    return (x / y).<cast>(C;);
  }
  
  public static C; rem(Lscala/math/Numeric$CharIsIntegral; $this, C; x, C; y) {
    return (x % y).<cast>(C;);
  }
  
  public static C; negate(Lscala/math/Numeric$CharIsIntegral; $this, C; x) {
    return -(x).<cast>(C;);
  }
  
  public static C; fromInt(Lscala/math/Numeric$CharIsIntegral; $this, I; x) {
    return x.<cast>(C;);
  }
  
  public static I; toInt(Lscala/math/Numeric$CharIsIntegral; $this, C; x) {
    return x.<cast>(I;);
  }
  
  public static J; toLong(Lscala/math/Numeric$CharIsIntegral; $this, C; x) {
    return x.<cast>(J;);
  }
  
  public static F; toFloat(Lscala/math/Numeric$CharIsIntegral; $this, C; x) {
    return x.<cast>(F;);
  }
  
  public static D; toDouble(Lscala/math/Numeric$CharIsIntegral; $this, C; x) {
    return x.<cast>(D;);
  }
  
  public static V; $init$(Lscala/math/Numeric$CharIsIntegral; $this) {
    
  }
}
