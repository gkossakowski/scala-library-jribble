public abstract class Lscala/math/Numeric$BigDecimalIsConflicted$class; {
  
  public static Lscala/math/BigDecimal; plus(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return x.(Lscala/math/BigDecimal;::$plus(Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(y);
  }
  
  public static Lscala/math/BigDecimal; minus(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return x.(Lscala/math/BigDecimal;::$minus(Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(y);
  }
  
  public static Lscala/math/BigDecimal; times(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return x.(Lscala/math/BigDecimal;::$times(Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(y);
  }
  
  public static Lscala/math/BigDecimal; negate(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x) {
    return x.(Lscala/math/BigDecimal;::unary_$minus()Lscala/math/BigDecimal;)();
  }
  
  public static Lscala/math/BigDecimal; fromInt(Lscala/math/Numeric$BigDecimalIsConflicted; $this, I; x) {
    return Lscala/math/BigDecimal$;.MODULE$.(Lscala/math/BigDecimal$;::apply(I;)Lscala/math/BigDecimal;)(x);
  }
  
  public static I; toInt(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x) {
    return x.(Lscala/math/BigDecimal;::intValue()I;)();
  }
  
  public static J; toLong(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x) {
    return x.(Lscala/math/BigDecimal;::longValue()J;)();
  }
  
  public static F; toFloat(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x) {
    return x.(Lscala/math/BigDecimal;::floatValue()F;)();
  }
  
  public static D; toDouble(Lscala/math/Numeric$BigDecimalIsConflicted; $this, Lscala/math/BigDecimal; x) {
    return x.(Lscala/math/BigDecimal;::doubleValue()D;)();
  }
  
  public static V; $init$(Lscala/math/Numeric$BigDecimalIsConflicted; $this) {
    
  }
}
