public final class Lscala/math/Numeric$BigDecimalAsIfIntegral$; extends Ljava/lang/Object; implements Lscala/math/Numeric$BigDecimalAsIfIntegral;, Lscala/math/Ordering$BigDecimalOrdering;, Lscala/ScalaObject; {
  public static Lscala/math/Numeric$BigDecimalAsIfIntegral$; MODULE$ = new (Lscala/math/Numeric$BigDecimalAsIfIntegral$;::this()V;)();
  
  public I; compare(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Ordering$BigDecimalOrdering$class;.(Lscala/math/Ordering$BigDecimalOrdering$class;::compare(Lscala/math/Ordering$BigDecimalOrdering;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)I;)(this, x, y);
  }
  
  public Lscala/math/BigDecimal; quot(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Numeric$BigDecimalAsIfIntegral$class;.(Lscala/math/Numeric$BigDecimalAsIfIntegral$class;::quot(Lscala/math/Numeric$BigDecimalAsIfIntegral;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x, y);
  }
  
  public Lscala/math/BigDecimal; rem(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Numeric$BigDecimalAsIfIntegral$class;.(Lscala/math/Numeric$BigDecimalAsIfIntegral$class;::rem(Lscala/math/Numeric$BigDecimalAsIfIntegral;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x, y);
  }
  
  public Lscala/math/Integral$IntegralOps; mkNumericOps(Ljava/lang/Object; lhs) {
    return Lscala/math/Integral$class;.(Lscala/math/Integral$class;::mkNumericOps(Lscala/math/Integral;Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;)(this, lhs);
  }
  
  public Lscala/math/BigDecimal; plus(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::plus(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x, y);
  }
  
  public Lscala/math/BigDecimal; minus(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::minus(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x, y);
  }
  
  public Lscala/math/BigDecimal; times(Lscala/math/BigDecimal; x, Lscala/math/BigDecimal; y) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::times(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x, y);
  }
  
  public Lscala/math/BigDecimal; negate(Lscala/math/BigDecimal; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::negate(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(this, x);
  }
  
  public Lscala/math/BigDecimal; fromInt(I; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::fromInt(Lscala/math/Numeric$BigDecimalIsConflicted;I;)Lscala/math/BigDecimal;)(this, x);
  }
  
  public I; toInt(Lscala/math/BigDecimal; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::toInt(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;)I;)(this, x);
  }
  
  public J; toLong(Lscala/math/BigDecimal; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::toLong(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;)J;)(this, x);
  }
  
  public F; toFloat(Lscala/math/BigDecimal; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::toFloat(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;)F;)(this, x);
  }
  
  public D; toDouble(Lscala/math/BigDecimal; x) {
    return Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::toDouble(Lscala/math/Numeric$BigDecimalIsConflicted;Lscala/math/BigDecimal;)D;)(this, x);
  }
  
  public Ljava/lang/Object; zero() {
    return Lscala/math/Numeric$class;.(Lscala/math/Numeric$class;::zero(Lscala/math/Numeric;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; one() {
    return Lscala/math/Numeric$class;.(Lscala/math/Numeric$class;::one(Lscala/math/Numeric;)Ljava/lang/Object;)(this);
  }
  
  public Ljava/lang/Object; abs(Ljava/lang/Object; x) {
    return Lscala/math/Numeric$class;.(Lscala/math/Numeric$class;::abs(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;)(this, x);
  }
  
  public I; signum(Ljava/lang/Object; x) {
    return Lscala/math/Numeric$class;.(Lscala/math/Numeric$class;::signum(Lscala/math/Numeric;Ljava/lang/Object;)I;)(this, x);
  }
  
  public Lscala/Some; tryCompare(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::tryCompare(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;)(this, x, y);
  }
  
  public Z; lteq(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::lteq(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;)(this, x, y);
  }
  
  public Z; gteq(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::gteq(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;)(this, x, y);
  }
  
  public Z; lt(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::lt(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;)(this, x, y);
  }
  
  public Z; gt(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::gt(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;)(this, x, y);
  }
  
  public Z; equiv(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::equiv(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;)(this, x, y);
  }
  
  public Ljava/lang/Object; max(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::max(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(this, x, y);
  }
  
  public Ljava/lang/Object; min(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::min(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(this, x, y);
  }
  
  public Lscala/math/Ordering; reverse() {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::reverse(Lscala/math/Ordering;)Lscala/math/Ordering;)(this);
  }
  
  public Lscala/math/Ordering; on(Lscala/Function1; f) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::on(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;)(this, f);
  }
  
  public Lscala/math/Ordering$Ops; mkOrderingOps(Ljava/lang/Object; lhs) {
    return Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::mkOrderingOps(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;)(this, lhs);
  }
  
  public Lscala/math/PartialOrdering; reverse() {
    return this.(Lscala/math/Ordering;::reverse()Lscala/math/Ordering;)();
  }
  
  public Lscala/Option; tryCompare(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Ordering;::tryCompare(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;)(x, y);
  }
  
  public D; toDouble(Ljava/lang/Object; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::toDouble(Lscala/math/BigDecimal;)D;)(x.<cast>(Lscala/math/BigDecimal;));
  }
  
  public F; toFloat(Ljava/lang/Object; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::toFloat(Lscala/math/BigDecimal;)F;)(x.<cast>(Lscala/math/BigDecimal;));
  }
  
  public J; toLong(Ljava/lang/Object; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::toLong(Lscala/math/BigDecimal;)J;)(x.<cast>(Lscala/math/BigDecimal;));
  }
  
  public I; toInt(Ljava/lang/Object; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::toInt(Lscala/math/BigDecimal;)I;)(x.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Ljava/lang/Object; fromInt(I; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::fromInt(I;)Lscala/math/BigDecimal;)(x);
  }
  
  public Ljava/lang/Object; negate(Ljava/lang/Object; x) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::negate(Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Ljava/lang/Object; times(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::times(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Ljava/lang/Object; minus(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::minus(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Ljava/lang/Object; plus(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Numeric$BigDecimalIsConflicted;::plus(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Lscala/math/Numeric$Ops; mkNumericOps(Ljava/lang/Object; lhs) {
    return this.(Lscala/math/Integral;::mkNumericOps(Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;)(lhs);
  }
  
  public Ljava/lang/Object; rem(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Numeric$BigDecimalAsIfIntegral;::rem(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public Ljava/lang/Object; quot(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Numeric$BigDecimalAsIfIntegral;::quot(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/math/BigDecimal;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public I; compare(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return this.(Lscala/math/Ordering$BigDecimalOrdering;::compare(Lscala/math/BigDecimal;Lscala/math/BigDecimal;)I;)(x.<cast>(Lscala/math/BigDecimal;), y.<cast>(Lscala/math/BigDecimal;));
  }
  
  public this() {
    (Ljava/lang/Object;::super()V;)();
    Lscala/math/PartialOrdering$class;.(Lscala/math/PartialOrdering$class;::$init$(Lscala/math/PartialOrdering;)V;)(this);
    Lscala/math/Ordering$class;.(Lscala/math/Ordering$class;::$init$(Lscala/math/Ordering;)V;)(this);
    Lscala/math/Numeric$class;.(Lscala/math/Numeric$class;::$init$(Lscala/math/Numeric;)V;)(this);
    Lscala/math/Numeric$BigDecimalIsConflicted$class;.(Lscala/math/Numeric$BigDecimalIsConflicted$class;::$init$(Lscala/math/Numeric$BigDecimalIsConflicted;)V;)(this);
    Lscala/math/Integral$class;.(Lscala/math/Integral$class;::$init$(Lscala/math/Integral;)V;)(this);
    Lscala/math/Numeric$BigDecimalAsIfIntegral$class;.(Lscala/math/Numeric$BigDecimalAsIfIntegral$class;::$init$(Lscala/math/Numeric$BigDecimalAsIfIntegral;)V;)(this);
    Lscala/math/Ordering$BigDecimalOrdering$class;.(Lscala/math/Ordering$BigDecimalOrdering$class;::$init$(Lscala/math/Ordering$BigDecimalOrdering;)V;)(this);
  }
}
