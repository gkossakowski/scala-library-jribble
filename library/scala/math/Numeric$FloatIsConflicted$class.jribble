public abstract class Lscala/math/Numeric$FloatIsConflicted$class; {
  
  public static F; plus(Lscala/math/Numeric$FloatIsConflicted; $this, F; x, F; y) {
    return (x + y);
  }
  
  public static F; minus(Lscala/math/Numeric$FloatIsConflicted; $this, F; x, F; y) {
    return (x - y);
  }
  
  public static F; times(Lscala/math/Numeric$FloatIsConflicted; $this, F; x, F; y) {
    return (x * y);
  }
  
  public static F; negate(Lscala/math/Numeric$FloatIsConflicted; $this, F; x) {
    return -(x);
  }
  
  public static F; fromInt(Lscala/math/Numeric$FloatIsConflicted; $this, I; x) {
    return x.<cast>(F;);
  }
  
  public static I; toInt(Lscala/math/Numeric$FloatIsConflicted; $this, F; x) {
    return x.<cast>(I;);
  }
  
  public static J; toLong(Lscala/math/Numeric$FloatIsConflicted; $this, F; x) {
    return x.<cast>(J;);
  }
  
  public static F; toFloat(Lscala/math/Numeric$FloatIsConflicted; $this, F; x) {
    return x;
  }
  
  public static D; toDouble(Lscala/math/Numeric$FloatIsConflicted; $this, F; x) {
    return x.<cast>(D;);
  }
  
  public static V; $init$(Lscala/math/Numeric$FloatIsConflicted; $this) {
    
  }
}
