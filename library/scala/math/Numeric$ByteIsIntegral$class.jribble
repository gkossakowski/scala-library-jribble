public abstract class Lscala/math/Numeric$ByteIsIntegral$class; {
  
  public static B; plus(Lscala/math/Numeric$ByteIsIntegral; $this, B; x, B; y) {
    return (x + y).<cast>(B;);
  }
  
  public static B; minus(Lscala/math/Numeric$ByteIsIntegral; $this, B; x, B; y) {
    return (x - y).<cast>(B;);
  }
  
  public static B; times(Lscala/math/Numeric$ByteIsIntegral; $this, B; x, B; y) {
    return (x * y).<cast>(B;);
  }
  
  public static B; quot(Lscala/math/Numeric$ByteIsIntegral; $this, B; x, B; y) {
    return (x / y).<cast>(B;);
  }
  
  public static B; rem(Lscala/math/Numeric$ByteIsIntegral; $this, B; x, B; y) {
    return (x % y).<cast>(B;);
  }
  
  public static B; negate(Lscala/math/Numeric$ByteIsIntegral; $this, B; x) {
    return -(x).<cast>(B;);
  }
  
  public static B; fromInt(Lscala/math/Numeric$ByteIsIntegral; $this, I; x) {
    return x.<cast>(B;);
  }
  
  public static I; toInt(Lscala/math/Numeric$ByteIsIntegral; $this, B; x) {
    return x.<cast>(I;);
  }
  
  public static J; toLong(Lscala/math/Numeric$ByteIsIntegral; $this, B; x) {
    return x.<cast>(J;);
  }
  
  public static F; toFloat(Lscala/math/Numeric$ByteIsIntegral; $this, B; x) {
    return x.<cast>(F;);
  }
  
  public static D; toDouble(Lscala/math/Numeric$ByteIsIntegral; $this, B; x) {
    return x.<cast>(D;);
  }
  
  public static V; $init$(Lscala/math/Numeric$ByteIsIntegral; $this) {
    
  }
}
