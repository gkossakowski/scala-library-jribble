public final class Lscala/math/Equiv$$anonfun$by$1; extends Lscala/runtime/AbstractFunction2; implements Lscala/Serializable; {
  
  public final Z; apply(Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return Lscala/Predef$;.MODULE$.(Lscala/Predef$;::implicitly(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/math/Equiv$$anonfun$by$1;)evidence$1$1).<cast>(Lscala/math/Equiv;).(Lscala/math/Equiv;::equiv(Ljava/lang/Object;Ljava/lang/Object;)Z;)(this.(Lscala/math/Equiv$$anonfun$by$1;)f$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(x), this.(Lscala/math/Equiv$$anonfun$by$1;)f$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(y));
  }
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; v1, Ljava/lang/Object; v2) {
    return Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToBoolean(Z;)Ljava/lang/Boolean;)(this.(Lscala/math/Equiv$$anonfun$by$1;::apply(Ljava/lang/Object;Ljava/lang/Object;)Z;)(v1, v2));
  }
  
  private Lscala/Function1; f$1;
  
  private Lscala/math/Equiv; evidence$1$1;
  
  public this(Lscala/Function1; f$1, Lscala/math/Equiv; evidence$1$1) {
    this.(Lscala/math/Equiv$$anonfun$by$1;)f$1 = f$1;
    this.(Lscala/math/Equiv$$anonfun$by$1;)evidence$1$1 = evidence$1$1;
    (Lscala/runtime/AbstractFunction2;::super()V;)();
  }
}
