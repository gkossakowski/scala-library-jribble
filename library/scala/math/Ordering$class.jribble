public abstract class Lscala/math/Ordering$class; {
  
  public static Lscala/Some; tryCompare(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y))));
  }
  
  public static Z; lteq(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return ($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y) <= 0);
  }
  
  public static Z; gteq(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return ($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y) >= 0);
  }
  
  public static Z; lt(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return ($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y) < 0);
  }
  
  public static Z; gt(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return ($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y) > 0);
  }
  
  public static Z; equiv(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    return ($this.(Lscala/math/Ordering;::compare(Ljava/lang/Object;Ljava/lang/Object;)I;)(x, y) == 0);
  }
  
  public static Ljava/lang/Object; max(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    Ljava/lang/Object; $1$;
    if ($this.(Lscala/math/Ordering;::gteq(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x, y))
      {
        $1$ = x;
      }
    else
      {
        $1$ = y;
      }
    return $1$;
  }
  
  public static Ljava/lang/Object; min(Lscala/math/Ordering; $this, Ljava/lang/Object; x, Ljava/lang/Object; y) {
    Ljava/lang/Object; $2$;
    if ($this.(Lscala/math/Ordering;::lteq(Ljava/lang/Object;Ljava/lang/Object;)Z;)(x, y))
      {
        $2$ = x;
      }
    else
      {
        $2$ = y;
      }
    return $2$;
  }
  
  public static Lscala/math/Ordering; reverse(Lscala/math/Ordering; $this) {
    return (new (Lscala/math/Ordering$$anon$2;::this(Lscala/math/Ordering;)V;)($this));
  }
  
  public static Lscala/math/Ordering; on(Lscala/math/Ordering; $this, Lscala/Function1; f$1) {
    return (new (Lscala/math/Ordering$$anon$3;::this(Lscala/math/Ordering;Lscala/Function1;)V;)($this, f$1));
  }
  
  public static Lscala/math/Ordering$Ops; mkOrderingOps(Lscala/math/Ordering; $this, Ljava/lang/Object; lhs) {
    return (new (Lscala/math/Ordering$Ops;::this(Lscala/math/Ordering;Ljava/lang/Object;)V;)($this, lhs));
  }
  
  public static V; $init$(Lscala/math/Ordering; $this) {
    
  }
}
