public abstract class Lscala/math/Numeric$IntIsIntegral$class; {
  
  public static I; plus(Lscala/math/Numeric$IntIsIntegral; $this, I; x, I; y) {
    return (x + y);
  }
  
  public static I; minus(Lscala/math/Numeric$IntIsIntegral; $this, I; x, I; y) {
    return (x - y);
  }
  
  public static I; times(Lscala/math/Numeric$IntIsIntegral; $this, I; x, I; y) {
    return (x * y);
  }
  
  public static I; quot(Lscala/math/Numeric$IntIsIntegral; $this, I; x, I; y) {
    return (x / y);
  }
  
  public static I; rem(Lscala/math/Numeric$IntIsIntegral; $this, I; x, I; y) {
    return (x % y);
  }
  
  public static I; negate(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return -(x);
  }
  
  public static I; fromInt(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return x;
  }
  
  public static I; toInt(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return x;
  }
  
  public static J; toLong(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return x.<cast>(J;);
  }
  
  public static F; toFloat(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return x.<cast>(F;);
  }
  
  public static D; toDouble(Lscala/math/Numeric$IntIsIntegral; $this, I; x) {
    return x.<cast>(D;);
  }
  
  public static V; $init$(Lscala/math/Numeric$IntIsIntegral; $this) {
    
  }
}
