public final class Lscala/Tuple3$Zipped$$anonfun$flatMap$1; extends Lscala/runtime/AbstractFunction1; {
  
  public final Ljava/lang/Object; apply(Ljava/lang/Object; el1) {
    Ljava/lang/Object; $5$;
    if ((this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems2$3.(Lscala/collection/Iterator;::hasNext()Z;)() && this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems3$3.(Lscala/collection/Iterator;::hasNext()Z;)()))
      {
        $5$ = this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)b$2.(Lscala/collection/generic/Growable;::$plus$plus$eq(Lscala/collection/TraversableOnce;)Lscala/collection/generic/Growable;)(this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)f$2.(Lscala/Function3;::apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)(el1, this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems2$3.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)(), this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems3$3.(Lscala/collection/Iterator;::next()Ljava/lang/Object;)()).<cast>(Lscala/collection/TraversableOnce;));
      }
    else
      {
        $5$ = Lscala/runtime/BoxedUnit;.UNIT;
      }
    return $5$;
  }
  
  private Lscala/Function3; f$2;
  
  private Lscala/collection/mutable/Builder; b$2;
  
  private Lscala/collection/Iterator; elems2$3;
  
  private Lscala/collection/Iterator; elems3$3;
  
  public this(Lscala/Tuple3$Zipped; $outer, Lscala/Function3; f$2, Lscala/collection/mutable/Builder; b$2, Lscala/collection/Iterator; elems2$3, Lscala/collection/Iterator; elems3$3) {
    this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)f$2 = f$2;
    this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)b$2 = b$2;
    this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems2$3 = elems2$3;
    this.(Lscala/Tuple3$Zipped$$anonfun$flatMap$1;)elems3$3 = elems3$3;
    (Lscala/runtime/AbstractFunction1;::super()V;)();
  }
}
