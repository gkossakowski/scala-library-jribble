public final class Lscala/util/control/Exception$$anon$1; extends Ljava/lang/Object; implements Lscala/PartialFunction; {
  
  public Lscala/PartialFunction; orElse(Lscala/PartialFunction; that) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::orElse(Lscala/PartialFunction;Lscala/PartialFunction;)Lscala/PartialFunction;)(this, that);
  }
  
  public Lscala/PartialFunction; andThen(Lscala/Function1; k) {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::andThen(Lscala/PartialFunction;Lscala/Function1;)Lscala/PartialFunction;)(this, k);
  }
  
  public Lscala/Function1; lift() {
    return Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::lift(Lscala/PartialFunction;)Lscala/Function1;)(this);
  }
  
  public Lscala/Function1; compose(Lscala/Function1; g) {
    return Lscala/Function1$class;.(Lscala/Function1$class;::compose(Lscala/Function1;Lscala/Function1;)Lscala/Function1;)(this, g);
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/Function1$class;.(Lscala/Function1$class;::toString(Lscala/Function1;)Ljava/lang/String;)(this);
  }
  
  private Lscala/Option; downcast(Ljava/lang/Throwable; x) {
    Lscala/Option; $11$;
    if (Lscala/Predef$;.MODULE$.(Lscala/Predef$;::classManifest(Lscala/reflect/ClassManifest;)Lscala/reflect/ClassManifest;)(this.(Lscala/util/control/Exception$$anon$1;)evidence$1$1).(Lscala/reflect/ClassManifest;::erasure()Ljava/lang/Class;)().(Ljava/lang/Class;::isAssignableFrom(Ljava/lang/Class;)Z;)(x.(Ljava/lang/Object;::getClass()Ljava/lang/Class;)()))
      {
        $11$ = (new (Lscala/Some;::this(Ljava/lang/Object;)V;)(x));
      }
    else
      {
        $11$ = Lscala/None$;.MODULE$;
      }
    return $11$;
  }
  
  public Z; isDefinedAt(Ljava/lang/Throwable; x) {
    return this.(Lscala/util/control/Exception$$anon$1;::downcast(Ljava/lang/Throwable;)Lscala/Option;)(x).(Lscala/Option;::exists(Lscala/Function1;)Z;)(this.(Lscala/util/control/Exception$$anon$1;)isDef$1);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Throwable; x) {
    return this.(Lscala/util/control/Exception$$anon$1;)f$1.(Lscala/Function1;::apply(Ljava/lang/Object;)Ljava/lang/Object;)(this.(Lscala/util/control/Exception$$anon$1;::downcast(Ljava/lang/Throwable;)Lscala/Option;)(x).(Lscala/Option;::get()Ljava/lang/Object;)());
  }
  
  public Lscala/Function1; andThen(Lscala/Function1; g) {
    return this.(Lscala/PartialFunction;::andThen(Lscala/Function1;)Lscala/PartialFunction;)(g);
  }
  
  public Ljava/lang/Object; apply(Ljava/lang/Object; v1) {
    return this.(Lscala/util/control/Exception$$anon$1;::apply(Ljava/lang/Throwable;)Ljava/lang/Object;)(v1.<cast>(Ljava/lang/Throwable;));
  }
  
  public Z; isDefinedAt(Ljava/lang/Object; x) {
    return this.(Lscala/util/control/Exception$$anon$1;::isDefinedAt(Ljava/lang/Throwable;)Z;)(x.<cast>(Ljava/lang/Throwable;));
  }
  
  private Lscala/Function1; isDef$1;
  
  private Lscala/Function1; f$1;
  
  private Lscala/reflect/ClassManifest; evidence$1$1;
  
  public this(Lscala/Function1; isDef$1, Lscala/Function1; f$1, Lscala/reflect/ClassManifest; evidence$1$1) {
    this.(Lscala/util/control/Exception$$anon$1;)isDef$1 = isDef$1;
    this.(Lscala/util/control/Exception$$anon$1;)f$1 = f$1;
    this.(Lscala/util/control/Exception$$anon$1;)evidence$1$1 = evidence$1$1;
    (Ljava/lang/Object;::super()V;)();
    Lscala/Function1$class;.(Lscala/Function1$class;::$init$(Lscala/Function1;)V;)(this);
    Lscala/PartialFunction$class;.(Lscala/PartialFunction$class;::$init$(Lscala/PartialFunction;)V;)(this);
  }
}
