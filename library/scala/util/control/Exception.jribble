public final class Lscala/util/control/Exception; {
  public final static Ljava/lang/Throwable; unwrap$1(Ljava/lang/Throwable; x_0, Lscala/collection/Seq; x_1) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::unwrap$1(Ljava/lang/Throwable;Lscala/collection/Seq;)Ljava/lang/Throwable;)(x_0, x_1); }
  public final static Lscala/util/control/Exception$Catch; fun$1(Lscala/Function1; x_0, Lscala/collection/Seq; x_1) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::fun$1(Lscala/Function1;Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0, x_1); }
  public final static Lscala/util/control/Exception$Catch; unwrapping(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::unwrapping(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; ultimately(Lscala/Function0; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::ultimately(Lscala/Function0;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$By; handling(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::handling(Lscala/collection/Seq;)Lscala/util/control/Exception$By;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; failAsValue(Lscala/collection/Seq; x_0, Lscala/Function0; x_1) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::failAsValue(Lscala/collection/Seq;Lscala/Function0;)Lscala/util/control/Exception$Catch;)(x_0, x_1); }
  public final static Lscala/util/control/Exception$Catch; failing(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::failing(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; ignoring(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::ignoring(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; catchingPromiscuously(Lscala/PartialFunction; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::catchingPromiscuously(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; catchingPromiscuously(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::catchingPromiscuously(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; catching(Lscala/PartialFunction; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::catching(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; catching(Lscala/collection/Seq; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::catching(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;)(x_0); }
  public final static Lscala/util/control/Exception$Catch; allCatch() { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::allCatch()Lscala/util/control/Exception$Catch;)(); }
  public final static Lscala/util/control/Exception$Catch; noCatch() { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::noCatch()Lscala/util/control/Exception$Catch;)(); }
  public final static Lscala/PartialFunction; allCatcher() { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::allCatcher()Lscala/PartialFunction;)(); }
  public final static Lscala/PartialFunction; nothingCatcher() { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::nothingCatcher()Lscala/PartialFunction;)(); }
  public final static Z; shouldRethrow(Ljava/lang/Throwable; x_0) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::shouldRethrow(Ljava/lang/Throwable;)Z;)(x_0); }
  public final static Lscala/PartialFunction; throwableSubtypeToCatcher(Lscala/PartialFunction; x_0, Lscala/reflect/ClassManifest; x_1) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::throwableSubtypeToCatcher(Lscala/PartialFunction;Lscala/reflect/ClassManifest;)Lscala/PartialFunction;)(x_0, x_1); }
  public final static Lscala/PartialFunction; mkThrowableCatcher(Lscala/Function1; x_0, Lscala/Function1; x_1) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::mkThrowableCatcher(Lscala/Function1;Lscala/Function1;)Lscala/PartialFunction;)(x_0, x_1); }
  public final static Lscala/PartialFunction; mkCatcher(Lscala/Function1; x_0, Lscala/Function1; x_1, Lscala/reflect/ClassManifest; x_2) { return Lscala/util/control/Exception$;.MODULE$.(Lscala/util/control/Exception$;::mkCatcher(Lscala/Function1;Lscala/Function1;Lscala/reflect/ClassManifest;)Lscala/PartialFunction;)(x_0, x_1, x_2); }
  
}
