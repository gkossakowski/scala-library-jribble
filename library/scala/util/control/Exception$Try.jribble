public class Lscala/util/control/Exception$Try; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  private Lscala/Function0; body;
  
  private Lscala/util/control/Exception$Catch; catcher$u0020;
  
  public Lscala/util/control/Exception$Catch; catcher() {
    return this.(Lscala/util/control/Exception$Try;)catcher$u0020;
  }
  
  public Ljava/lang/Object; apply() {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::apply(Lscala/Function0;)Ljava/lang/Object;)(this.(Lscala/util/control/Exception$Try;)body);
  }
  
  public Ljava/lang/Object; apply(Lscala/Function0; other) {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::apply(Lscala/Function0;)Ljava/lang/Object;)(other);
  }
  
  public Lscala/Option; opt() {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::opt(Lscala/Function0;)Lscala/Option;)(this.(Lscala/util/control/Exception$Try;)body);
  }
  
  public Lscala/Option; opt(Lscala/Function0; other) {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::opt(Lscala/Function0;)Lscala/Option;)(other);
  }
  
  public Lscala/Either; either() {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::either(Lscala/Function0;)Lscala/Either;)(this.(Lscala/util/control/Exception$Try;)body);
  }
  
  public Lscala/Either; either(Lscala/Function0; other) {
    return this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::either(Lscala/Function0;)Lscala/Either;)(other);
  }
  
  public Lscala/util/control/Exception$Try; tryInstead(Lscala/Function0; other) {
    return (new (Lscala/util/control/Exception$Try;::this(Lscala/Function0;Lscala/util/control/Exception$Catch;)V;)(other, this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)()));
  }
  
  public Lscala/util/control/Exception$Try; or(Lscala/PartialFunction; pf) {
    return (new (Lscala/util/control/Exception$Try;::this(Lscala/Function0;Lscala/util/control/Exception$Catch;)V;)(this.(Lscala/util/control/Exception$Try;)body, this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::or(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;)(pf)));
  }
  
  public Lscala/util/control/Exception$Try; andFinally(Lscala/Function0; fin) {
    return (new (Lscala/util/control/Exception$Try;::this(Lscala/Function0;Lscala/util/control/Exception$Catch;)V;)(this.(Lscala/util/control/Exception$Try;)body, this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Catch;::andFinally(Lscala/Function0;)Lscala/util/control/Exception$Catch;)(fin)));
  }
  
  public Ljava/lang/String; toString() {
    return Lscala/collection/immutable/List$;.MODULE$.(Lscala/collection/immutable/List$;::apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Ljava/lang/String;>{"Try(<body>)", this.(Lscala/util/control/Exception$Try;::catcher()Lscala/util/control/Exception$Catch;)().(Lscala/util/control/Exception$Described;::toString()Ljava/lang/String;)()}.<cast>(Ljava/lang/Object;[))).(Lscala/collection/TraversableOnce;::mkString(Ljava/lang/String;)Ljava/lang/String;)(" ");
  }
  
  public this(Lscala/Function0; body, Lscala/util/control/Exception$Catch; catcher) {
    this.(Lscala/util/control/Exception$Try;)body = body;
    this.(Lscala/util/control/Exception$Try;)catcher$u0020 = catcher;
    (Ljava/lang/Object;::super()V;)();
  }
}
