public class Lscala/util/automata/SubsetConstruction; extends Ljava/lang/Object; implements Lscala/ScalaObject; {
  
  private Lscala/util/automata/NondetWordAutom; nfa$u0020;
  
  public Lscala/util/automata/NondetWordAutom; nfa() {
    return this.(Lscala/util/automata/NondetWordAutom;)nfa$u0020;
  }
  
  public I; selectTag(Lscala/collection/immutable/BitSet; Q, I;[ finals) {
    return Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::unboxToInt(Ljava/lang/Object;)I;)(Q.(Lscala/collection/TraversableLike;::map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapIntArray(I;[)Lscala/collection/mutable/WrappedArray;)(finals), Lscala/collection/immutable/BitSet$;.MODULE$.(Lscala/collection/immutable/BitSet$;::canBuildFrom()Lscala/collection/generic/CanBuildFrom;)()).<cast>(Lscala/collection/TraversableLike;).(Lscala/collection/TraversableLike;::filter(Lscala/Function1;)Ljava/lang/Object;)((new (Lscala/util/automata/SubsetConstruction$$anonfun$selectTag$1;::this(Lscala/util/automata/SubsetConstruction;)V;)(this))).<cast>(Lscala/collection/TraversableOnce;).(Lscala/collection/TraversableOnce;::min(Lscala/math/Ordering;)Ljava/lang/Object;)(Lscala/math/Ordering$Int$;.MODULE$));
  }
  
  public Lscala/util/automata/DetWordAutom; determinize() {
    Lscala/runtime/ObjectRef; indexMap$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/Map$;.MODULE$.(Lscala/collection/generic/MapFactory;::apply(Lscala/collection/Seq;)Lscala/collection/Map;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/Tuple2;>{}.<cast>(Ljava/lang/Object;[)))));
    Lscala/collection/Map; invIndexMap = Lscala/collection/Map$;.MODULE$.(Lscala/collection/generic/MapFactory;::apply(Lscala/collection/Seq;)Lscala/collection/Map;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/Tuple2;>{}.<cast>(Ljava/lang/Object;[)));
    I; ix = 0;
    Lscala/collection/immutable/BitSet; q0 = Lscala/collection/immutable/BitSet$;.MODULE$.(Lscala/collection/generic/BitSetFactory;::apply(Lscala/collection/Seq;)Lscala/collection/BitSet;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapIntArray(I;[)Lscala/collection/mutable/WrappedArray;)(<I;>{0})).<cast>(Lscala/collection/immutable/BitSet;);
    Lscala/collection/immutable/BitSet; sink = Lscala/collection/immutable/BitSet$;.MODULE$.(Lscala/collection/immutable/BitSet$;::empty()Lscala/collection/immutable/BitSet;)();
    Lscala/runtime/ObjectRef; states$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/Predef$;.MODULE$.(Lscala/Predef$;::Set()Lscala/collection/immutable/Set$;)().(Lscala/collection/generic/GenericCompanion;::apply(Lscala/collection/Seq;)Lscala/collection/Traversable;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/collection/immutable/BitSet;>{q0, sink}.<cast>(Ljava/lang/Object;[))).<cast>(Lscala/collection/immutable/Set;)));
    Lscala/collection/mutable/HashMap; delta$1 = (new (Lscala/collection/mutable/HashMap;::this()V;)());
    Lscala/runtime/ObjectRef; deftrans$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/Map$;.MODULE$.(Lscala/collection/generic/MapFactory;::apply(Lscala/collection/Seq;)Lscala/collection/Map;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/Tuple2;>{Lscala/Predef$;.MODULE$.(Lscala/Predef$;::any2ArrowAssoc(Ljava/lang/Object;)Lscala/Predef$ArrowAssoc;)(q0).(Lscala/Predef$ArrowAssoc;::$minus$greater(Ljava/lang/Object;)Lscala/Tuple2;)(sink), Lscala/Predef$;.MODULE$.(Lscala/Predef$;::any2ArrowAssoc(Ljava/lang/Object;)Lscala/Predef$ArrowAssoc;)(sink).(Lscala/Predef$ArrowAssoc;::$minus$greater(Ljava/lang/Object;)Lscala/Tuple2;)(sink)}.<cast>(Ljava/lang/Object;[)))));
    Lscala/runtime/ObjectRef; finals$1 = (new (Lscala/runtime/ObjectRef;::this(Ljava/lang/Object;)V;)(Lscala/collection/Map$;.MODULE$.(Lscala/collection/generic/MapFactory;::apply(Lscala/collection/Seq;)Lscala/collection/Map;)(Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/Tuple2;>{}.<cast>(Ljava/lang/Object;[)))));
    Lscala/collection/mutable/Stack; rest$1 = (new (Lscala/collection/mutable/Stack;::this()V;)());
    rest$1.(Lscala/collection/mutable/Stack;::push(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)Lscala/collection/mutable/Stack;)(sink, q0, Lscala/Predef$;.MODULE$.(Lscala/LowPriorityImplicits;::wrapRefArray(Ljava/lang/Object;[)Lscala/collection/mutable/WrappedArray;)(<Lscala/collection/immutable/BitSet;>{}.<cast>(Ljava/lang/Object;[)));
    this.(Lscala/util/automata/SubsetConstruction;::addFinal$1(Lscala/collection/immutable/BitSet;Lscala/runtime/ObjectRef;)V;)(q0, finals$1);
    while$1: while(true) {
      if (!(rest$1.(Lscala/collection/mutable/Stack;::isEmpty()Z;)()))
        {
          {
            Lscala/collection/immutable/BitSet; P$1 = rest$1.(Lscala/collection/mutable/Stack;::pop()Ljava/lang/Object;)().<cast>(Lscala/collection/immutable/BitSet;);
            indexMap$1.(Ljava/lang/Object;)elem = indexMap$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/Map;).(Lscala/collection/MapLike;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Map;)(P$1, Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(ix));
            invIndexMap = invIndexMap.(Lscala/collection/MapLike;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Map;)(Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(ix), P$1);
            ix = (ix + 1);
            Lscala/collection/mutable/HashMap; Pdelta$1 = (new (Lscala/collection/mutable/HashMap;::this()V;)());
            delta$1.(Lscala/collection/mutable/HashMap;::update(Ljava/lang/Object;Ljava/lang/Object;)V;)(P$1, Pdelta$1);
            this.(Lscala/util/automata/SubsetConstruction;::nfa()Lscala/util/automata/NondetWordAutom;)().(Lscala/util/automata/NondetWordAutom;::labels()Lscala/collection/Seq;)().(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/util/automata/SubsetConstruction$$anonfun$determinize$1;::this(Lscala/util/automata/SubsetConstruction;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/collection/mutable/Stack;Lscala/collection/immutable/BitSet;Lscala/collection/mutable/HashMap;)V;)(this, states$1, finals$1, rest$1, P$1, Pdelta$1)));
            Lscala/collection/immutable/BitSet; Pdef = this.(Lscala/util/automata/SubsetConstruction;::nfa()Lscala/util/automata/NondetWordAutom;)().(Lscala/util/automata/NondetWordAutom;::nextDefault(Lscala/collection/immutable/BitSet;)Lscala/collection/immutable/BitSet;)(P$1);
            deftrans$1.(Ljava/lang/Object;)elem = deftrans$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/Map;).(Lscala/collection/MapLike;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Map;)(P$1, Pdef);
            this.(Lscala/util/automata/SubsetConstruction;::add$1(Lscala/collection/immutable/BitSet;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/collection/mutable/Stack;)V;)(Pdef, states$1, finals$1, rest$1);
          }
          continue while$1;
        }
      else
        {
          
        }
      break;
    }
    I; nstatesR$1 = states$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/TraversableOnce;::size()I;)();
    Lscala/collection/Map;[ deltaR$1 = new Lscala/collection/Map;[nstatesR$1];
    I;[ defaultR$1 = new I;[nstatesR$1];
    I;[ finalsR$1 = new I;[nstatesR$1];
    states$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/util/automata/SubsetConstruction$$anonfun$determinize$2;::this(Lscala/util/automata/SubsetConstruction;Lscala/runtime/ObjectRef;Lscala/collection/mutable/HashMap;Lscala/runtime/ObjectRef;Lscala/collection/Map;[I;[)V;)(this, indexMap$1, delta$1, deftrans$1, deltaR$1, defaultR$1)));
    finals$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/Map;).(Lscala/collection/IterableLike;::foreach(Lscala/Function1;)V;)((new (Lscala/util/automata/SubsetConstruction$$anonfun$determinize$3;::this(Lscala/util/automata/SubsetConstruction;Lscala/runtime/ObjectRef;I;[)V;)(this, indexMap$1, finalsR$1)));
    return (new (Lscala/util/automata/SubsetConstruction$$anon$1;::this(Lscala/util/automata/SubsetConstruction;I;Lscala/collection/Map;[I;[I;[)V;)(this, nstatesR$1, deltaR$1, defaultR$1, finalsR$1));
  }
  
  private final V; addFinal$1(Lscala/collection/immutable/BitSet; q, Lscala/runtime/ObjectRef; finals$1) {
    if (this.(Lscala/util/automata/SubsetConstruction;::nfa()Lscala/util/automata/NondetWordAutom;)().(Lscala/util/automata/NondetWordAutom;::containsFinal(Lscala/collection/immutable/BitSet;)Z;)(q))
      {
        finals$1.(Ljava/lang/Object;)elem = finals$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/Map;).(Lscala/collection/MapLike;::updated(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Map;)(q, Lscala/runtime/BoxesRunTime;.(Lscala/runtime/BoxesRunTime;::boxToInteger(I;)Ljava/lang/Integer;)(this.(Lscala/util/automata/SubsetConstruction;::selectTag(Lscala/collection/immutable/BitSet;I;[)I;)(q, this.(Lscala/util/automata/SubsetConstruction;::nfa()Lscala/util/automata/NondetWordAutom;)().(Lscala/util/automata/NondetWordAutom;::finals()I;[)())));
      }
    else
      {
        
      }
  }
  
  public final V; add$1(Lscala/collection/immutable/BitSet; Q, Lscala/runtime/ObjectRef; states$1, Lscala/runtime/ObjectRef; finals$1, Lscala/collection/mutable/Stack; rest$1) {
    if (!(states$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/SetLike;::contains(Ljava/lang/Object;)Z;)(Q)))
      {
        states$1.(Ljava/lang/Object;)elem = states$1.(Ljava/lang/Object;)elem.<cast>(Lscala/collection/immutable/Set;).(Lscala/collection/SetLike;::$plus(Ljava/lang/Object;)Lscala/collection/Set;)(Q).<cast>(Lscala/collection/immutable/Set;);
        rest$1.(Lscala/collection/mutable/Stack;::push(Ljava/lang/Object;)Lscala/collection/mutable/Stack;)(Q);
        this.(Lscala/util/automata/SubsetConstruction;::addFinal$1(Lscala/collection/immutable/BitSet;Lscala/runtime/ObjectRef;)V;)(Q, finals$1);
      }
    else
      {
        
      }
  }
  
  public this(Lscala/util/automata/NondetWordAutom; nfa) {
    this.(Lscala/util/automata/NondetWordAutom;)nfa$u0020 = nfa;
    (Ljava/lang/Object;::super()V;)();
  }
}
